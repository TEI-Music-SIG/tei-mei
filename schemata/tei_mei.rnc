default namespace = "http://www.tei-c.org/ns/Examples"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace mei = "http://www.music-encoding.org/ns/mei"
namespace ns1 = "http://www.isocat.org/ns/dcr"
namespace ns2 = "http://www.tei-c.org/ns/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace twm = "http://www.tei-c.org/ns/teiWithMusic"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2013-08-02T14:27:59Z. 
# Edition: 2.5.0. Last updated on
#	26th July 2013.
# Edition Location: http://www.tei-c.org/Vault/P5/2.5.0/
#

# Copyright 2010 TEI Consortium. This is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This material is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. See the GNU General Public License for more details. A copy of the GNU General Public License is stored on the TEI web site along with this file; you can also contact the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA, for a copy. Copyright (c) 2010 by the Music Encoding Initiative (MEI) Council. Licensed under the Educational Community License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.osedu.org/licenses/ECL-2.0. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. This is a derivative work based on earlier versions of the schema copyright (c) 2001-2006 Perry Roland and the Rector and Visitors of the University of Virginia; licensed under the Educational Community License version 1.0.
macro.paraContent =
  (text | model.gLike | model.phrase | model.inter | model.global | lg)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq = (text | model.gLike | model.phrase | model.global)*
macro.phraseSeq.limited = (text | model.limitedPhrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
macro.xtext = (text | model.gLike)*
data.certainty = "high" | "medium" | "low" | "unknown"
data.probability = xsd:double { minInclusive = "0" maxInclusive = "1" }
data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
data.interval =
  xsd:float { minExclusive = "0" }
  | "regular"
  | "irregular"
  | "unknown"
data.count = xsd:nonNegativeInteger
data.temporal.w3c =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
data.duration.w3c = xsd:duration
data.truthValue = xsd:boolean
data.xTruthValue = xsd:boolean | "unknown" | "inapplicable"
data.language = xsd:language | ""
data.namespace = xsd:anyURI
data.outputMeasurement =
  xsd:token {
    pattern =
      "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
  }
data.pattern = xsd:token
data.point =
  xsd:token { pattern = "(\-?[0-9]+\.?[0-9]*,\-?[0-9]+\.?[0-9]*)" }
data.pointer = xsd:anyURI
data.version = xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
data.versionNumber =
  xsd:token { pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}" }
data.replacement = text
data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
data.sex = data.word
data.text = xsd:string
data.name = xsd:Name
data.xmlName = xsd:NCName
data.enumerated = data.name
data.temporal.iso =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
data.duration.iso = xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
macro.anyXML =
  element * - (ns2:* | mei:* | egXML) {
    attribute * { text }*,
    (text | macro.anyXML)*
  }
macro.schemaPattern = macro.anyXML
data.BEND.AMOUNT =
  xsd:decimal { pattern = "1|\.25|\.5|\.75" }
  | xsd:token { pattern = "full" }
data.BEAT = xsd:decimal { minInclusive = "0" }
data.BEATRPT.REND =
  xsd:positiveInteger { pattern = "4|8|16|32|64|128" }
  | xsd:token { pattern = "mixed" }
data.COLOR =
  xsd:token {
    pattern =
      "(#[0-9A-Fa-f]{6,6}|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)"
  }
data.COLORS = list { data.COLOR+ }
data.DEGREES =
  xsd:decimal { maxInclusive = "360.0" minInclusive = "-360.0" }
data.FINGER.FRET =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "4" }
  | xsd:token { pattern = "x|o" }
data.FRET =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "5" }
data.INTERVAL.AMOUNT =
  xsd:decimal
  | xsd:token { pattern = "u|d|s" }
data.ISODATE =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
data.ISOTIME = xsd:time
data.MEASUREBEAT =
  xsd:token { pattern = "([0-9]+m\s*\+\s*)?[0-9]+(\.?[0-9]*)?" }
data.MIDINAMES =
  "Acoustic_Grand_Piano"
  | "Bright_Acoustic_Piano"
  | "Electric_Grand_Piano"
  | "Honky-tonk_Piano"
  | "Electric_Piano_1"
  | "Electric_Piano_2"
  | "Harpsichord"
  | "Clavi"
  | "Celesta"
  | "Glockenspiel"
  | "Music_Box"
  | "Vibraphone"
  | "Marimba"
  | "Xylophone"
  | "Tubular_Bells"
  | "Dulcimer"
  | "Drawbar_Organ"
  | "Percussive_Organ"
  | "Rock_Organ"
  | "Church_Organ"
  | "Reed_Organ"
  | "Accordion"
  | "Harmonica"
  | "Tango_Accordion"
  | "Acoustic_Guitar_nylon"
  | "Acoustic_Guitar_steel"
  | "Electric_Guitar_jazz"
  | "Electric_Guitar_clean"
  | "Electric_Guitar_muted"
  | "Overdriven_Guitar"
  | "Distortion_Guitar"
  | "Guitar_harmonics"
  | "Acoustic_Bass"
  | "Electric_Bass_finger"
  | "Electric_Bass_pick"
  | "Fretless_Bass"
  | "Slap_Bass_1"
  | "Slap_Bass_2"
  | "Synth_Bass_1"
  | "Synth_Bass_2"
  | "Violin"
  | "Viola"
  | "Cello"
  | "Contrabass"
  | "Tremolo_Strings"
  | "Pizzicato_Strings"
  | "Orchestral_Harp"
  | "Timpani"
  | "String_Ensemble_1"
  | "String_Ensemble_2"
  | "SynthStrings_1"
  | "SynthStrings_2"
  | "Choir_Aahs"
  | "Voice_Oohs"
  | "Synth_Voice"
  | "Orchestra_Hit"
  | "Trumpet"
  | "Trombone"
  | "Tuba"
  | "Muted_Trumpet"
  | "French_Horn"
  | "Brass_Section"
  | "SynthBrass_1"
  | "SynthBrass_2"
  | "Soprano_Sax"
  | "Alto_Sax"
  | "Tenor_Sax"
  | "Baritone_Sax"
  | "Oboe"
  | "English_Horn"
  | "Bassoon"
  | "Clarinet"
  | "Piccolo"
  | "Flute"
  | "Recorder"
  | "Pan_Flute"
  | "Blown_Bottle"
  | "Shakuhachi"
  | "Whistle"
  | "Ocarina"
  | "Lead_1_square"
  | "Lead_2_sawtooth"
  | "Lead_3_calliope"
  | "Lead_4_chiff"
  | "Lead_5_charang"
  | "Lead_6_voice"
  | "Lead_7_fifths"
  | "Lead_8_bass_and_lead"
  | "Pad_1_new_age"
  | "Pad_2_warm"
  | "Pad_3_polysynth"
  | "Pad_4_choir"
  | "Pad_5_bowed"
  | "Pad_6_metallic"
  | "Pad_7_halo"
  | "Pad_8_sweep"
  | "FX_1_rain"
  | "FX_2_soundtrack"
  | "FX_3_crystal"
  | "FX_4_atmosphere"
  | "FX_5_brightness"
  | "FX_6_goblins"
  | "FX_7_echoes"
  | "FX_8_sci-fi"
  | "Sitar"
  | "Banjo"
  | "Shamisen"
  | "Koto"
  | "Kalimba"
  | "Bagpipe"
  | "Fiddle"
  | "Shanai"
  | "Tinkle_Bell"
  | "Agogo"
  | "Steel_Drums"
  | "Woodblock"
  | "Taiko_Drum"
  | "Melodic_Tom"
  | "Synth_Drum"
  | "Reverse_Cymbal"
  | "Guitar_Fret_Noise"
  | "Breath_Noise"
  | "Seashore"
  | "Bird_Tweet"
  | "Telephone_Ring"
  | "Helicopter"
  | "Applause"
  | "Gunshot"
  | 
    ## key #35
    "Acoustic_Bass_Drum"
  | 
    ## key #36
    "Bass_Drum_1"
  | 
    ## key #37
    "Side_Stick"
  | 
    ## key #38
    "Acoustic_Snare"
  | 
    ## key #39
    "Hand_Clap"
  | 
    ## key #40
    "Electric_Snare"
  | 
    ## key #41
    "Low_Floor_Tom"
  | 
    ## key #42
    "Closed_Hi_Hat"
  | 
    ## key #43
    "High_Floor_Tom"
  | 
    ## key #44
    "Pedal_Hi-Hat"
  | 
    ## key #45
    "Low_Tom"
  | 
    ## key #46
    "Open_Hi-Hat"
  | 
    ## key #47
    "Low-Mid_Tom"
  | 
    ## key #48
    "Hi-Mid_Tom"
  | 
    ## key #49
    "Crash_Cymbal_1"
  | 
    ## key #50
    "High_Tom"
  | 
    ## key #51
    "Ride_Cymbal_1"
  | 
    ## key #52
    "Chinese_Cymbal"
  | 
    ## key #53
    "Ride_Bell"
  | 
    ## key #54
    "Tambourine"
  | 
    ## key #55
    "Splash_Cymbal"
  | 
    ## key #56
    "Cowbell"
  | 
    ## key #57
    "Crash_Cymbal_2"
  | 
    ## key #58
    "Vibraslap"
  | 
    ## key #59
    "Ride_Cymbal_2"
  | 
    ## key #60
    "Hi_Bongo"
  | 
    ## key #61
    "Low_Bongo"
  | 
    ## key #62
    "Mute_Hi_Conga"
  | 
    ## key #63
    "Open_Hi_Conga"
  | 
    ## key #64
    "Low_Conga"
  | 
    ## key #65
    "High_Timbale"
  | 
    ## key #66
    "Low_Timbale"
  | 
    ## key #67
    "High_Agogo"
  | 
    ## key #68
    "Low_Agogo"
  | 
    ## key #69
    "Cabasa"
  | 
    ## key #70
    "Maracas"
  | 
    ## key #71
    "Short_Whistle"
  | 
    ## key #72
    "Long_Whistle"
  | 
    ## key #73
    "Short_Guiro"
  | 
    ## key #74
    "Long_Guiro"
  | 
    ## key #75
    "Claves"
  | 
    ## key #76
    "Hi_Wood_Block"
  | 
    ## key #77
    "Low_Wood_Block"
  | 
    ## key #78
    "Mute_Cuica"
  | 
    ## key #79
    "Open_Cuica"
  | 
    ## key #80
    "Mute_Triangle"
  | 
    ## key #81
    "Open_Triangle"
data.MIDITEMPO =
  xsd:positiveInteger { minInclusive = "10" maxInclusive = "1000" }
data.MODUSMAIOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.MODUSMINOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.OCTAVE.DIS = xsd:positiveInteger { pattern = "8|15|22" }
data.ORIENTATION = xsd:token { pattern = "reversed|90CW|90CCW" }
data.PAGE.PANELS =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "2" }
data.PERCENT = xsd:token { pattern = "[0-9]+(\.?[0-9]*)?%" }
data.PROLATIO =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.RATIO =
  xsd:token { pattern = "[0-9]+(\.?[0-9]*)?:[0-9]+(\.?[0-9]*)?" }
data.SLASH =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }
data.STRINGNUMBER = xsd:positiveInteger
data.TEMPOVALUE = xsd:positiveInteger
data.TEMPUS =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.TSTAMPOFFSET = xsd:decimal
data.URI = xsd:anyURI
data.URIS = list { data.URI+ }
data.ACCIDENTAL.EXPLICIT =
  
  ## sharp
  "s"
  | 
    ## flat
    "f"
  | 
    ## double sharp (written as 2 sharps)
    "ss"
  | 
    ## double sharp (written using croix)
    "x"
  | 
    ## double flat
    "ff"
  | 
    ## triple sharp (written as croix and 2 sharps)
    "xs"
  | 
    ## triple sharp (written as 3 sharps)
    "ts"
  | 
    ## triple flat
    "tf"
  | 
    ## natural
    "n"
  | 
    ## natural + flat
    "nf"
  | 
    ## natural + sharp
    "ns"
  | 
    ## sharp note raised by quarter tone
    "su"
  | 
    ## sharp note lowered by quarter tone
    "sd"
  | 
    ## flat note raised by quarter tone
    "fu"
  | 
    ## flat note lowered by quarter tone
    "fd"
  | 
    ## natural note raised by quarter tone
    "nu"
  | 
    ## natural note lowered by quarter tone
    "nd"
data.ACCIDENTAL.IMPLICIT =
  
  ## sharp
  "s"
  | 
    ## flat
    "f"
  | 
    ## double sharp
    "ss"
  | 
    ## double flat
    "ff"
  | 
    ## natural
    "n"
data.ARTICULATION =
  
  ## accent (Unicode 1D17B)
  "acc"
  | 
    ## staccato (Unicode 1D17C)
    "stacc"
  | 
    ## tenuto (Unicode 1D17D)
    "ten"
  | 
    ## staccatissimo (Unicode 1D17E)
    "stacciss"
  | 
    ## marcato (Unicode 1D17F)
    "marc"
  | 
    ## marcato + staccato (Unicode 1D180)
    "marc-stacc"
  | 
    ## spiccato
    "spicc"
  | 
    ## main note followed by short slide to higher, indeterminate pitch (Unicode
    ##             1D185)
    "doit"
  | 
    ## main note preceded by short slide from lower, indeterminate pitch
    ##             (Unicode 1D186)
    "rip"
  | 
    ## main note preceded by "slide" from higher, indeterminate
    ##             pitch
    "plop"
  | 
    ## main note followed by long "slide" to lower, indeterminate
    ##             pitch
    "fall"
  | 
    ## "lip slur" to lower pitch, then return to written pitch
    "bend"
  | 
    ## main note followed by quick upward rise, then descent in pitch (Unicode
    ##             1D187)
    "flip"
  | 
    ## (Unicode 1D188)
    "smear"
  | 
    ## down bow (Unicode 1D1AA)
    "dnbow"
  | 
    ## up bow (Unicode 1D1AB)
    "upbow"
  | 
    ## harmonic (Unicode 1D1AC)
    "harm"
  | 
    ## snap pizzicato (Unicode 1D1AD)
    "snap"
  | 
    ## fingernail (Unicode 1D1B3)
    "fingernail"
  | 
    ## tenuto + staccato (Unicode 1D182)
    "ten-stacc"
  | 
    ## dampen harp string (Unicode 1D1B4)
    "damp"
  | 
    ## dampen all harp strings (Unicode 1D1B5)
    "dampall"
  | 
    ## full (as opposed to stopped) tone
    "open"
  | 
    ## "muffled" tone
    "stop"
  | 
    ## double tongue (Unicode 1D18A)
    "dbltongue"
  | 
    ## triple tongue (Unicode 1D18B)
    "trpltongue"
  | 
    ## use heel (organ pedal)
    "heel"
  | 
    ## use toe (organ pedal)
    "toe"
  | 
    ## percussive effect on guitar string(s)
    "tap"
  | 
    ## left-hand pizzicato
    "lhpizz"
  | 
    ## uninterpreted dot
    "dot"
  | 
    ## uninterpreted stroke
    "stroke"
data.ARTICULATIONS = list { data.ARTICULATION+ }
data.AUGMENTDOT = xsd:nonNegativeInteger { maxInclusive = "4" }
data.BARPLACE =
  
  ## between staves only
  "mensur"
  | 
    ## between and across staves as necessary
    "staff"
  | 
    ## short line above staff or through top line
    "takt"
data.BARRENDITION =
  
  ## dashed line (Unicode 1D104)
  "dashed"
  | 
    ## dotted line
    "dotted"
  | 
    ## (Unicode 1D101)
    "dbl"
  | 
    ## double dashed line
    "dbldashed"
  | 
    ## double dotted line
    "dbldotted"
  | 
    ## (Unicode 1D102)
    "end"
  | 
    ## bar line not rendered
    "invis"
  | 
    ## repeat start (Unicode 1D106)
    "rptstart"
  | 
    ## repeat start and end
    "rptboth"
  | 
    ## repeat end (Unicode 1D107)
    "rptend"
  | 
    ## (Unicode 1D100)
    "single"
data.BEAM = xsd:token { pattern = "[i|m|t][1-6]" }
data.BEAMS = list { data.BEAM+ }
data.BOOLEAN = "true" | "false"
data.CERTAINTY = "high" | "medium" | "low" | "unknown"
data.CLEFLINE = xsd:positiveInteger
data.CLEFSHAPE =
  
  ## G clef (Unicode 1D11E)
  "G"
  | 
    ## Double G clef
    "GG"
  | 
    ## F clef (Unicode 1D122)
    "F"
  | 
    ## C clef (Unicode 1D121)
    "C"
  | 
    ## Drum clef (Unicode 1D125 or Unicode 1D126)
    "perc"
  | 
    ## tablature "clef"; i.e. usually "TAB" rendered
    ##             vertically
    "TAB"
data.CLUSTER =
  
  ## unfilled box
  "whbox"
  | 
    ## filled box
    "blbox"
data.CURVERENDITION =
  
  ## default line width
  "narrow"
  | 
    ## twice as wide as normal
    "medium"
  | 
    ## twice as wide as medium
    "wide"
  | 
    ## dashed
    "dashed"
  | 
    ## dotted
    "dotted"
data.DURATION = data.DURATION.cmn | data.DURATION.mensural
data.ENCLOSURE =
  
  ## parentheses
  "paren"
  | 
    ## square brackets
    "brack"
data.FONTFAMILY = xsd:token
data.FONTNAME = xsd:token
data.FONTSTYLE =
  
  ## text slants to right
  "ital"
  | 
    ## unadorned
    "normal"
  | 
    ## text slants to the left
    "oblique"
data.FONTWEIGHT = "bold"
data.FRETNUMBER =
  xsd:nonNegativeInteger { minInclusive = "1" maxInclusive = "9" }
  | xsd:token { pattern = "o" }
data.GLISSANDO =
  
  ## first note/chord in glissando
  "i"
  | 
    ## note/chord that's neither first nor last in glissando
    "m"
  | 
    ## last note in glissando
    "t"
data.GRACE =
  
  ## time "stolen" from following note
  "acc"
  | 
    ## time "stolen" from previous note
    "unacc"
  | 
    ## no interpretation regarding performed value of grace
    ##             note
    "unknown"
data.HEADSHAPE =
  
  ## filled oval (Unicode 1D158)
  "quarter"
  | 
    ## open oval (Unicode 1D157)
    "half"
  | 
    ## open oval (Unicode 1D15D)
    "whole"
  | 
    ## modern breve (Unicode 1D15C)
    "dblwhole"
  | 
    ## filled diamond (Unicode 1D1BA)
    "filldiamond"
  | 
    ## open diamond (Unicode 1D1B9)
    "diamond"
  | 
    ## double whole diamond (Mup)
    "dwdiamond"
  | 
    ## filled isosceles triangle (Unicode 1D149)
    "fillisotriangle"
  | 
    ## open isosceles triangle (Unicode 1D148)
    "isotriangle"
  | 
    ## double whole open isosceles triangle (Unicode 1D14E)
    "dwhisotriangle"
  | 
    ## filled downward-pointing wedge (Unicode 1D155)
    "fillpiewedge"
  | 
    ## downward-pointing wedge (Unicode 1D154)
    "piewedge"
  | 
    ## double whole downward-pointing wedge (Mup)
    "dwhpiewedge"
  | 
    ## filled rectangle (Unicode 1D147)
    "fillrectangle"
  | 
    ## open rectangle (Unicode 1D146)
    "rectangle"
  | 
    ## double whole open rectangle (Mup)
    "dwhrectangle"
  | 
    ## filled right triangle (Unicode 1D14B)
    "fillrtriangle"
  | 
    ## open right triangle (Unicode 1D14A)
    "rtriangle"
  | 
    ## double whole right triangle (Mup)
    "dwrtriangle"
  | 
    ## filled upper right triangle (Unicode 1D151) 
    "fillurtriangle"
  | 
    ## open upper right triangle (Unicode 1D150)
    "urtriangle"
  | 
    ## double whole upper right triangle
    "dwurtriangle"
  | 
    ## filled semi-circle (Unicode 1D153)
    "fillsemicircle"
  | 
    ## open semi-circle (Unicode 1D152)
    "semicircle"
  | 
    ## double whole open semi-circle (Mup)
    "dwsemicircle"
  | 
    ## filled slash (Mup)
    "fillslash"
  | 
    ## open slash (Mup)
    "slash"
  | 
    ## double whole open slash (Mup)
    "dwslash"
  | 
    ## X (Unicode 1D143)
    "x"
  | 
    ## note head not rendered (Unicode 1D159)
    "blank"
  | 
    ## X within circle (Unicode 1D145)
    "circlex"
  | 
    ## plus sign (Unicode 1D144)
    "cross"
data.INEUMENAME =
  
  ##
  "pessubpunctis"
  | 
    ##
    "climacus"
  | 
    ##
    "scandicus"
  | 
    ##
    "bistropha"
  | 
    ##
    "tristropha"
  | 
    ##
    "pressusminor"
  | 
    ##
    "pressusmaior"
data.INEUMEFORM =
  
  ##
  "liquescent1"
  | 
    ##
    "liquescent2"
  | 
    ##
    "tied"
  | 
    ##
    "tiedliquescent1"
  | 
    ##
    "tiedliquescent2"
data.KEYSIGNATURE = xsd:token { pattern = "mixed|0|[1-7][f|s]" }
data.LAYERSCHEME =
  
  ## single layer
  "1"
  | 
    ## two layers with opposing stems
    "2o"
  | 
    ## two layers with 'floating' stems
    "2f"
  | 
    ##
    "3o"
  | 
    ##
    "3f"
data.LIGATUREFORM =
  
  ## notes are "squeezed" together
  "recta"
  | 
    ## individual notes are replaced by an oblique figure
    "obliqua"
data.LINERENDITION =
  
  ## default line width
  "narrow"
  | 
    ## twice as wide as narrow
    "medium"
  | 
    ## twice as wide as medium
    "wide"
  | 
    ## dashed line
    "dashed"
  | 
    ## dotted line
    "dotted"
  | 
    ## undulating line
    "wavy"
data.MENSURATIONSIGN =
  
  ## tempus imperfectum
  "C"
  | 
    ## tempus perfectum
    "O"
data.METERSIGN =
  
  ## common time; i.e. 4/4
  "common"
  | 
    ## cut time; i.e. 2/2
    "cut"
data.MIDICHANNEL = xsd:positiveInteger { maxInclusive = "16" }
data.MIDIVALUE = xsd:nonNegativeInteger { maxInclusive = "127" }
data.MODE =
  "major"
  | "minor"
  | "dorian"
  | "phrygian"
  | "lydian"
  | "mixolydian"
  | "aeolian"
  | "locrian"
data.MUSICFONT = xsd:token
data.OCTAVE = xsd:nonNegativeInteger { maxInclusive = "9" }
data.PGSCALE = data.PERCENT | data.RATIO
data.PGUNITS =
  
  ## inches
  "in"
  | 
    ## centimeters
    "cm"
  | 
    ## millimeters
    "mm"
data.PITCHCLASS = xsd:nonNegativeInteger { maxInclusive = "11" }
data.PITCHNAME = xsd:token { pattern = "[a-g]" }
data.PITCHNAME.GES = xsd:token { pattern = "[a-g]|none" }
data.PITCHNUMBER = xsd:nonNegativeInteger
data.PLACE = "above" | "below"
data.OTHERSTAFF = "above" | "below"
data.STAFFREL =
  
  ## written above staff
  "above"
  | 
    ## written below staff
    "below"
  | 
    ## written on staff
    "within"
data.SIZE =
  
  ## default size
  "normal"
  | 
    ## reduced size
    "cue"
data.SLUR = xsd:token { pattern = "[i|m|t][1-6]" }
data.SLURS = list { data.SLUR+ }
data.STAFFLOC = xsd:integer
data.STEMDIRECTION =
  
  ## stem points upward
  "up"
  | 
    ## stem points downward
    "down"
data.STEMMODIFIER =
  
  ## 1 slash through stem
  "1slash"
  | 
    ## 2 slashes through stem
    "2slash"
  | 
    ## 3 slashes through stem
    "3slash"
  | 
    ## 4 slashes through stem
    "4slash"
  | 
    ## 5 slashes through stem
    "5slash"
  | 
    ## 6 slashes through stem
    "6slash"
  | 
    ## X placed on stem
    "sprech"
  | 
    ## Z placed on stem
    "z"
data.STEMPOSITION =
  
  ## stem attached to left side of note head
  "left"
  | 
    ## stem attached to right side of note head
    "right"
  | 
    ## stem is originates from center of note head
    "center"
data.TEMPERAMENT =
  
  ## equal or 12-tone temperament
  "equal"
  | 
    ## just intonation
    "just"
  | 
    ## meantone intonation
    "mean"
  | 
    ## pythagorean tuning
    "pythagorean"
data.TEXTRENDITION =
  
  ## enclosed in box
  "box"
  | 
    ## enclosed in circle/ellipse
    "circle"
  | 
    ## underlined twice
    "dblunderline"
  | 
    ## not rendered
    "none"
  | 
    ## quoted; context determines which quotation signs are
    ##             used
    "quote"
  | 
    ## struck through by '\'
    "bslash"
  | 
    ## struck through by '/'
    "fslash"
  | 
    ## small capitals
    "smcaps"
  | 
    ## stuck through by '-'
    "strike"
  | 
    ## subscript
    "sub"
  | 
    ## superscript
    "sup"
  | 
    ## underlined
    "underline"
data.TIE = xsd:token { pattern = "[i|m|t]" }
data.TIES = list { data.TIE+ }
data.TUPLET = xsd:token { pattern = "[i|m|t][1-6]" }
data.TUPLETS = list { data.TUPLET+ }
data.UNEUMENAME =
  
  ##
  "punctum"
  | 
    ##
    "virga"
  | 
    ##
    "pes"
  | 
    ##
    "clivis"
  | 
    ##
    "torculus"
  | 
    ##
    "torculusresupinus"
  | 
    ##
    "porrectus"
  | 
    ##
    "porrectusflexus"
  | 
    ##
    "apostropha"
  | 
    ##
    "oriscus"
  | 
    ##
    "pressusmaior"
  | 
    ##
    "pressusminor"
  | 
    ##
    "virgastrata"
data.UNEUMEFORM =
  
  ##
  "liquescent1"
  | 
    ##
    "liquescent2"
  | 
    ##
    "liquescent3"
  | 
    ##
    "quilismatic"
  | 
    ##
    "rectangular"
  | 
    ##
    "rhombic"
  | 
    ##
    "tied"
data.INTERLINE = xsd:decimal
macro.metaLike.page = mei_fw*, pgDesc?
macro.musicPart =
  mei_model.frontLike?, (mei_body | mei_group)?, mei_model.backLike?
macro.availabilityPart =
  (acqSource, (accessRestrict, price?)*)*,
  useRestrict?,
  sysReq?
macro.workPart =
  mei_history?,
  mei_langUsage?,
  key?,
  tempo?,
  meter?,
  mensuration?,
  perfMedium?
macro.bibldescPart =
  mei_editionStmt?, pubStmt?, mei_physDesc?, mei_seriesStmt?
data.DURATION.cmn =
  
  ## quadruple whole note
  "long"
  | 
    ## double whole note
    "breve"
  | 
    ## whole note
    "1"
  | 
    ## half note
    "2"
  | 
    ## quarter note
    "4"
  | 
    ## 8th note
    "8"
  | 
    ## 16th note
    "16"
  | 
    ## 32nd note
    "32"
  | 
    ## 64th note
    "64"
  | 
    ## 128th note
    "128"
  | 
    ## 256th note
    "256"
  | 
    ## 512th note
    "512"
  | 
    ## 1024th note
    "1024"
  | 
    ## 2048th note
    "2048"
data.DURATION.mensural =
  "maxima"
  | "longa"
  | "brevis"
  | "semibrevis"
  | "minima"
  | "semiminima"
  | "fusa"
  | "semifusa"
macro.neumeModifierLike = empty
data.ORNAM.cmn =
  xsd:token {
    pattern =
      "[A|a|b|I|i|K|k|M|m|N|n|S|s|T|t|O]|(A|a|S|s|K|k)?(T|t|M|m)(I|i|S|s)?"
  }
data.ORNAMS.cmn = list { data.ORNAM.cmn+ }
att.ascribed.attributes = att.ascribed.attribute.who
att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { data.pointer+ }
  }?
att.canonical.attributes =
  att.canonical.attribute.key, att.canonical.attribute.ref
att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { data.text }?
att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition for the entity being named by means of one or more URIs.
  attribute ref {
    list { data.pointer+ }
  }?
att.ranging.attributes =
  att.ranging.attribute.atLeast,
  att.ranging.attribute.atMost,
  att.ranging.attribute.min,
  att.ranging.attribute.max,
  att.ranging.attribute.confidence
att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast { data.numeric }?
att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost { data.numeric }?
att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation or a range, supplies the minimum value observed.
  attribute min { data.numeric }?
att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation or a range, supplies the maximum value observed.
  attribute max { data.numeric }?
att.ranging.attribute.confidence =
  
  ## specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by min and max, or the proportion of observed values that fall within that range.
  attribute confidence { data.probability }?
att.dimensions.attributes =
  att.ranging.attributes,
  att.dimensions.attribute.unit,
  att.dimensions.attribute.quantity,
  att.dimensions.attribute.extent,
  att.dimensions.attribute.precision,
  att.dimensions.attribute.scope
att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm(centimetres) ; 2] mm(millimetres) ; 3] in(inches) ; 4] lines; 5] chars(characters) 
  attribute unit {
    
    ## (centimetres) 
    "cm"
    | 
      ## (millimetres) 
      "mm"
    | 
      ## (inches) 
      "in"
    | 
      ## lines of text
      "lines"
    | 
      ## (characters) characters of text
      "chars"
    | xsd:Name
  }?
att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity { data.numeric }?
att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. 
  attribute extent { data.text }?
att.dimensions.attribute.precision =
  
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision { data.certainty }?
att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope { data.enumerated }?
att.damaged.attributes =
  att.dimensions.attributes,
  att.damaged.attribute.hand,
  att.damaged.attribute.agent,
  att.damaged.attribute.degree,
  att.damaged.attribute.group
att.damaged.attribute.hand =
  
  ## in the case of damage (deliberate defacement, inking out, etc.) assignable to a distinct hand, signifies the hand responsible for the damage.
  attribute hand { data.pointer }?
att.damaged.attribute.agent =
  
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
  attribute agent { data.enumerated }?
att.damaged.attribute.degree =
  
  ## signifies the degree of damage according to a convenient scale. The damage tag with the degree attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as supplied.
  attribute degree { data.probability | data.certainty }?
att.damaged.attribute.group =
  
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.
  attribute group { data.count }?
att.breaking.attributes = att.breaking.attribute.break
att.breaking.attribute.break =
  
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break { data.enumerated }?
att.cReferencing.attributes = att.cReferencing.attribute.cRef
att.cReferencing.attribute.cRef =
  
  ## (canonical reference) specifies the destination of the pointer by supplying a canonical reference from a scheme defined in a refsDecl element in the TEI header
  attribute cRef { data.text }?
att.datable.w3c.attributes =
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.notBefore,
  att.datable.w3c.attribute.notAfter,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when { data.temporal.w3c }?
att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore { data.temporal.w3c }?
att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter { data.temporal.w3c }?
att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from { data.temporal.w3c }?
att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to { data.temporal.w3c }?
att.datable.attributes =
  att.datable.w3c.attributes,
  att.datable.iso.attributes,
  att.datable.custom.attributes,
  att.datable.attribute.calendar,
  att.datable.attribute.period
att.datable.attribute.calendar =
  
  ## indicates the system or calendar to which the date represented by the content of this element belongs.
  attribute calendar { data.pointer }?
sch:pattern [
  id = "calendar-constraint-calendar"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "string-length(.) gt 0"
      "\x{a}" ~
      "@calendar indicates the system or calendar to which the date represented by the content of this element\x{a}" ~
      "belongs, but this "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attribute.period =
  
  ## supplies a pointer to some location defining a named period of time within which the datable item is understood to have occurred.
  attribute period { data.pointer }?
att.datcat.attributes =
  att.datcat.attribute.datcat, att.datcat.attribute.valueDatcat
att.datcat.attribute.datcat =
  
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate Data Category (or categories) in ISOcat.
  attribute ns1:datcat {
    list { data.pointer+ }
  }?
att.datcat.attribute.valueDatcat =
  
  ## contains a PID (persistent identifier) that aligns the content of the given element or the value of the given attribute with the appropriate simple Data Category (or categories) in ISOcat.
  attribute ns1:valueDatcat {
    list { data.pointer+ }
  }?
att.declarable.attributes = att.declarable.attribute.default
att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { data.pointer+ }
  }?
att.fragmentable.attributes = att.fragmentable.attribute.part
att.fragmentable.attribute.part =
  
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ##  (yes) the element is fragmented in some (unspecified) respect
    "Y"
    | 
      ##  (no) either the element is not fragmented, or no claim is made as to its completeness.
      "N"
    | 
      ##  (initial) this is the initial part of a fragmented element
      "I"
    | 
      ##  (medial) this is a medial part of a fragmented element
      "M"
    | 
      ##  (final) this is the final part of a fragmented element
      "F"
  }?
att.divLike.attributes =
  att.metrical.attributes,
  att.fragmentable.attributes,
  att.divLike.attribute.org,
  att.divLike.attribute.sample
att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite"
    | 
      ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
att.docStatus.attributes = att.docStatus.attribute.status
att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ] attribute status { data.enumerated }?
att.duration.w3c.attributes = att.duration.w3c.attribute.dur
att.duration.w3c.attribute.dur =
  
  ## (duration) indicates the length of this element in time.
  attribute dur { data.duration.w3c }?
att.duration.iso.attributes = att.duration.iso.attribute.dur-iso
att.duration.iso.attribute.dur-iso =
  
  ## (duration) indicates the length of this element in time.
  attribute dur-iso { data.duration.iso }?
att.responsibility.attributes =
  att.responsibility.attribute.cert, att.responsibility.attribute.resp
att.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert { data.certainty }?
att.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { data.pointer+ }
  }?
att.editLike.attributes =
  att.dimensions.attributes,
  att.responsibility.attributes,
  att.editLike.attribute.evidence,
  att.editLike.attribute.source,
  att.editLike.attribute.instant
att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name)+
    }
  }?
att.editLike.attribute.source =
  
  ## contains a list of one or more pointers indicating sources supporting the given intervention or interpretation.
  attribute source {
    list { data.pointer+ }
  }?
att.editLike.attribute.instant =
  
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ] attribute instant { data.xTruthValue }?
att.global.attributes =
  att.global.linking.attributes,
  att.global.analytic.attributes,
  att.global.facs.attributes,
  att.global.change.attributes,
  att.global.attribute.xmlid,
  att.global.attribute.n,
  att.global.attribute.xmllang,
  att.global.attribute.rend,
  att.global.attribute.style,
  att.global.attribute.rendition,
  att.global.attribute.xmlbase,
  att.global.attribute.xmlspace
att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { data.text }?
att.global.attribute.xmllang =
  
  ## (language) indicates the language of the element content using a tag generated according to BCP 47.
  attribute xml:lang { data.language }?
att.global.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list { data.word+ }
  }?
att.global.attribute.style =
  
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text 
  attribute style { data.text }?
att.global.attribute.rendition =
  
  ## points to a description of the rendering or presentation used for this element in the source text.
  attribute rendition {
    list { data.pointer+ }
  }?
att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { data.pointer }?
att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be managed by applications. 
  attribute xml:space {
    
    ## signals that the application's default white-space processing modes are acceptable
    "default"
    | 
      ## indicates the intent that applications preserve all white space
      "preserve"
  }?
att.handFeatures.attributes =
  att.handFeatures.attribute.scribe,
  att.handFeatures.attribute.scribeRef,
  att.handFeatures.attribute.script,
  att.handFeatures.attribute.scriptRef,
  att.handFeatures.attribute.medium,
  att.handFeatures.attribute.scope
att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe believed to be responsible for this hand.
  attribute scribe { data.name }?
att.handFeatures.attribute.scribeRef =
  
  ## points to a full description of the scribe concerned, typically supplied by a person element elsewhere in the description.
  attribute scribeRef {
    list { data.pointer+ }
  }?
att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { data.name+ }
  }?
att.handFeatures.attribute.scriptRef =
  
  ## points to a full description of the script or writing style used by this hand, typically supplied by a scriptNote element elsewhere in the description.
  attribute scriptRef {
    list { data.pointer+ }
  }?
att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other writing medium, e.g. pencil
  attribute medium { data.enumerated }?
att.handFeatures.attribute.scope =
  
  ## specifies how widely this hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
att.internetMedia.attributes = att.internetMedia.attribute.mimeType
att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list { data.word+ }
  }?
att.media.attributes =
  att.internetMedia.attributes,
  att.media.attribute.width,
  att.media.attribute.height,
  att.media.attribute.scale
att.media.attribute.width =
  
  ## Where the media are displayed, indicates the display width 
  attribute width { data.outputMeasurement }?
att.media.attribute.height =
  
  ## Where the media are displayed, indicates the display height
  attribute height { data.outputMeasurement }?
att.media.attribute.scale =
  
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale { data.numeric }?
att.resourced.attributes = att.resourced.attribute.url
att.resourced.attribute.url =
  
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { data.pointer }
att.interpLike.attributes =
  att.responsibility.attributes,
  att.interpLike.attribute.type,
  att.interpLike.attribute.inst
att.interpLike.attribute.type =
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Sample values include: 1] image; 2] character; 3] theme; 4] allusion
  attribute type { data.enumerated }?
att.interpLike.attribute.inst =
  
  ## (instances) points to instances of the analysis or interpretation represented by the current element.
  attribute inst {
    list { data.pointer+ }
  }?
att.measurement.attributes =
  att.measurement.attribute.unit,
  att.measurement.attribute.quantity,
  att.measurement.attribute.commodity
att.measurement.attribute.unit =
  
  ## indicates the units used for the measurement, usually using the standard symbol for the desired units.
  ## Suggested values include: 1] m(metre) ; 2] kg(kilogram) ; 3] s(second) ; 4] Hz(hertz) ; 5] Pa(pascal) ; 6] Ω(ohm) ; 7] L(litre) ; 8] t(tonne) ; 9] ha(hectare) ; 10] Å(ångström) ; 11] mL(millilitre) ; 12] cm(centimetre) ; 13] dB(decibel) ; 14] kbit(kilobit) ; 15] Kibit(kibibit) ; 16] kB(kilobyte) ; 17] KiB(kibibyte) ; 18] MB(megabyte) ; 19] MiB(mebibyte) 
  attribute unit {
    
    ## (metre) SI base unit of length
    "m"
    | 
      ## (kilogram) SI base unit of mass
      "kg"
    | 
      ## (second) SI base unit of time
      "s"
    | 
      ## (hertz) SI unit of frequency
      "Hz"
    | 
      ## (pascal) SI unit of pressure or stress
      "Pa"
    | 
      ## (ohm) SI unit of electric resistance
      "Ω"
    | 
      ## (litre) 1 dm³
      "L"
    | 
      ## (tonne) 10³ kg
      "t"
    | 
      ## (hectare) 1 hm²
      "ha"
    | 
      ## (ångström) 10⁻¹⁰ m
      "Å"
    | 
      ## (millilitre) 
      "mL"
    | 
      ## (centimetre) 
      "cm"
    | 
      ## (decibel) see remarks, below
      "dB"
    | 
      ## (kilobit) 10³ or 1000 bits
      "kbit"
    | 
      ## (kibibit) 2¹⁰ or 1024 bits
      "Kibit"
    | 
      ## (kilobyte) 10³ or 1000 bytes
      "kB"
    | 
      ## (kibibyte) 2¹⁰ or 1024 bytes
      "KiB"
    | 
      ## (megabyte) 10⁶ or 1 000 000 bytes
      "MB"
    | 
      ## (mebibyte) 2²⁰ or 1 048 576 bytes
      "MiB"
    | xsd:Name
  }?
att.measurement.attribute.quantity =
  
  ## specifies the number of the specified units that comprise the measurement
  attribute quantity { data.numeric }?
att.measurement.attribute.commodity =
  
  ## indicates the substance that is being measured
  attribute commodity {
    list { data.word+ }
  }?
att.naming.attributes =
  att.canonical.attributes,
  att.naming.attribute.role,
  att.naming.attribute.nymRef
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by this name, for example the occupation of a person, or the status of a place. 
  attribute role { data.enumerated }?
att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { data.pointer+ }
  }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## specifies where this item is placed
  ## Suggested values include: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ## in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name)+
    }
  }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type { data.enumerated }?
att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype { data.enumerated }?
att.pointing.attributes =
  att.pointing.attribute.targetLang,
  att.pointing.attribute.target,
  att.pointing.attribute.evaluate
att.pointing.attribute.targetLang =
  
  ## specifies the language of the content to be found at the destination referenced by target, using a language tag generated according to BCP 47.
  attribute targetLang { data.language }?
sch:pattern [
  id = "targetLang-constraint-targetLang"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "count(@target)"
      "@targetLang can only be used if @target is specified."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { data.pointer+ }
  }?
att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
att.pointing.group.attributes =
  att.pointing.attributes,
  att.typed.attributes,
  att.pointing.group.attribute.domains,
  att.pointing.group.attribute.targFunc
att.pointing.group.attribute.domains =
  
  ## optionally specifies the identifiers of the elements within which all elements indicated by the contents of this element lie.
  attribute domains {
    list { data.pointer, data.pointer, data.pointer* }
  }?
att.pointing.group.attribute.targFunc =
  
  ## (target function) describes the function of each of the values of the target attribute of the enclosed link, join, or alt tags.
  attribute targFunc {
    list { data.word, data.word, data.word* }
  }?
att.readFrom.attributes = att.readFrom.attribute.source
att.readFrom.attribute.source =
  
  ## specifies the source from which declarations and definitions for the components of the object being defined may be obtained. 
  attribute source { data.pointer }?
att.scoping.attributes =
  att.scoping.attribute.target, att.scoping.attribute.match
att.scoping.attribute.target =
  
  ## points at one or several elements or sets of elements by means of one or more data pointers, using the URI syntax.
  attribute target {
    list { data.pointer+ }
  }?
att.scoping.attribute.match =
  
  ## supplies an arbitrary XPath expression identifying a set of nodes, selected within the context identified by the target attribute if this is supplied, or within the context of the element bearing this attribute if it is not.
  attribute match { text }?
att.segLike.attributes =
  att.metrical.attributes,
  att.datcat.attributes,
  att.fragmentable.attributes,
  att.segLike.attribute.function
att.segLike.attribute.function =
  
  ## characterizes the function of the segment.
  attribute function { data.enumerated }?
att.sortable.attributes = att.sortable.attribute.sortKey
att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey { data.word }?
att.edition.attributes =
  att.edition.attribute.ed, att.edition.attribute.edRef
att.edition.attribute.ed =
  
  ## (edition) supplies an arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list { data.word+ }
  }?
att.edition.attribute.edRef =
  
  ##  (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { data.pointer+ }
  }?
att.spanning.attributes = att.spanning.attribute.spanTo
att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { data.pointer }?
sch:pattern [
  id = "spanTo-constraint-spanTo-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@spanTo]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"
      "\x{a}" ~
      "The element indicated by @spanTo ("
      sch:value-of [ select = "@spanTo" ]
      ") must follow the current element "
      sch:name [ ]
      "\x{a}" ~
      "         "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.styleDef.attributes =
  att.styleDef.attribute.scheme, att.styleDef.attribute.schemeVersion
att.styleDef.attribute.scheme =
  
  ## identifies the language used to describe the rendition.
  attribute scheme {
    
    ## Cascading Stylesheet Language
    "css"
    | 
      ## Extensible Stylesheet Language Formatting Objects
      "xslfo"
    | 
      ## Informal free text description
      "free"
    | 
      ## A user-defined rendition description language
      "other"
  }?
att.styleDef.attribute.schemeVersion =
  
  ## supplies a version number for the style language provided in scheme.
  attribute schemeVersion { data.versionNumber }?
sch:pattern [
  id = "schemeVersion-constraint-schemeVersionRequiresScheme"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@schemeVersion]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "@scheme and not(@scheme = 'free')"
      "\x{a}" ~
      "              @schemeVersion can only be used if @scheme is specified.\x{a}" ~
      "            "
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.tableDecoration.attributes =
  att.tableDecoration.attribute.role,
  att.tableDecoration.attribute.rows,
  att.tableDecoration.attribute.cols
att.tableDecoration.attribute.role =
  
  ## indicates the kind of information held in this cell or in each cell of this row.
  ## Suggested values include: 1] label; 2] data
  [ a:defaultValue = "data" ]
  attribute role {
    
    ## labelling or descriptive information only.
    "label"
    | 
      ## data values.
      "data"
    | xsd:Name
  }?
att.tableDecoration.attribute.rows =
  
  ## indicates the number of rows occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute rows { data.count }?
att.tableDecoration.attribute.cols =
  
  ## (columns) indicates the number of columns occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute cols { data.count }?
att.timed.attributes =
  att.duration.attributes,
  att.timed.attribute.start,
  att.timed.attribute.end
att.timed.attribute.start =
  
  ## indicates the location within a temporal alignment at which this element begins.
  attribute start { data.pointer }?
att.timed.attribute.end =
  
  ## indicates the location within a temporal alignment at which this element ends.
  attribute end { data.pointer }?
att.transcriptional.attributes =
  att.editLike.attributes,
  att.transcriptional.attribute.hand,
  att.transcriptional.attribute.status,
  att.transcriptional.attribute.cause,
  att.transcriptional.attribute.seq
att.transcriptional.attribute.hand =
  
  ## signifies the hand of the agent which made the intervention.
  attribute hand { data.pointer }?
att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status { data.enumerated }?
att.transcriptional.attribute.cause =
  
  ## documents the presumed cause for the intervention.
  attribute cause {
    
    ## repeated for the purpose of fixation
    "fix"
    | 
      ## repeated to clarify a previously illegible or badly written text or mark
      "unclear"
  }?
att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { data.count }?
att.translatable.attributes = att.translatable.attribute.versionDate
att.translatable.attribute.versionDate =
  
  ## specifies the date on which the source text was extracted and sent to the translator
  attribute versionDate { data.temporal.w3c }?
model.nameLike.agent = name | orgName | persName
model.nameLike.agent_alternation = name | orgName | persName
model.nameLike.agent_sequence = name, orgName, persName
model.nameLike.agent_sequenceOptional = name?, orgName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable =
  name*, orgName*, persName*
model.nameLike.agent_sequenceRepeatable = name+, orgName+, persName+
model.segLike = s | cl | phr | w | m | c | pc | seg
model.hiLike = hi
model.hiLike_alternation = hi
model.hiLike_sequence = hi
model.hiLike_sequenceOptional = hi?
model.hiLike_sequenceOptionalRepeatable = hi*
model.hiLike_sequenceRepeatable = hi+
model.emphLike =
  foreign
  | emph
  | distinct
  | mentioned
  | soCalled
  | gloss
  | term
  | title
  | code
  | ident
model.emphLike_alternation =
  foreign
  | emph
  | distinct
  | mentioned
  | soCalled
  | gloss
  | term
  | title
  | code
  | ident
model.emphLike_sequence =
  foreign,
  emph,
  distinct,
  mentioned,
  soCalled,
  gloss,
  term,
  title,
  code,
  ident
model.emphLike_sequenceOptional =
  foreign?,
  emph?,
  distinct?,
  mentioned?,
  soCalled?,
  gloss?,
  term?,
  title?,
  code?,
  ident?
model.emphLike_sequenceOptionalRepeatable =
  foreign*,
  emph*,
  distinct*,
  mentioned*,
  soCalled*,
  gloss*,
  term*,
  title*,
  code*,
  ident*
model.emphLike_sequenceRepeatable =
  foreign+,
  emph+,
  distinct+,
  mentioned+,
  soCalled+,
  gloss+,
  term+,
  title+,
  code+,
  ident+
model.highlighted = model.hiLike | model.emphLike
model.dateLike = date | time
model.dateLike_alternation = date | time
model.dateLike_sequence = date, time
model.dateLike_sequenceOptional = date?, time?
model.dateLike_sequenceOptionalRepeatable = date*, time*
model.dateLike_sequenceRepeatable = date+, time+
model.dimLike = height | depth | width
model.measureLike =
  num | measure | measureGrp | dim | height | depth | width | geo
model.measureLike_alternation =
  num | measure | measureGrp | dim | height | depth | width | geo
model.measureLike_sequence =
  num, measure, measureGrp, dim, height, depth, width, geo
model.measureLike_sequenceOptional =
  num?, measure?, measureGrp?, dim?, height?, depth?, width?, geo?
model.measureLike_sequenceOptionalRepeatable =
  num*, measure*, measureGrp*, dim*, height*, depth*, width*, geo*
model.measureLike_sequenceRepeatable =
  num+, measure+, measureGrp+, dim+, height+, depth+, width+, geo+
model.egLike = eg | egXML
model.egLike_alternation = eg | egXML
model.egLike_sequence = eg, egXML
model.egLike_sequenceOptional = eg?, egXML?
model.egLike_sequenceOptionalRepeatable = eg*, egXML*
model.egLike_sequenceRepeatable = eg+, egXML+
model.graphicLike = media | graphic | binaryObject | formula
model.offsetLike = offset | geogFeat
model.offsetLike_alternation = offset | geogFeat
model.offsetLike_sequence = offset, geogFeat
model.offsetLike_sequenceOptional = offset?, geogFeat?
model.offsetLike_sequenceOptionalRepeatable = offset*, geogFeat*
model.offsetLike_sequenceRepeatable = offset+, geogFeat+
model.pPart.msdesc =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
model.pPart.editorial = choice | abbr | expan | ex | am | subst
model.pPart.editorial_alternation =
  choice | abbr | expan | ex | am | subst
model.pPart.editorial_sequence = choice, abbr, expan, ex, am, subst
model.pPart.editorial_sequenceOptional =
  choice?, abbr?, expan?, ex?, am?, subst?
model.pPart.editorial_sequenceOptionalRepeatable =
  choice*, abbr*, expan*, ex*, am*, subst*
model.pPart.editorial_sequenceRepeatable =
  choice+, abbr+, expan+, ex+, am+, subst+
model.pPart.transcriptional =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | app
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_alternation =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | app
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_sequence =
  sic,
  corr,
  reg,
  orig,
  add,
  del,
  unclear,
  app,
  damage,
  handShift,
  restore,
  supplied,
  surplus,
  mod,
  redo,
  retrace,
  undo
model.pPart.transcriptional_sequenceOptional =
  sic?,
  corr?,
  reg?,
  orig?,
  add?,
  del?,
  unclear?,
  app?,
  damage?,
  handShift?,
  restore?,
  supplied?,
  surplus?,
  mod?,
  redo?,
  retrace?,
  undo?
model.pPart.transcriptional_sequenceOptionalRepeatable =
  sic*,
  corr*,
  reg*,
  orig*,
  add*,
  del*,
  unclear*,
  app*,
  damage*,
  handShift*,
  restore*,
  supplied*,
  surplus*,
  mod*,
  redo*,
  retrace*,
  undo*
model.pPart.transcriptional_sequenceRepeatable =
  sic+,
  corr+,
  reg+,
  orig+,
  add+,
  del+,
  unclear+,
  app+,
  damage+,
  handShift+,
  restore+,
  supplied+,
  surplus+,
  mod+,
  redo+,
  retrace+,
  undo+
model.pPart.edit = model.pPart.editorial | model.pPart.transcriptional
model.linePart =
  model.segLike
  | model.hiLike
  | model.pPart.transcriptional
  | choice
  | zone
  | line
model.ptrLike = ptr | ref
model.lPart = caesura | rhyme
model.global.meta =
  index
  | span
  | spanGrp
  | interp
  | interpGrp
  | precision
  | certainty
  | respons
  | fs
  | fLib
  | fvLib
  | link
  | linkGrp
  | timeline
  | join
  | joinGrp
  | alt
  | altGrp
  | substJoin
  | listTranspose
model.milestoneLike = milestone | gb | pb | lb | cb | anchor | fw
model.gLike = g
model.oddDecl =
  moduleSpec
  | specGrp
  | specGrpRef
  | elementSpec
  | classSpec
  | macroSpec
  | listRef
model.oddDecl_alternation =
  moduleSpec
  | specGrp
  | specGrpRef
  | elementSpec
  | classSpec
  | macroSpec
  | listRef
model.oddDecl_sequence =
  moduleSpec,
  specGrp,
  specGrpRef,
  elementSpec,
  classSpec,
  macroSpec,
  listRef
model.oddDecl_sequenceOptional =
  moduleSpec?,
  specGrp?,
  specGrpRef?,
  elementSpec?,
  classSpec?,
  macroSpec?,
  listRef?
model.oddDecl_sequenceOptionalRepeatable =
  moduleSpec*,
  specGrp*,
  specGrpRef*,
  elementSpec*,
  classSpec*,
  macroSpec*,
  listRef*
model.oddDecl_sequenceRepeatable =
  moduleSpec+,
  specGrp+,
  specGrpRef+,
  elementSpec+,
  classSpec+,
  macroSpec+,
  listRef+
model.oddRef = classRef | elementRef | macroRef | moduleRef
model.phrase.xml = att | gi | tag | val
model.specDescLike = specList | specDesc
model.biblLike = bibl | biblStruct | listBibl | biblFull | msDesc
model.biblLike_alternation =
  bibl | biblStruct | listBibl | biblFull | msDesc
model.biblLike_sequence = bibl, biblStruct, listBibl, biblFull, msDesc
model.biblLike_sequenceOptional =
  bibl?, biblStruct?, listBibl?, biblFull?, msDesc?
model.biblLike_sequenceOptionalRepeatable =
  bibl*, biblStruct*, listBibl*, biblFull*, msDesc*
model.biblLike_sequenceRepeatable =
  bibl+, biblStruct+, listBibl+, biblFull+, msDesc+
model.headLike = head
model.headLike_alternation = head
model.headLike_sequence = head
model.headLike_sequenceOptional = head?
model.headLike_sequenceOptionalRepeatable = head*
model.headLike_sequenceRepeatable = head+
model.labelLike = desc | label
model.labelLike_alternation = desc | label
model.labelLike_sequence = desc, label
model.labelLike_sequenceOptional = desc?, label?
model.labelLike_sequenceOptionalRepeatable = desc*, label*
model.labelLike_sequenceRepeatable = desc+, label+
model.listLike =
  \list
  | table
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listNym
  | listApp
  | listWit
model.listLike_alternation =
  \list
  | table
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listNym
  | listApp
  | listWit
model.listLike_sequence =
  \list,
  table,
  listOrg,
  listEvent,
  listPerson,
  listPlace,
  listNym,
  listApp,
  listWit
model.listLike_sequenceOptional =
  \list?,
  table?,
  listOrg?,
  listEvent?,
  listPerson?,
  listPlace?,
  listNym?,
  listApp?,
  listWit?
model.listLike_sequenceOptionalRepeatable =
  \list*,
  table*,
  listOrg*,
  listEvent*,
  listPerson*,
  listPlace*,
  listNym*,
  listApp*,
  listWit*
model.listLike_sequenceRepeatable =
  \list+,
  table+,
  listOrg+,
  listEvent+,
  listPerson+,
  listPlace+,
  listNym+,
  listApp+,
  listWit+
model.noteLike = note | witDetail
model.lLike = l
model.lLike_alternation = l
model.lLike_sequence = l
model.lLike_sequenceOptional = l?
model.lLike_sequenceOptionalRepeatable = l*
model.lLike_sequenceRepeatable = l+
model.pLike = p | ab
model.pLike_alternation = p | ab
model.pLike_sequence = p, ab
model.pLike_sequenceOptional = p?, ab?
model.pLike_sequenceOptionalRepeatable = p*, ab*
model.pLike_sequenceRepeatable = p+, ab+
model.stageLike = stage | move | view | camera | sound | caption | tech
model.stageLike_alternation =
  stage | move | view | camera | sound | caption | tech
model.stageLike_sequence =
  stage, move, view, camera, sound, caption, tech
model.stageLike_sequenceOptional =
  stage?, move?, view?, camera?, sound?, caption?, tech?
model.stageLike_sequenceOptionalRepeatable =
  stage*, move*, view*, camera*, sound*, caption*, tech*
model.stageLike_sequenceRepeatable =
  stage+, move+, view+, camera+, sound+, caption+, tech+
model.featureVal.complex = fs | vColl | vNot | vMerge
model.featureVal.single =
  binary | symbol | numeric | \string | vLabel | \default | vAlt
model.entryPart =
  superEntry
  | hom
  | sense
  | form
  | orth
  | pron
  | hyph
  | syll
  | gramGrp
  | pos
  | subc
  | colloc
  | def
  | etym
  | usg
  | lbl
  | xr
  | re
model.entryPart.top =
  cit | dictScrap | form | gramGrp | def | etym | usg | xr | re
model.global.edit = gap | addSpan | damageSpan | delSpan | space
model.divPart =
  model.lLike
  | model.pLike
  | lg
  | sp
  | spGrp
  | graph
  | tree
  | eTree
  | forest
  | listForest
  | model.divPart.spoken
  | schemaSpec
model.persStateLike =
  persName
  | affiliation
  | age
  | education
  | faith
  | floruit
  | langKnowledge
  | nationality
  | occupation
  | residence
  | sex
  | socecStatus
  | state
  | trait
model.persEventLike = birth | death | event | listEvent
model.personLike = org | person | personGrp
model.personPart =
  model.biblLike | model.persStateLike | model.persEventLike | idno
model.placeNamePart =
  placeName | bloc | country | region | district | settlement | geogName
model.placeNamePart_alternation =
  placeName | bloc | country | region | district | settlement | geogName
model.placeNamePart_sequence =
  placeName, bloc, country, region, district, settlement, geogName
model.placeNamePart_sequenceOptional =
  placeName?,
  bloc?,
  country?,
  region?,
  district?,
  settlement?,
  geogName?
model.placeNamePart_sequenceOptionalRepeatable =
  placeName*,
  bloc*,
  country*,
  region*,
  district*,
  settlement*,
  geogName*
model.placeNamePart_sequenceRepeatable =
  placeName+,
  bloc+,
  country+,
  region+,
  district+,
  settlement+,
  geogName+
model.placeStateLike =
  model.placeNamePart
  | climate
  | location
  | population
  | state
  | terrain
  | trait
model.placeStateLike_alternation =
  model.placeNamePart_alternation
  | climate
  | location
  | population
  | state
  | terrain
  | trait
model.placeStateLike_sequence =
  model.placeNamePart_sequence,
  climate,
  location,
  population,
  state,
  terrain,
  trait
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?,
  climate?,
  location?,
  population?,
  state?,
  terrain?,
  trait?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*,
  climate*,
  location*,
  population*,
  state*,
  terrain*,
  trait*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+,
  climate+,
  location+,
  population+,
  state+,
  terrain+,
  trait+
model.placeEventLike = event
model.orgPart = listOrg | listPerson | listPlace
model.publicationStmtPart =
  address
  | date
  | publisher
  | pubPlace
  | distributor
  | authority
  | idno
  | availability
model.availabilityPart = licence
model.certLike = precision | certainty | respons
model.descLike = desc
model.glossLike = gloss | equiv | altIdent
model.quoteLike = quote | cit
model.quoteLike_alternation = quote | cit
model.quoteLike_sequence = quote, cit
model.quoteLike_sequenceOptional = quote?, cit?
model.quoteLike_sequenceOptionalRepeatable = quote*, cit*
model.quoteLike_sequenceRepeatable = quote+, cit+
model.qLike = model.quoteLike | said | q | floatingText
model.qLike_alternation =
  model.quoteLike_alternation | said | q | floatingText
model.qLike_sequence = model.quoteLike_sequence, said, q, floatingText
model.qLike_sequenceOptional =
  model.quoteLike_sequenceOptional?, said?, q?, floatingText?
model.qLike_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*, said*, q*, floatingText*
model.qLike_sequenceRepeatable =
  model.quoteLike_sequenceRepeatable+, said+, q+, floatingText+
model.respLike =
  author | editor | respStmt | meeting | sponsor | funder | principal
model.divWrapper =
  meeting
  | byline
  | dateline
  | argument
  | epigraph
  | salute
  | docAuthor
  | docDate
model.divTopPart = model.headLike | opener
model.divTop = model.divWrapper | model.divTopPart
model.frontPart.drama =
  set | prologue | epilogue | performance | castList
model.pLike.front =
  head
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | docEdition
  | docImprint
  | docDate
model.divBottomPart = trailer | closer | signed | postscript
model.divBottom = model.divWrapper | model.divBottomPart
model.titlepagePart =
  graphic
  | binaryObject
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | imprimatur
  | docEdition
  | docImprint
  | docDate
model.msQuoteLike =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msItemPart =
  model.biblLike
  | model.quoteLike
  | model.respLike
  | model.msQuoteLike
  | textLang
  | idno
  | filiation
  | msItem
  | msItemStruct
  | decoNote
model.choicePart =
  sic | corr | reg | orig | unclear | abbr | expan | seg | ex | am
model.imprintPart = publisher | biblScope | pubPlace | distributor
model.catDescPart = textDesc
model.settingPart = locale | activity
model.textDescPart_sequence =
  channel,
  constitution,
  derivation,
  domain,
  factuality,
  interaction,
  preparedness
model.castItemPart = role | roleDesc | actor
model.physDescPart_sequenceOptional =
  objectDesc?,
  handDesc?,
  typeDesc?,
  scriptDesc?,
  musicNotation?,
  decoDesc?,
  additions?,
  bindingDesc?,
  sealDesc?,
  accMat?
model.addressLike = email | address | affiliation
model.addressLike_alternation = email | address | affiliation
model.addressLike_sequence = email, address, affiliation
model.addressLike_sequenceOptional = email?, address?, affiliation?
model.addressLike_sequenceOptionalRepeatable =
  email*, address*, affiliation*
model.addressLike_sequenceRepeatable = email+, address+, affiliation+
model.nameLike =
  model.nameLike.agent
  | model.offsetLike
  | model.placeStateLike
  | rs
  | lang
  | idno
  | model.persNamePart
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
  | rs
  | lang
  | idno
  | model.persNamePart_alternation
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence,
  rs,
  lang,
  idno,
  model.persNamePart_sequence
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?,
  rs?,
  lang?,
  idno?,
  model.persNamePart_sequenceOptional?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*,
  rs*,
  lang*,
  idno*,
  model.persNamePart_sequenceOptionalRepeatable*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+,
  rs+,
  lang+,
  idno+,
  model.persNamePart_sequenceRepeatable+
model.global =
  model.global.meta
  | model.milestoneLike
  | model.noteLike
  | model.global.edit
  | notatedMusic
  | figure
  | model.global.spoken
  | metamark
model.featureVal = model.featureVal.complex | model.featureVal.single
model.biblPart =
  model.respLike
  | model.imprintPart
  | series
  | citedRange
  | bibl
  | relatedItem
  | textLang
  | edition
  | extent
  | msIdentifier
  | listRelation
  | relationGrp
model.frontPart = model.frontPart.drama | divGen | titlePage
model.addrPart = model.nameLike | addrLine | street | postCode | postBox
model.pPart.data =
  model.dateLike
  | model.measureLike
  | model.addressLike
  | model.nameLike
model.inter =
  model.egLike
  | model.oddDecl
  | model.biblLike
  | model.labelLike
  | model.listLike
  | model.stageLike
  | model.qLike
  | castList
model.common = model.divPart | model.inter | model.entryLike
model.phrase =
  model.segLike
  | model.highlighted
  | model.graphicLike
  | model.pPart.msdesc
  | model.pPart.edit
  | model.ptrLike
  | model.lPart
  | model.phrase.xml
  | model.specDescLike
  | model.pPart.data
  | model.ptrLike.form
model.limitedPhrase =
  model.hiLike
  | model.emphLike
  | model.pPart.msdesc
  | model.pPart.editorial
  | model.ptrLike
  | model.phrase.xml
  | model.pPart.data
model.divLike = \div
model.divGenLike = divGen
model.div1Like = div1
model.div2Like = div2
model.div3Like = div3
model.div4Like = div4
model.div5Like = div5
model.div6Like = div6
model.div7Like = div7
model.applicationLike = application
model.teiHeaderPart = encodingDesc | profileDesc
model.sourceDescPart = scriptStmt | recordingStmt
model.encodingDescPart =
  charDecl
  | projectDesc
  | samplingDecl
  | editorialDecl
  | tagsDecl
  | styleDefDecl
  | refsDecl
  | listPrefixDef
  | classDecl
  | geoDecl
  | appInfo
  | fsdDecl
  | variantEncoding
  | metDecl
  | schemaSpec
model.editorialDeclPart =
  correction
  | normalization
  | quotation
  | hyphenation
  | segmentation
  | stdVals
  | interpretation
model.profileDescPart =
  textDesc
  | particDesc
  | settingDesc
  | creation
  | langUsage
  | textClass
  | calendarDesc
  | handNotes
  | listTranspose
att.source.attributes = att.source.attribute.source
att.source.attribute.source =
  
  ##  (pointer to a bibliographical source reference) provides a pointer to the bibliographical source from which a quotation or citation is drawn.
  attribute source {
    list { data.pointer+ }
  }?
model.resourceLike = fsdDecl | facsimile | sourceDoc
att.personal.attributes =
  att.naming.attributes,
  att.personal.attribute.full,
  att.personal.attribute.sort
att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
att.personal.attribute.sort =
  
  ## specifies the sort order of the name component in relation to others within the name.
  attribute sort { data.count }?
model.placeLike = place
att.milestoneUnit.attributes = att.milestoneUnit.attribute.unit
att.milestoneUnit.attribute.unit =
  
  ## provides a conventional name for the kind of section changing at this milestone.
  ## Suggested values include: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered
  attribute unit {
    
    ## physical page breaks (synonymous with the pb element).
    "page"
    | 
      ## column breaks.
      "column"
    | 
      ## line breaks (synonymous with the lb element).
      "line"
    | 
      ## any units termed book, liber, etc.
      "book"
    | 
      ## individual poems in a collection.
      "poem"
    | 
      ## cantos or other major sections of a poem.
      "canto"
    | 
      ## changes of speaker or narrator.
      "speaker"
    | 
      ## stanzas within a poem, book, or canto.
      "stanza"
    | 
      ## acts within a play.
      "act"
    | 
      ## scenes within a play or act.
      "scene"
    | 
      ## sections of any kind.
      "section"
    | 
      ## passages not present in the reference edition.
      "absent"
    | 
      ## passages present in the text, but not to be included as part of the reference.
      "unnumbered"
    | xsd:Name
  }
p =
  
  ## (paragraph) marks paragraphs in prose. [3.1.  7.2.5. ]
  element ns2:p {
    macro.paraContent,
    att.global.attributes,
    att.declaring.attributes,
    att.fragmentable.attributes,
    empty
  }
foreign =
  
  ## (foreign) identifies a word or phrase as belonging to some language other than that of the surrounding text.  [3.3.2.1. ]
  element ns2:foreign { macro.phraseSeq, att.global.attributes, empty }
emph =
  
  ## (emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2.  3.3.2. ]
  element ns2:emph { macro.paraContent, att.global.attributes, empty }
hi =
  
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made.  [3.3.2.2.  3.3.2. ]
  element ns2:hi { macro.paraContent, att.global.attributes, empty }
distinct =
  
  ## identifies any word or phrase which is regarded as linguistically distinct, for example as archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage.  [3.3.2.3. ]
  element ns2:distinct {
    macro.phraseSeq,
    att.global.attributes,
    
    ## specifies the sublanguage or register to which the word or phrase is being assigned
    attribute type { data.enumerated }?,
    
    ## specifies how the phrase is distinct diachronically
    attribute time { data.text }?,
    
    ## specifies how the phrase is distinct diatopically
    attribute space { data.text }?,
    
    ## specifies how the phrase is distinct diastatically
    attribute social { data.text }?,
    empty
  }
said =
  
  ## (speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. [3.3.3. ]
  element ns2:said {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.attributes,
    
    ## may be used to indicate whether the quoted matter is regarded as having been vocalized or signed.
    [ a:defaultValue = "unknown" ]
    attribute aloud { data.xTruthValue }?,
    
    ## may be used to indicate whether the quoted matter is regarded as direct or indirect speech.
    [ a:defaultValue = "true" ] attribute direct { data.xTruthValue }?,
    empty
  }
quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3.  4.3.1. ]
  element ns2:quote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    att.source.attributes,
    empty
  }
q =
  
  ## (quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. ]
  element ns2:q {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.attributes,
    att.source.attributes,
    
    ## may be used to indicate whether the offset passage is spoken or thought, or to characterize it more finely.
    ## Suggested values include: 1] spoken; 2] thought; 3] written; 4] soCalled; 5] foreign; 6] distinct; 7] term; 8] emph; 9] mentioned
    attribute type {
      
      ## representation of speech
      "spoken"
      | 
        ## representation of thought, e.g. internal monologue
        "thought"
      | 
        ## quotation from a written source
        "written"
      | 
        ## authorial distance
        "soCalled"
      | 
        ##
        "foreign"
      | 
        ## linguistically distinct
        "distinct"
      | 
        ## technical term
        "term"
      | 
        ## rhetorically emphasized
        "emph"
      | 
        ## refering to itself, not its normal referant
        "mentioned"
      | xsd:Name
    }?,
    empty
  }
cit =
  
  ## (cited quotation) contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example.  [3.3.3.  4.3.1.  9.3.5.1. ]
  element ns2:cit {
    (model.qLike
     | model.egLike
     | model.biblLike
     | model.ptrLike
     | model.global
     | model.entryPart)+,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
mentioned =
  
  ## marks words or phrases mentioned, not used. [3.3.3. ]
  element ns2:mentioned {
    macro.phraseSeq, att.global.attributes, empty
  }
soCalled =
  
  ## contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. [3.3.3. ]
  element ns2:soCalled { macro.phraseSeq, att.global.attributes, empty }
desc =
  
  ## (description) contains a brief description of the object documented by its parent element, including its intended usage, purpose, or application where this is appropriate. [22.4.1. ]
  element ns2:desc {
    macro.limitedContent,
    att.global.attributes,
    att.translatable.attributes,
    empty
  }
gloss =
  
  ## identifies a phrase or word used to provide a gloss or definition for some other word or phrase. [3.3.4.  22.4.1. ]
  element ns2:gloss {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.translatable.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    att.cReferencing.attributes,
    empty
  }
term =
  
  ## contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.3.4. ]
  element ns2:term {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.canonical.attributes,
    att.sortable.attributes,
    att.cReferencing.attributes,
    empty
  }
sic =
  
  ## (Latin for thus or so) contains text reproduced although apparently incorrect or inaccurate. [3.4.1. ]
  element ns2:sic {
    macro.paraContent,
    att.global.attributes,
    att.responsibility.attributes,
    empty
  }
corr =
  
  ## (correction) contains the correct form of a passage apparently erroneous in the copy text. [3.4.1. ]
  element ns2:corr {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
choice =
  
  ## groups a number of alternative encodings for the same point in a text. [3.4. ]
  element ns2:choice {
    (model.choicePart | choice)*, att.global.attributes, empty
  }
reg =
  
  ## (regularization) contains a reading which has been regularized or normalized in some sense. [3.4.2.  12. ]
  element ns2:reg {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
orig =
  
  ## (original form) contains a reading which is marked as following the original, rather than being normalized or corrected. [3.4.2.  12. ]
  element ns2:orig {
    macro.paraContent,
    att.global.attributes,
    att.responsibility.attributes,
    empty
  }
gap =
  
  ## (gap) indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. [3.4.3. ]
  element ns2:gap {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.duration.attributes,
    att.editLike.attributes,
    
    ## gives the reason for omission. Sample values include sampling, inaudible, irrelevant, cancelled.
    attribute reason {
      list { data.word+ }
    }?,
    
    ## in the case of text omitted from the transcription because of deliberate deletion by an identifiable hand, signifies the hand which made the deletion.
    attribute hand { data.pointer }?,
    
    ## In the case of text omitted because of damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { data.enumerated }?,
    empty
  }
add =
  
  ## (addition) contains letters, words, or phrases inserted in the source text by an author, scribe, annotator, or corrector. [3.4.3. ]
  element ns2:add {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
del =
  
  ## (deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, annotator, or corrector. [3.4.3. ]
  element ns2:del {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    empty
  }
unclear =
  
  ## contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1.  3.4.3. ]
  element ns2:unclear {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indicates why the material is hard to transcribe.
    attribute reason {
      list { data.word+ }
    }?,
    
    ## Where the difficulty in transcription arises from action (partial deletion, etc.) assignable to an identifiable hand, signifies the hand responsible for the action.
    attribute hand { data.pointer }?,
    
    ## Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { data.enumerated }?,
    empty
  }
name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. [3.5.1. ]
  element ns2:name {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
rs =
  
  ## (referencing string) contains a general purpose name or referring string. [13.2.1.  3.5.1. ]
  element ns2:rs {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
email =
  
  ## (electronic mail address) contains an e-mail address identifying a location to which e-mail messages can be delivered.  [3.5.2. ]
  element ns2:email { macro.phraseSeq, att.global.attributes, empty }
address =
  
  ## contains a postal address, for example of a publisher, an organization, or an individual. [3.5.2.  2.2.4.  3.11.2.4. ]
  element ns2:address {
    (model.global*, (model.addrPart, model.global*)+),
    att.global.attributes,
    empty
  }
addrLine =
  
  ## (address line) contains one line of a postal address. [3.5.2.  2.2.4.  3.11.2.4. ]
  element ns2:addrLine { macro.phraseSeq, att.global.attributes, empty }
street =
  
  ## contains a full street address including any name or number identifying a building as well as the name of the street or route on which it is located. [3.5.2. ]
  element ns2:street { macro.phraseSeq, att.global.attributes, empty }
postCode =
  
  ## (postal code) contains a numerical or alphanumeric code used as part of a postal address to simplify sorting or delivery of mail.  [3.5.2. ]
  element ns2:postCode { text, att.global.attributes, empty }
postBox =
  
  ## (postal box or post office box) contains a number or other identifier for some postal delivery point other than a street address.  [3.5.2. ]
  element ns2:postBox { text, att.global.attributes, empty }
num =
  
  ## (number) contains a number, written in any form. [3.5.3. ]
  element ns2:num {
    macro.phraseSeq,
    att.global.attributes,
    att.ranging.attributes,
    
    ## indicates the type of numeric value.
    ## Suggested values include: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage
    attribute type {
      
      ## absolute number, e.g. 21, 21.5
      "cardinal"
      | 
        ## ordinal number, e.g. 21st
        "ordinal"
      | 
        ## fraction, e.g. one half or three-quarters
        "fraction"
      | 
        ## a percentage
        "percentage"
      | xsd:Name
    }?,
    
    ## supplies the value of the number in standard form.
    attribute value { data.numeric }?,
    empty
  }
measure =
  
  ## contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. [3.5.3. ]
  element ns2:measure {
    macro.phraseSeq,
    att.global.attributes,
    att.measurement.attributes,
    
    ## specifies the type of measurement in any convenient typology.
    attribute type { data.enumerated }?,
    empty
  }
measureGrp =
  
  ## (measure group) contains a group of dimensional specifications which relate to the same object, for example the height and width of a manuscript page. [10.3.4. ]
  element ns2:measureGrp {
    (text | model.gLike | model.measureLike)*,
    att.global.attributes,
    att.measurement.attributes,
    att.typed.attributes,
    empty
  }
date =
  
  ## contains a date in any format. [3.5.4.  2.2.4.  2.5.  3.11.2.4.  15.2.3.  13.3.6. ]
  element ns2:date {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.duration.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
time =
  
  ## contains a phrase defining a time of day in any format. [3.5.4. ]
  element ns2:time {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.duration.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
abbr =
  
  ## (abbreviation) contains an abbreviation of any sort. [3.5.5. ]
  element ns2:abbr {
    macro.phraseSeq,
    att.global.attributes,
    att.responsibility.attributes,
    att.typed.attribute.subtype,
    
    ## allows the encoder to classify the abbreviation according to some convenient typology.
    attribute type { data.enumerated }?,
    empty
  }
expan =
  
  ## (expansion) contains the expansion of an abbreviation. [3.5.5. ]
  element ns2:expan {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    empty
  }
ptr =
  
  ## (pointer) defines a pointer to another location. [3.6.  16.1. ]
  element ns2:ptr {
    empty
    >> sch:pattern [
         id = "ptr-constraint-ptrAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.internetMedia.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.cReferencing.attributes,
    empty
  }
ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.6.  16.1. ]
  element ns2:ref {
    macro.paraContent
    >> sch:pattern [
         id = "ref-constraint-refAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.internetMedia.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.cReferencing.attributes,
    empty
  }
\list =
  
  ## (list) contains any sequence of items organized as a list. [3.7. ]
  element ns2:list {
    ((model.divTop | model.global)*,
     ((item, model.global*)+
      | (headLabel?,
         headItem?,
         (label, model.global*, item, model.global*)+)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.sortable.attributes,
    
    ## describes the form of the list.
    ## Suggested values include: 1] ordered; 2] bulleted; 3] simple; 4] gloss
    [ a:defaultValue = "simple" ]
    attribute type {
      
      ## list items are numbered or lettered. 
      "ordered"
      | 
        ## list items are marked with a bullet or other typographic device. 
        "bulleted"
      | 
        ## list items are not numbered or bulleted. 
        "simple"
      | 
        ## each list item glosses some term or concept, which is given by a label element preceding the list item.
        "gloss"
      | xsd:Name
    }?,
    empty
  }
item =
  
  ## contains one component of a list. [3.7.  2.5. ]
  element ns2:item {
    macro.specialPara,
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
label =
  
  ## contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.7. ]
  element ns2:label {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.placement.attributes,
    empty
  }
head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. ]
  element ns2:head {
    (text
     | lg
     | model.gLike
     | model.phrase
     | model.inter
     | model.lLike
     | model.global)*,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
headLabel =
  
  ## (heading for list labels) contains the heading for the label or term column in a glossary list or similar structured list. [3.7. ]
  element ns2:headLabel {
    macro.phraseSeq, att.global.attributes, empty
  }
headItem =
  
  ## (heading for list items) contains the heading for the item or gloss column in a glossary list or similar structured list. [3.7. ]
  element ns2:headItem { macro.phraseSeq, att.global.attributes, empty }
note =
  
  ## contains a note or annotation. [3.8.1.  2.2.6.  3.11.2.8.  9.3.5.4. ]
  element ns2:note {
    macro.specialPara,
    att.global.attributes,
    att.placement.attributes,
    att.pointing.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    
    ## indicates whether the copy text shows the exact place of reference for the note.
    [ a:defaultValue = "true" ] attribute anchored { data.truthValue }?,
    
    ## points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
    attribute targetEnd {
      list { data.pointer+ }
    }?,
    empty
  }
index =
  
  ## (index entry) marks a location to be indexed for whatever purpose. [3.8.2. ]
  element ns2:index {
    (term, index?)*,
    att.global.attributes,
    att.spanning.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), supplying a name to specify which index (of several) the index entry belongs to.
    attribute indexName { data.name }?,
    empty
  }
media =
  
  ## indicates the location of any form of external media such as an audio or video clip etc. [3.9. ]
  element ns2:media {
    model.descLike*,
    att.typed.attributes,
    att.global.attributes,
    att.media.attribute.width,
    att.media.attribute.height,
    att.media.attribute.scale,
    att.resourced.attributes,
    att.declaring.attributes,
    att.timed.attributes,
    
    ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
    attribute mimeType {
      list { data.word+ }
    },
    empty
  }
graphic =
  
  ## indicates the location of an inline graphic, illustration, or figure. [3.9. ]
  element ns2:graphic {
    model.descLike*,
    att.global.attributes,
    att.media.attributes,
    att.resourced.attributes,
    att.declaring.attributes,
    empty
  }
binaryObject =
  
  ## provides encoded binary data representing an inline graphic, audio, video or other object. [3.9. ]
  element ns2:binaryObject {
    text,
    att.global.attributes,
    att.media.attributes,
    att.timed.attributes,
    att.typed.attributes,
    
    ## The encoding used to encode the binary data. If not specified, this is assumed to be Base64.
    attribute encoding {
      list { data.word+ }
    }?,
    empty
  }
milestone =
  
  ## marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. [3.10.3. ]
  element ns2:milestone {
    empty,
    att.global.attributes,
    att.milestoneUnit.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
gb =
  
  ##  (gathering begins) marks the point in a transcribed codex at which a new gathering or quire begins. [3.10.3. ]
  element ns2:gb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
pb =
  
  ## (page break) marks the start of a new page in a paginated document. [3.10.3. ]
  element ns2:pb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
lb =
  
  ## (line break) marks the start of a new (typographic) line in some edition or version of a text. [3.10.3.  7.2.5. ]
  element ns2:lb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
cb =
  
  ## (column break) marks the beginning of a new column of a text on a multi-column page. [3.10.3. ]
  element ns2:cb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
analytic =
  
  ## (analytic level) contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication. [3.11.2.1. ]
  element ns2:analytic {
    (author
     | editor
     | respStmt
     | title
     | model.ptrLike
     | date
     | textLang
     | idno)*,
    att.global.attributes,
    empty
  }
monogr =
  
  ## (monographic level) contains bibliographic elements describing an item (e.g. a book or journal) published as an independent item (i.e. as a separate physical object). [3.11.2.1. ]
  element ns2:monogr {
    ((((author | editor | meeting | respStmt),
       (author | editor | meeting | respStmt)*,
       title+,
       (model.ptrLike | idno | textLang | editor | respStmt)*)
      | ((title | model.ptrLike | idno)+,
         (textLang | author | editor | meeting | respStmt)*)
      | (authority, idno))?,
     model.noteLike*,
     (edition,
      (idno | model.ptrLike | editor | sponsor | funder | respStmt)*)*,
     imprint,
     (imprint | extent | biblScope)*),
    att.global.attributes,
    empty
  }
series =
  
  ## (series information) contains information about the series in which a book or other bibliographic item has appeared. [3.11.2.1. ]
  element ns2:series {
    (text
     | model.gLike
     | title
     | model.ptrLike
     | editor
     | respStmt
     | biblScope
     | idno
     | textLang
     | model.global)*,
    att.global.attributes,
    empty
  }
author =
  
  ## in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority.  [3.11.2.2.  2.2.1. ]
  element ns2:author {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
editor =
  
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc.  [3.11.2.2. ]
  element ns2:editor {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
respStmt =
  
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.11.2.2.  2.2.1.  2.2.2.  2.2.5. ]
  element ns2:respStmt {
    ((resp+, model.nameLike.agent+) | (model.nameLike.agent+, resp+)),
    att.global.attributes,
    empty
  }
resp =
  
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.11.2.2.  2.2.1.  2.2.2.  2.2.5. ]
  element ns2:resp {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
title =
  
  ## contains a title for any kind of work. [3.11.2.2.  2.2.1.  2.2.5. ]
  element ns2:title {
    macro.paraContent,
    att.global.attributes,
    att.canonical.attributes,
    att.typed.attribute.subtype,
    
    ## classifies the title according to some convenient typology.
    ## Sample values include: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    attribute type { data.enumerated }?,
    
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item. 
      "a"
      | 
        ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works 
        "m"
      | 
        ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper 
        "j"
      | 
        ## (series) the title applies to a series of otherwise distinct publications such as a collection 
        "s"
      | 
        ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }
meeting =
  
  ## contains the formalized descriptive title for a meeting or conference, for use in a bibliographic description for an item derived from such a meeting, or as a heading or preamble to publications emanating from it. [3.11.2.2. ]
  element ns2:meeting {
    macro.limitedContent, att.global.attributes, empty
  }
imprint =
  
  ## groups information relating to the publication or distribution of a bibliographic item. [3.11.2.4. ]
  element ns2:imprint {
    ((classCode | catRef)*,
     ((model.imprintPart | model.dateLike), respStmt*, model.global*)+),
    att.global.attributes,
    empty
  }
publisher =
  
  ## provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.11.2.4.  2.2.4. ]
  element ns2:publisher {
    macro.phraseSeq, att.global.attributes, empty
  }
biblScope =
  
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.11.2.4. ]
  element ns2:biblScope {
    macro.phraseSeq,
    att.global.attributes,
    
    ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume.
    ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column
    attribute unit {
      
      ## the element contains a volume number.
      "volume"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## the element contains a page number or page range.
        "page"
      | 
        ## the element contains a line number or line range.
        "line"
      | 
        ## the element contains a chapter indication (number and/or title)
        "chapter"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | 
        ## the element identifies a column.
        "column"
      | xsd:Name
    }?,
    
    ## identifies the type of information conveyed by the element, e.g. columns, pages, volume.
    ## Suggested values include: 1] vol(volume) ; 2] issue; 3] pp(pages) ; 4] ll (lines) ; 5] chap(chapter) ; 6] part
    attribute type {
      
      ## (volume) the element contains a volume number.
      "vol"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## (pages) the element contains a page number or page range.
        "pp"
      | 
        ##  (lines) the element contains a line number or line range.
        "ll"
      | 
        ## (chapter) the element contains a chapter indication (number and/or title)
        "chap"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | xsd:Name
    }?,
    
    ## specifies the starting point of the range of units indicated by the unit attribute.
    attribute from { data.word }?,
    
    ## specifies the end-point of the range of units indicated by the unit attribute.
    attribute to { data.word }?,
    empty
  }
citedRange =
  
  ##  (cited range) defines the range of cited content, often represented by pages or other units [3.11.2.4. ]
  element ns2:citedRange {
    macro.phraseSeq,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifies the type of information conveyed by the element, e.g. columns, pages, volume.
    ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column
    attribute unit {
      
      ## the element contains a volume number.
      "volume"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## the element contains a page number or page range.
        "page"
      | 
        ## the element contains a line number or line range.
        "line"
      | 
        ## the element contains a chapter indication (number and/or title)
        "chapter"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | 
        ## the element identifies a column.
        "column"
      | xsd:Name
    }?,
    
    ## specifies the starting point of the range of units indicated by the unit attribute.
    attribute from { data.word }?,
    
    ## specifies the end-point of the range of units indicated by the unit attribute.
    attribute to { data.word }?,
    empty
  }
pubPlace =
  
  ## (publication place) contains the name of the place where a bibliographic item was published. [3.11.2.4. ]
  element ns2:pubPlace {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged.  [3.11.1.  2.2.7.  15.3.2. ]
  element ns2:bibl {
    (text
     | model.gLike
     | model.highlighted
     | model.pPart.data
     | model.pPart.edit
     | model.segLike
     | model.ptrLike
     | model.biblPart
     | model.global)*,
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
biblStruct =
  
  ## (structured bibliographic citation) contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order.  [3.11.1.  2.2.7.  15.3.2. ]
  element ns2:biblStruct {
    (analytic*,
     (monogr, series*)+,
     (model.noteLike
      | idno
      | model.ptrLike
      | relatedItem
      | citedRange)*),
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
listBibl =
  
  ## (citation list) contains a list of bibliographic citations of any kind.  [3.11.1.  2.2.7.  15.3.2. ]
  element ns2:listBibl {
    (model.headLike*, (model.biblLike | model.milestoneLike)+),
    att.global.attributes,
    att.sortable.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
relatedItem =
  
  ## contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. [3.11.2.7. ]
  element ns2:relatedItem {
    ((model.biblLike | model.ptrLike)?)
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and count( child::* ) > 0"
             "\x{a}" ~
             "If the @target attribute on "
             sch:name [ ]
             " is used, the\x{a}" ~
             "relatedItem element must be empty"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target or child::*"
             "A relatedItem element should have either a 'target' attribute\x{a}" ~
             "        or a child element to indicate the related bibliographic item"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    
    ## points to the related bibliographic element by means of an absolute or relative URI reference
    attribute target { data.pointer }?,
    empty
  }
l =
  
  ## (verse line) contains a single, possibly incomplete, line of verse. [3.12.1.  3.12.  7.2.5. ]
  element ns2:l {
    macro.paraContent,
    att.global.attributes,
    att.metrical.attributes,
    att.enjamb.attributes,
    att.fragmentable.attributes,
    empty
  }
lg =
  
  ## (line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.12.1.  3.12.  7.2.5. ]
  element ns2:lg {
    ((model.divTop | model.global)*,
     (model.lLike | model.stageLike | model.labelLike | lg),
     (model.lLike
      | model.stageLike
      | model.labelLike
      | model.global
      | lg)*,
     (model.divBottom, model.global*)*)
    >> sch:pattern [
         id = "lg-constraint-atleast1oflggapl"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) > 0"
             "An lg element\x{a}" ~
             "        must contain at least one child l, lg or gap element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
sp =
  
  ## (speech) contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. [3.12.2.  3.12.  7.2.2. ]
  element ns2:sp {
    (model.global*,
     (speaker, model.global*)?,
     ((lg
       | model.lLike
       | model.pLike
       | model.listLike
       | model.stageLike
       | model.qLike),
      model.global*)+),
    att.global.attributes,
    att.ascribed.attributes,
    empty
  }
speaker =
  
  ## contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. [3.12.2. ]
  element ns2:speaker { macro.phraseSeq, att.global.attributes, empty }
stage =
  
  ## (stage direction) contains any kind of stage direction within a dramatic text or fragment. [3.12.2.  3.12.  7.2.4. ]
  element ns2:stage {
    macro.specialPara,
    att.ascribed.attributes,
    att.global.attributes,
    
    ## indicates the kind of stage direction.
    ## Suggested values include: 1] setting; 2] entrance; 3] exit; 4] business; 5] novelistic; 6] delivery; 7] modifier; 8] location; 9] mixed
    attribute type {
      
      ## describes a setting.
      "setting"
      | 
        ## describes an entrance.
        "entrance"
      | 
        ## describes an exit.
        "exit"
      | 
        ## describes stage business.
        "business"
      | 
        ## is a narrative, motivating stage direction.
        "novelistic"
      | 
        ## describes how a character speaks.
        "delivery"
      | 
        ## gives some detail about a character.
        "modifier"
      | 
        ## describes a location.
        "location"
      | 
        ## more than one of the above
        "mixed"
      | xsd:Name
    }?,
    empty
  }
teiCorpus =
  
  ## contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more TEI elements, each containing a single text header and a text. [4.  15.1. ]
  element ns2:teiCorpus {
    (teiHeader,
     ((model.resourceLike+, (TEI | teiCorpus)*)
      | (TEI | teiCorpus)+)),
    att.global.attributes,
    
    ## The version of the TEI scheme
    [ a:defaultValue = "5.0" ] attribute version { data.version }?,
    empty
  }
divGen =
  
  ## (automatically generated text division) indicates the location at which a textual division generated automatically by a text-processing application is to appear. [3.8.2. ]
  element ns2:divGen {
    model.headLike*,
    att.global.attributes,
    
    ## specifies what type of generated text division (e.g. index, table of contents, etc.) is to appear.
    ## Sample values include: 1] index; 2] toc; 3] figlist; 4] tablist
    attribute type { data.enumerated }?,
    empty
  }
textLang =
  
  ## (text language) describes the languages and writing systems identified within the bibliographic work being described, rather than its description.  [3.11.2.4.  10.6.6. ]
  element ns2:textLang {
    macro.phraseSeq,
    att.global.attributes,
    
    ## (main language) supplies a code which identifies the chief language used in the bibliographic work.
    attribute mainLang { data.language }?,
    
    ## (other languages) one or more codes identifying any other languages used in the bibliographic work.
    attribute otherLangs {
      list { data.language* }
    }?,
    empty
  }
s =
  
  ## (s-unit) contains a sentence-like division of a text. [17.1.  8.4.1. ]
  element ns2:s {
    macro.phraseSeq
    >> sch:pattern [
         id = "s-constraint-noNestedS"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:s"
           "\x{a}" ~
           "               "
           sch:report [
             test = "tei:s"
             "You may not nest one s element within\x{a}" ~
             "      another: use seg instead"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
cl =
  
  ## (clause) represents a grammatical clause. [17.1. ]
  element ns2:cl {
    macro.phraseSeq,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
phr =
  
  ## (phrase) represents a grammatical phrase. [17.1. ]
  element ns2:phr {
    macro.phraseSeq,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
w =
  
  ## (word) represents a grammatical (not necessarily orthographic) word. [17.1. ]
  element ns2:w {
    (text
     | model.gLike
     | seg
     | w
     | m
     | c
     | pc
     | model.global
     | model.lPart
     | model.hiLike
     | model.pPart.edit)*,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    
    ## provides a lemma for the word, such as an uninflected dictionary entry form.
    attribute lemma { data.text }?,
    
    ## provides a pointer to a definition of the lemma for the word, for example in an online lexicon. 
    attribute lemmaRef { data.pointer }?,
    empty
  }
m =
  
  ## (morpheme) represents a grammatical morpheme. [17.1. ]
  element ns2:m {
    (text | model.gLike | seg | m | c | model.global)*,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    
    ## identifies the morpheme's base form.
    attribute baseForm { data.word }?,
    empty
  }
c =
  
  ## (character) represents a character. [17.1. ]
  element ns2:c {
    macro.xtext,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
pc =
  
  ##  (punctuation character) contains a character or string of characters regarded as constituting a single punctuation mark. [17.1. ]
  element ns2:pc {
    (text | model.gLike | c | model.pPart.edit)*,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    
    ## indicates the extent to which this punctuation mark conventionally separates words or phrases
    attribute force {
      
      ## the punctuation mark is a word separator
      "strong"
      | 
        ## the punctuation mark is not a word separator
        "weak"
      | 
        ## the punctuation mark may or may not be a word separator
        "inter"
    }?,
    
    ## provides a name for the kind of unit delimited by this punctuation mark.
    attribute unit { data.enumerated }?,
    
    ## indicates whether this punctuation mark precedes or follows the unit it delimits.
    attribute pre { data.truthValue }?,
    empty
  }
att.global.analytic.attributes = att.global.analytic.attribute.ana
att.global.analytic.attribute.ana =
  
  ## (analysis) indicates one or more elements containing interpretations of the element on which the ana attribute appears.
  attribute ana {
    list { data.pointer+ }
  }?
span =
  
  ## associates an interpretative annotation directly with a span of text. [17.3. ]
  element ns2:span {
    macro.phraseSeq.limited
    >> sch:pattern [
         id = "span-constraint-targetfrom"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@from and @target"
             "\x{a}" ~
             "Only one of the attributes @target and @from may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "span-constraint-targetto"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@to          and          @target"
             "\x{a}" ~
             "Only one of the attributes @target and @to may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "span-constraint-tonotfrom"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@to          and          not(@from)"
             "\x{a}" ~
             "If @to is supplied on "
             sch:name [ ]
             ", @from must be supplied as well"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "span-constraint-tofrom"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "contains(@to,' ') or contains(@from,' ')"
             "\x{a}" ~
             "The attributes @to and @from on "
             sch:name [ ]
             " may each contain only a single value"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.interpLike.attributes,
    att.pointing.attributes,
    
    ## gives the identifier of the node which is the starting point of the span of text being annotated; if not accompanied by a to attribute, gives the identifier of the node of the entire span of text being annotated.
    attribute from { data.pointer }?,
    
    ## gives the identifier of the node which is the end-point of the span of text being annotated.
    attribute to { data.pointer }?,
    empty
  }
spanGrp =
  
  ## (span group) collects together span tags. [17.3. ]
  element ns2:spanGrp {
    span*, att.global.attributes, att.interpLike.attributes, empty
  }
interp =
  
  ## (interpretation) summarizes a specific interpretative annotation which can be linked to a span of text. [17.3. ]
  element ns2:interp {
    (text | model.gLike | model.descLike | model.certLike)*,
    att.global.attributes,
    att.interpLike.attributes,
    empty
  }
interpGrp =
  
  ## (interpretation group) collects together a set of related interpretations which share responsibility or type. [17.3. ]
  element ns2:interpGrp {
    (model.descLike*, interp+),
    att.global.attributes,
    att.interpLike.attributes,
    empty
  }
precision =
  
  ## indicates the numerical accuracy or precision associated with some aspect of the text markup.  [21.2. ]
  element ns2:precision {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.scoping.attributes,
    att.ranging.attributes,
    
    ## indicates the degree of precision to be assigned as a value between 0 (none) and 1 (optimally precise)
    attribute degree { data.probability }?,
    
    ## characterizes the precision of the element or attribute pointed to by the precision element.
    attribute precision { data.certainty }?,
    
    ## supplies a standard deviation associated with the value in question
    attribute stdDeviation { data.numeric }?,
    empty
  }
certainty =
  
  ## indicates the degree of certainty associated with some aspect of the text markup.  [21.1.2. ]
  element ns2:certainty {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.scoping.attributes,
    
    ## (certainty) signifies the degree of certainty associated with the object pointed to by the certainty element.
    attribute cert { data.certainty }?,
    
    ## indicates more exactly the aspect concerning which certainty is being expressed: specifically, whether the markup is correctly located, whether the correct element or attribute name has been used, or whether the content of the element or attribute is correct, etc.
    attribute locus {
      
      ## uncertainty concerns whether the name of the element or attribute used is correctly applied.
      "name"
      | 
        ## uncertainty concerns whether the start of the element is correctly identified.
        "start"
      | 
        ## uncertainty concerns whether the end of the element is correctly identified.
        "end"
      | 
        ## uncertainty concerns both the start and the end of the element.
        "location"
      | 
        ## uncertainty concerns the content (for an element) or the value (for an attribute)
        "value"
    },
    
    ## provides an alternative value for the aspect of the markup in question—an alternative generic identifier, transcription, or attribute value, or the identifier of an anchor element (to indicate an alternative starting or ending location). If an assertedValue is given, the confidence level specified by degree applies to the alternative markup specified by assertedValue; if none is given, it applies to the markup in the text.
    attribute assertedValue { data.pointer | data.name | data.word }?,
    
    ## indicates conditions assumed in the assignment of a degree of confidence.
    attribute given {
      list { data.pointer+ }
    }?,
    
    ## indicates the degree of confidence assigned to the aspect of the markup named by the locus attribute.
    attribute degree { data.probability }?,
    empty
  }
respons =
  
  ## (responsibility) identifies the individual(s) responsible for some aspect of the content or markup of particular element(s). [21.3. ]
  element ns2:respons {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.scoping.attributes,
    
    ## indicates the specific aspect of the encoding (markup or content) for which responsibility is being assigned.
    attribute locus {
      list {
        (
         ## responsibility is being assigned concerning the name of the element or attribute used.
         "name"
         | 
           ## responsibility is being assigned concerning the start of the element concerned.
           "start"
         | 
           ## responsibility is being assigned concerning the end of the element concerned.
           "end"
         | 
           ## responsibility is being assigned concerning the location of the element concerned.
           "location"
         | 
           ## responsibility is being assigned concerning the content (for an element) or the value (for an attribute)
           "value")+
      }
    },
    
    ## (responsible party) identifies the individual or agency responsible for the indicated aspect of the electronic text.
    attribute resp { data.pointer },
    empty
  }
textDesc =
  
  ## (text description) provides a description of a text in terms of its situational parameters. [15.2.1. ]
  element ns2:textDesc {
    (model.textDescPart_sequence, purpose+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
particDesc =
  
  ## (participation description) describes the identifiable speakers, voices, or other participants in any kind of text.  [15.2. ]
  element ns2:particDesc {
    (model.pLike+ | (model.personLike | listPerson | listOrg)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
settingDesc =
  
  ## (setting description) describes the setting or settings within which a language interaction takes place, either as a prose description or as a series of setting elements. [15.2.  2.4. ]
  element ns2:settingDesc {
    (model.pLike+ | (setting | model.placeLike | listPlace)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
channel =
  
  ## (primary channel) describes the medium or channel by which a text is delivered or experienced. For a written text, this might be print, manuscript, e-mail, etc.; for a spoken one, radio, telephone, face-to-face, etc. [15.2.1. ]
  element ns2:channel {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## specifies the mode of this channel with respect to speech and writing. 
    [ a:defaultValue = "x" ]
    attribute mode {
      
      ## (spoken) 
      "s"
      | 
        ## (written) 
        "w"
      | 
        ## (spoken to be written) e.g. dictation
        "sw"
      | 
        ## (written to be spoken) e.g. a script
        "ws"
      | 
        ## (mixed) 
        "m"
      | 
        ## (unknown or inapplicable) 
        "x"
    }?,
    empty
  }
constitution =
  
  ## describes the internal composition of a text or text sample, for example as fragmentary, complete, etc. [15.2.1. ]
  element ns2:constitution {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## specifies how the text was constituted. 
    [ a:defaultValue = "single" ]
    attribute type {
      
      ## a single complete text 
      "single"
      | 
        ## a text made by combining several smaller items, each individually complete 
        "composite"
      | 
        ## (fragments) a text made by combining several smaller, not necessarily complete, items 
        "frags"
      | 
        ## composition unknown or unspecified 
        "unknown"
    }?,
    empty
  }
derivation =
  
  ## describes the nature and extent of originality of this text. [15.2.1. ]
  element ns2:derivation {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## categorizes the derivation of the text. 
    ## Sample values include: 1] original; 2] revision; 3] translation; 4] abridgment; 5] plagiarism; 6] traditional
    attribute type { data.enumerated }?,
    empty
  }
domain =
  
  ## (domain of use) describes the most important social context in which the text was realized or for which it is intended, for example private vs. public, education, religion, etc. [15.2.1. ]
  element ns2:domain {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## categorizes the domain of use. 
    ## Sample values include: 1] art; 2] domestic; 3] religious; 4] business; 5] education; 6] govt(government) ; 7] public
    attribute type { data.enumerated }?,
    empty
  }
factuality =
  
  ## describes the extent to which the text may be regarded as imaginative or non-imaginative, that is, as describing a fictional or a non-fictional world.  [15.2.1. ]
  element ns2:factuality {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## categorizes the factuality of the text. 
    attribute type {
      
      ## the text is to be regarded as entirely imaginative 
      "fiction"
      | 
        ## the text is to be regarded as entirely informative or factual 
        "fact"
      | 
        ## the text contains a mixture of fact and fiction 
        "mixed"
      | 
        ## the fiction/fact distinction is not regarded as helpful or appropriate to this text 
        "inapplicable"
    }?,
    empty
  }
interaction =
  
  ## describes the extent, cardinality and nature of any interaction among those producing and experiencing the text, for example in the form of response or interjection, commentary, etc. [15.2.1. ]
  element ns2:interaction {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## specifies the degree of interaction between active and passive participants in the text. 
    attribute type {
      
      ## no interaction of any kind, e.g. a monologue 
      "none"
      | 
        ## some degree of interaction, e.g. a monologue with set responses 
        "partial"
      | 
        ## complete interaction, e.g. a face to face conversation 
        "complete"
      | 
        ## this parameter is inappropriate or inapplicable in this case 
        "inapplicable"
    }?,
    
    ## specifies the number of active participants (or addressors) producing parts of the text.
    ## Suggested values include: 1] singular; 2] plural; 3] corporate; 4] unknown
    attribute active {
      
      ## a single addressor 
      "singular"
      | 
        ## many addressors 
        "plural"
      | 
        ## a corporate addressor 
        "corporate"
      | 
        ## number of addressors unknown or unspecifiable 
        "unknown"
      | xsd:Name
    }?,
    
    ## specifies the number of passive participants (or addressees) to whom a text is directed or in whose presence it is created or performed.
    ## Suggested values include: 1] self; 2] single; 3] many; 4] group; 5] world
    attribute passive {
      
      ## text is addressed to the originator e.g. a diary 
      "self"
      | 
        ## text is addressed to one other person e.g. a personal letter 
        "single"
      | 
        ## text is addressed to a countable number of others e.g. a conversation in which all participants are identified 
        "many"
      | 
        ## text is addressed to an undefined but fixed number of participants e.g. a lecture 
        "group"
      | 
        ## text is addressed to an undefined and indeterminately large number e.g. a published book 
        "world"
      | xsd:Name
    }?,
    empty
  }
preparedness =
  
  ## describes the extent to which a text may be regarded as prepared or spontaneous.  [15.2.1. ]
  element ns2:preparedness {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## a keyword characterizing the type of preparedness. 
    ## Sample values include: 1] none; 2] scripted; 3] formulaic; 4] revised
    attribute type { data.enumerated }?,
    empty
  }
purpose =
  
  ## characterizes a single purpose or communicative function of the text. [15.2.1. ]
  element ns2:purpose {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## specifies a particular kind of purpose. 
    ## Suggested values include: 1] persuade; 2] express; 3] inform; 4] entertain
    attribute type {
      
      ## didactic, advertising, propaganda, etc. 
      "persuade"
      | 
        ## self expression, confessional, etc. 
        "express"
      | 
        ## convey information, educate, etc. 
        "inform"
      | 
        ## amuse, entertain, etc. 
        "entertain"
      | xsd:Name
    }?,
    
    ## specifies the extent to which this purpose predominates.
    attribute degree { data.certainty }?,
    empty
  }
setting =
  
  ## describes one particular setting in which a language interaction takes place. [15.2.3. ]
  element ns2:setting {
    (model.pLike+
     | (model.nameLike.agent | model.dateLike | model.settingPart)*),
    att.global.attributes,
    att.ascribed.attributes,
    empty
  }
locale =
  
  ## contains a brief informal description of the kind of place concerned, for example: a room, a restaurant, a park bench, etc. [15.2.3. ]
  element ns2:locale {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
activity =
  
  ## contains a brief informal description of what a participant in a language interaction is doing other than speaking, if anything. [15.2.3. ]
  element ns2:activity {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
model.entryLike = superEntry | entry | entryFree
att.entryLike.attributes = att.entryLike.attribute.type
att.entryLike.attribute.type =
  
  ## indicates type of entry, in dictionaries with multiple types.
  ## Suggested values include: 1] main; 2] hom(homograph) ; 3] xref(cross reference) ; 4] affix; 5] abbr(abbreviation) ; 6] supplemental; 7] foreign
  [ a:defaultValue = "main" ]
  attribute type {
    
    ## a main entry (default).
    "main"
    | 
      ## (homograph) groups information relating to one homograph within an entry.
      "hom"
    | 
      ## (cross reference) a reduced entry whose only function is to point to another main entry (e.g. for forms of an irregular verb or for variant spellings: was pointing to be, or esthete to aesthete).
      "xref"
    | 
      ## an entry for a prefix, infix, or suffix.
      "affix"
    | 
      ## (abbreviation) an entry for an abbreviation.
      "abbr"
    | 
      ## a supplemental entry (for use in dictionaries which issue supplements to their main work in which they include updated information about entries).
      "supplemental"
    | 
      ## an entry for a foreign word in a monolingual dictionary.
      "foreign"
    | xsd:Name
  }?
att.lexicographic.attributes =
  att.datcat.attributes,
  att.lexicographic.attribute.expand,
  att.lexicographic.attribute.norm,
  att.lexicographic.attribute.split,
  att.lexicographic.attribute.value,
  att.lexicographic.attribute.orig,
  att.lexicographic.attribute.location,
  att.lexicographic.attribute.mergedIn,
  att.lexicographic.attribute.opt
att.lexicographic.attribute.expand =
  
  ## gives an expanded form of information presented more concisely in the dictionary
  attribute expand { text }?
att.lexicographic.attribute.norm =
  
  ## (normalized) gives a normalized form of information given by the source text in a non-normalized form
  attribute norm { data.text }?
att.lexicographic.attribute.split =
  
  ## gives the list of split values for a merged form
  attribute split { data.text }?
att.lexicographic.attribute.value =
  
  ## gives a value which lacks any realization in the printed source text.
  attribute value { data.text }?
att.lexicographic.attribute.orig =
  
  ## (original) gives the original string or is the empty string when the element does not appear in the source text.
  attribute orig { data.text }?
att.lexicographic.attribute.location =
  
  ## provides a reference to an anchor element typically elsewhere in the document, but possibly in another document, indicating the original location of this component.
  attribute location { data.pointer }?
att.lexicographic.attribute.mergedIn =
  
  ## gives a reference to another element, where the original appears as a merged form.
  attribute mergedIn { data.pointer }?
att.lexicographic.attribute.opt =
  
  ## (optional) indicates whether the element is optional or not
  [ a:defaultValue = "false" ] attribute opt { data.truthValue }?
superEntry =
  
  ## groups a sequence of entries within any kind of lexical resource, such as a dictionary or lexicon which function as a single unit, for example a set of homographs. [9.1. ]
  element ns2:superEntry {
    ((form?, entry+) | dictScrap),
    att.global.attributes,
    att.entryLike.attributes,
    att.sortable.attributes,
    empty
  }
entry =
  
  ## contains a single structured entry in any kind of lexical resource, such as a dictionary or lexicon. [9.1.  9.2. ]
  element ns2:entry {
    (hom | sense | model.entryPart.top | model.global | model.ptrLike)+,
    att.global.attributes,
    att.entryLike.attributes,
    att.sortable.attributes,
    empty
  }
entryFree =
  
  ## (unstructured entry) contains a single unstructured entry in any kind of lexical resource, such as a dictionary or lexicon. [9.1.  9.2. ]
  element ns2:entryFree {
    (text
     | model.gLike
     | model.entryPart
     | model.morphLike
     | model.phrase
     | model.inter
     | model.global)*,
    att.global.attributes,
    att.entryLike.attributes,
    att.lexicographic.attributes,
    att.sortable.attributes,
    empty
  }
hom =
  
  ## (homograph) groups information relating to one homograph within an entry. [9.2. ]
  element ns2:hom {
    (sense | model.entryPart.top | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
sense =
  
  ## groups together all information relating to one word sense in a dictionary entry, for example definitions, examples, and translation equivalents. [9.2. ]
  element ns2:sense {
    (text
     | model.gLike
     | sense
     | model.entryPart.top
     | model.phrase
     | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## gives the nesting depth of this sense.
    attribute level { data.count }?,
    empty
  }
dictScrap =
  
  ## (dictionary scrap) encloses a part of a dictionary entry in which other phrase-level dictionary elements are freely combined. [9.1.  9.2. ]
  element ns2:dictScrap {
    (text
     | model.gLike
     | model.entryPart
     | model.morphLike
     | model.phrase
     | model.inter
     | model.global)*,
    att.global.attributes,
    empty
  }
form =
  
  ## (form information group) groups all the information on the written and spoken forms of one headword. [9.3.1. ]
  element ns2:form {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.formPart
     | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## classifies form as simple, compound, etc.
    ## Suggested values include: 1] simple; 2] lemma; 3] variant; 4] compound; 5] derivative; 6] inflected; 7] phrase
    attribute type {
      
      ## single free lexical item
      "simple"
      | 
        ## the headword itself
        "lemma"
      | 
        ## a variant form
        "variant"
      | 
        ## word formed from simple lexical items
        "compound"
      | 
        ## word derived from headword
        "derivative"
      | 
        ## word in other than usual dictionary form
        "inflected"
      | 
        ## multiple-word lexical item
        "phrase"
      | xsd:Name
    }?,
    empty
  }
orth =
  
  ## (orthographic form) gives the orthographic form of a dictionary headword. [9.3.1. ]
  element ns2:orth {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## gives the type of spelling.
    attribute type { data.enumerated }?,
    
    ## gives the extent of the orthographic information provided.
    ## Sample values include: 1] full(full form) ; 2] pref(prefix) ; 3] suff(suffix) ; 4] part(partial) 
    [ a:defaultValue = "full" ] attribute extent { data.enumerated }?,
    empty
  }
pron =
  
  ## (pronunciation) contains the pronunciation(s) of the word. [9.3.1. ]
  element ns2:pron {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## indicates whether the pronunciation is for whole word or part. 
    ## Sample values include: 1] full(full form) ; 2] pref(prefix) ; 3] suff(suffix) ; 4] part(partial) 
    [ a:defaultValue = "full" ] attribute extent { data.enumerated }?,
    
    ## indicates what notation is used for the pronunciation, if more than one occurs in the machine-readable dictionary. 
    attribute notation { data.enumerated }?,
    empty
  }
hyph =
  
  ## (hyphenation) contains a hyphenated form of a dictionary headword, or hyphenation information in some other form. [9.3.1. ]
  element ns2:hyph {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
syll =
  
  ## (syllabification) contains the syllabification of the headword. [9.3.1. ]
  element ns2:syll {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
stress =
  
  ## contains the stress pattern for a dictionary headword, if given separately. [9.3.1. ]
  element ns2:stress { macro.paraContent, att.global.attributes, empty }
gram =
  
  ## (grammatical information) within an entry in a dictionary or a terminological data file, contains grammatical information relating to a term, word, or form. [9.3.2. ]
  element ns2:gram {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## classifies the grammatical information given according to some convenient typology—in the case of terminological information, preferably the dictionary of data element types specified in ISO 12620.
    ## Sample values include: 1] pos(part of speech) ; 2] gen(gender) ; 3] num(number) ; 4] animate; 5] proper
    attribute type { data.enumerated }?,
    empty
  }
gen =
  
  ## (gender) identifies the morphological gender of a lexical item, as given in the dictionary. [9.3.1. ]
  element ns2:gen {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
number =
  
  ## indicates grammatical number associated with a form, as given in a dictionary. [9.3.1.  9.3.2. ]
  element ns2:number {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
case =
  
  ## contains grammatical case information given by a dictionary for a given form. [9.3.1. ]
  element ns2:case {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
per =
  
  ## (person) contains an indication of the grammatical person (1st, 2nd, 3rd, etc.) associated with a given inflected form in a dictionary. [9.3.1. ]
  element ns2:per {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
tns =
  
  ## (tense) indicates the grammatical tense associated with a given inflected form in a dictionary. [9.3.1. ]
  element ns2:tns {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
mood =
  
  ## contains information about the grammatical mood of verbs (e.g. indicative, subjunctive, imperative). [9.3.1. ]
  element ns2:mood {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
iType =
  
  ## (inflectional class) indicates the inflectional class associated with a lexical item. [9.3.1. ]
  element ns2:iType {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## indicates the type of indicator used to specify the inflection class, when it is necessary to distinguish between the usual abbreviated indications (e.g. inv) and other kinds of indicators, such as special codes referring to conjugation patterns, etc.
    ## Sample values include: 1] abbrev; 2] verbTable
    attribute type { data.enumerated }?,
    empty
  }
model.morphLike = gram | gen | number | case | per | tns | mood | iType
model.morphLike_alternation =
  gram | gen | number | case | per | tns | mood | iType
model.morphLike_sequence =
  gram, gen, number, case, per, tns, mood, iType
model.morphLike_sequenceOptional =
  gram?, gen?, number?, case?, per?, tns?, mood?, iType?
model.morphLike_sequenceOptionalRepeatable =
  gram*, gen*, number*, case*, per*, tns*, mood*, iType*
model.morphLike_sequenceRepeatable =
  gram+, gen+, number+, case+, per+, tns+, mood+, iType+
model.gramPart =
  model.morphLike | gramGrp | pos | subc | colloc | usg | lbl
model.formPart =
  form | orth | pron | hyph | syll | stress | model.gramPart
gramGrp =
  
  ## (grammatical information group) groups morpho-syntactic information about a lexical item, e.g. pos, gen, number, case, or iType (inflectional class). [9.3.2. ]
  element ns2:gramGrp {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.gramPart
     | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    att.typed.attributes,
    empty
  }
pos =
  
  ## (part of speech) indicates the part of speech assigned to a dictionary headword such as noun, verb, or adjective.  [9.3.2. ]
  element ns2:pos {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
subc =
  
  ## (subcategorization) contains subcategorization information (transitive/intransitive, countable/non-countable, etc.) [9.3.2. ]
  element ns2:subc {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
colloc =
  
  ## (collocate) contains any sequence of words that co-occur with the headword with significant frequency. [9.3.2. ]
  element ns2:colloc {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    att.typed.attributes,
    empty
  }
def =
  
  ## (definition) contains definition text in a dictionary entry. [9.3.3.1. ]
  element ns2:def {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
etym =
  
  ## (etymology) encloses the etymological information in a dictionary entry. [9.3.4. ]
  element ns2:etym {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | usg
     | lbl
     | def
     | model.morphLike
     | xr
     | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
lang =
  
  ## (language name) contains the name of a language mentioned in etymological or other linguistic discussion. [9.3.4. ]
  element ns2:lang {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    empty
  }
usg =
  
  ## (usage) contains usage information in a dictionary entry. [9.3.5.2. ]
  element ns2:usg {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## classifies the usage information using any convenient typology.
    ## Sample values include: 1] geo(geographic) ; 2] time; 3] dom(domain) ; 4] register(register) ; 5] style; 6] plev(preference level) ; 7] lang(language) ; 8] gram(grammatical) ; 9] syn(synonym) ; 10] hyper(hypernym) ; 11] colloc(collocation) ; 12] comp(complement) ; 13] obj(object) ; 14] subj(subject) ; 15] verb; 16] hint
    attribute type { data.enumerated }?,
    empty
  }
lbl =
  
  ## (label) contains a label for a form, example, translation, or other piece of information, e.g. abbreviation for, contraction of, literally, approximately, synonyms:, etc. [9.3.1.  9.3.3.2.  9.3.5.3. ]
  element ns2:lbl {
    macro.paraContent,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## classifies the label using any convenient typology.
    attribute type { data.enumerated }?,
    empty
  }
xr =
  
  ## (cross-reference phrase) contains a phrase, sentence, or icon referring the reader to some other location in this or another text. [9.3.5.3. ]
  element ns2:xr {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | usg
     | lbl
     | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    
    ## indicates the type of cross reference, using any convenient typology.
    ## Sample values include: 1] syn(synonym) ; 2] etym(etymological) ; 3] cf(compare or consult) ; 4] illus(illustration) 
    attribute type { data.enumerated }?,
    empty
  }
re =
  
  ## (related entry) contains a dictionary entry for a lexical item related to the headword, such as a compound phrase or derived form, embedded inside a larger entry. [9.3.6. ]
  element ns2:re {
    (text
     | model.gLike
     | sense
     | model.entryPart.top
     | model.phrase
     | model.global)*,
    att.global.attributes,
    att.lexicographic.attributes,
    att.typed.attributes,
    empty
  }
model.ptrLike.form = oRef | oVar | pRef | pVar
oRef =
  
  ## (orthographic-form reference) in a dictionary example, indicates a reference to the orthographic form(s) of the headword. [9.4. ]
  element ns2:oRef {
    empty,
    att.global.attributes,
    att.lexicographic.attributes,
    att.pointing.attributes,
    
    ## indicates the kind of typographic modification made to the headword in the reference.
    ## Sample values include: 1] cap(capital) ; 2] noHyph(no hyphen) 
    attribute type { data.enumerated }?,
    empty
  }
oVar =
  
  ## (orthographic-variant reference) in a dictionary example, indicates a reference to variant orthographic form(s) of the headword. [9. ]
  element ns2:oVar {
    (text | model.gLike | oRef)*,
    att.global.attributes,
    att.lexicographic.attributes,
    att.pointing.attributes,
    
    ## indicates the kind of variant involved.
    ## Sample values include: 1] pt(past tense) ; 2] pp(past participle) ; 3] prp(present participle) ; 4] f(feminine) ; 5] pl(plural) 
    attribute type { data.enumerated }?,
    empty
  }
pRef =
  
  ## (pronunciation reference) in a dictionary example, indicates a reference to the pronunciation(s) of the headword. [9.4. ]
  element ns2:pRef {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    att.lexicographic.attributes,
    empty
  }
pVar =
  
  ## (pronunciation-variant reference) in a dictionary example, indicates a reference to variant pronunciation(s) of the headword. [9. ]
  element ns2:pVar {
    (text | model.gLike | pRef)*,
    att.global.attributes,
    att.pointing.attributes,
    att.lexicographic.attributes,
    empty
  }
set =
  
  ## (setting) contains a description of the setting, time, locale, appearance, etc., of the action of a play, typically found in the front matter of a printed performance text (not a stage direction). [7.1. ]
  element ns2:set {
    ((model.headLike | model.global)*, (model.common, model.global*)*),
    att.global.attributes,
    empty
  }
prologue =
  
  ## contains the prologue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. [7.1.2.  7.1. ]
  element ns2:prologue {
    ((model.divTop | model.global)*,
     (model.common, model.global*)+,
     (model.divBottom, model.global*)*),
    att.global.attributes,
    empty
  }
epilogue =
  
  ## contains the epilogue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. [7.1.2.  7.1. ]
  element ns2:epilogue {
    ((model.divTop | model.global)*,
     (model.common, model.global*)+,
     (model.divBottom, model.global*)*),
    att.global.attributes,
    empty
  }
performance =
  
  ## contains a section of front or back matter describing how a dramatic piece is to be performed in general or how it was performed on some specific occasion.  [7.1.3.  7.1. ]
  element ns2:performance {
    ((model.divTop | model.global)*,
     (model.common, model.global*)+,
     (model.divBottom, model.global*)*),
    att.global.attributes,
    empty
  }
castList =
  
  ## (cast list) contains a single cast list or dramatis personae. [7.1.4.  7.1. ]
  element ns2:castList {
    ((model.divTop | model.global)*,
     (model.common, model.global*)*,
     ((castItem | castGroup), model.global*)+,
     (model.common, model.global*)*),
    att.global.attributes,
    empty
  }
castGroup =
  
  ## (cast list grouping) groups one or more individual castItem elements within a cast list. [7.1.4. ]
  element ns2:castGroup {
    ((model.global | model.headLike)*,
     ((castItem | castGroup | roleDesc), model.global*)+,
     (trailer, model.global*)?),
    att.global.attributes,
    empty
  }
castItem =
  
  ## (cast list item) contains a single entry within a cast list, describing either a single role or a list of non-speaking roles. [7.1.4. ]
  element ns2:castItem {
    (text
     | model.gLike
     | model.castItemPart
     | model.phrase
     | model.global)*,
    att.global.attributes,
    
    ## characterizes the cast item. 
    [ a:defaultValue = "role" ]
    attribute type {
      
      ## the item describes a single role. 
      "role"
      | 
        ## the item describes a list of non-speaking roles. 
        "list"
    }?,
    empty
  }
role =
  
  ## contains the name of a dramatic role, as given in a cast list. [7.1.4. ]
  element ns2:role { macro.phraseSeq, att.global.attributes, empty }
roleDesc =
  
  ## (role description) describes a character's role in a drama. [7.1.4. ]
  element ns2:roleDesc { macro.phraseSeq, att.global.attributes, empty }
actor =
  
  ## contains the name of an actor appearing within a cast list. [7.1.4. ]
  element ns2:actor { macro.phraseSeq, att.global.attributes, empty }
spGrp =
  
  ##  (speech group) contains a group of speeches or songs in a performance text presented in a source as constituting a single unit or number. [7.2.3. ]
  element ns2:spGrp {
    (model.headLike*, (model.global | sp | model.stageLike)+),
    att.global.attributes,
    att.typed.attributes,
    att.ascribed.attributes,
    empty
  }
move =
  
  ## (movement) marks the actual entrance or exit of one or more characters on stage. [7.2.4. ]
  element ns2:move {
    empty,
    att.global.attributes,
    att.ascribed.attributes,
    
    ## characterizes the movement, for example as an entrance or exit.
    ## Suggested values include: 1] entrance; 2] exit; 3] onStage
    attribute type {
      
      ## character is entering the stage.
      "entrance"
      | 
        ## character is exiting the stage.
        "exit"
      | 
        ## character moves on stage
        "onStage"
      | xsd:Name
    }?,
    
    ## specifies the direction of a stage movement.
    ## Sample values include: 1] L(left) ; 2] R(right) ; 3] C(center) 
    attribute where {
      list { data.enumerated+ }
    }?,
    
    ## (performance) identifies the performance or performances in which this movement occurred as specified.
    attribute perf {
      list { data.pointer+ }
    }?,
    empty
  }
view =
  
  ## describes the visual context of some part of a screen play in terms of what the spectator sees, generally independent of any dialogue. [7.3.1.  7.3. ]
  element ns2:view { macro.specialPara, att.global.attributes, empty }
camera =
  
  ## describes a particular camera angle or viewpoint in a screen play. [7.3.1.  7.3. ]
  element ns2:camera {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
sound =
  
  ## describes a sound effect or musical sequence specified within a screen play or radio script. [7.3.1.  7.3. ]
  element ns2:sound {
    macro.paraContent,
    att.global.attributes,
    
    ## categorizes the sound in some respect, e.g. as music, special effect, etc.
    attribute type { data.enumerated }?,
    
    ## indicates whether the sound overlaps the surrounding speeches or interrupts them.
    [ a:defaultValue = "unknown" ]
    attribute discrete { data.xTruthValue }?,
    empty
  }
caption =
  
  ## contains the text of a caption or other text displayed as part of a film script or screenplay. [7.3.1.  7.3. ]
  element ns2:caption {
    macro.paraContent, att.global.attributes, empty
  }
tech =
  
  ## (technical stage direction) describes a special-purpose stage direction that is not meant for the actors. [7.3.1. ]
  element ns2:tech {
    macro.paraContent,
    att.global.attributes,
    
    ## categorizes the technical stage direction.
    attribute type {
      
      ## a lighting cue
      "light"
      | 
        ## a sound cue
        "sound"
      | 
        ## a prop cue
        "prop"
      | 
        ## a blocking instruction
        "block"
    }?,
    
    ## (performance) identifies the performance or performances to which this technical direction applies.
    attribute perf { data.enumerated }?,
    empty
  }
table =
  
  ## contains text displayed in tabular form, in rows and columns. [14.1.1. ]
  element ns2:table {
    ((model.headLike | model.global)*,
     ((row, model.global*)+ | (model.graphicLike, model.global*)+),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    
    ## indicates the number of rows in the table.
    attribute rows { data.count }?,
    
    ## (columns) indicates the number of columns in each row of the table.
    attribute cols { data.count }?,
    empty
  }
row =
  
  ## contains one row of a table.  [14.1.1. ]
  element ns2:row {
    cell+, att.global.attributes, att.tableDecoration.attributes, empty
  }
cell =
  
  ## contains one cell of a table.  [14.1.1. ]
  element ns2:cell {
    macro.specialPara,
    att.global.attributes,
    att.tableDecoration.attributes,
    empty
  }
formula =
  
  ## contains a mathematical or other formula. [14.2. ]
  element ns2:formula {
    (text | model.graphicLike | model.hiLike)*,
    att.global.attributes,
    
    ## names the notation used for the content of the element.
    attribute notation { data.enumerated }?,
    empty
  }
notatedMusic =
  
  ## encodes the presence of music notation in a text. Some MEI elements are allowed within. [14.3. ]
  element ns2:notatedMusic {
    (model.labelLike | model.ptrLike | graphic | binaryObject)*,
    (mei | mei_music | mdiv | layer)?,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
figure =
  
  ## groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. ]
  element ns2:figure {
    (model.headLike
     | model.common
     | figDesc
     | model.graphicLike
     | model.global
     | model.divBottom)*,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
figDesc =
  
  ## (description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. ]
  element ns2:figDesc {
    macro.limitedContent, att.global.attributes, empty
  }
g =
  
  ## (character or glyph) represents a glyph, or a non-standard character. [5. ]
  element ns2:g {
    text,
    att.global.attributes,
    att.typed.attributes,
    
    ## points to a description of the character or glyph intended.
    attribute ref { data.pointer }?,
    empty
  }
char =
  
  ## (character) provides descriptive information about a character.  [5.2. ]
  element ns2:char {
    (charName?,
     model.descLike*,
     charProp*,
     mapping*,
     figure*,
     model.graphicLike*,
     model.noteLike*),
    att.global.attributes,
    empty
  }
charName =
  
  ## (character name) contains the name of a character, expressed following Unicode conventions.  [5.2. ]
  element ns2:charName { text, att.global.attributes, empty }
charProp =
  
  ## (character property) provides a name and value for some property of the parent character or glyph.  [5.2. ]
  element ns2:charProp {
    ((unicodeName | localName), value),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
charDecl =
  
  ## (character declarations) provides information about nonstandard characters and glyphs.  [5.2. ]
  element ns2:charDecl {
    (desc?, (char | glyph)+),
    att.global.attributes,
    empty
  }
glyph =
  
  ## (character glyph) provides descriptive information about a character glyph.  [5.2. ]
  element ns2:glyph {
    (glyphName?,
     model.descLike*,
     charProp*,
     mapping*,
     figure*,
     model.graphicLike*,
     model.noteLike*),
    att.global.attributes,
    empty
  }
glyphName =
  
  ## (character glyph name) contains the name of a glyph, expressed following Unicode conventions for character names.  [5.2. ]
  element ns2:glyphName { text, att.global.attributes, empty }
localName =
  
  ## (locally-defined property name) contains a locally defined name for some property.  [5.2.1. ]
  element ns2:localName { text, att.global.attributes, empty }
mapping =
  
  ## (character mapping) contains one or more characters which are related to the parent character or glyph in some respect, as specified by the type attribute. [5.2. ]
  element ns2:mapping {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
unicodeName =
  
  ## (unicode property name) contains the name of a registered Unicode normative or informative property.  [5.2.1. ]
  element ns2:unicodeName {
    text,
    att.global.attributes,
    
    ## specifies the version number of the Unicode Standard in which this property name is defined.
    attribute version { data.version }?,
    empty
  }
value =
  
  ## (value) contains a single value for some property, attribute, or other analysis. [5.2.1. ]
  element ns2:value { macro.xtext, att.global.attributes, empty }
teiHeader =
  
  ## (TEI header) supplies the descriptive and declarative information making up an electronic title page prefixed to every TEI-conformant text. [2.1.1.  15.1. ]
  element ns2:teiHeader {
    (fileDesc, model.teiHeaderPart*, revisionDesc?),
    att.global.attributes,
    
    ## specifies the kind of document to which the header is attached, for example whether it is a corpus or individual text.
    ## Sample values include: 1] text; 2] corpus
    [ a:defaultValue = "text" ] attribute type { data.enumerated }?,
    empty
  }
fileDesc =
  
  ## (file description) contains a full bibliographic description of an electronic file. [2.2.  2.1.1. ]
  element ns2:fileDesc {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt?,
      notesStmt?),
     sourceDesc+),
    att.global.attributes,
    empty
  }
titleStmt =
  
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1.  2.2. ]
  element ns2:titleStmt {
    (title+, model.respLike*), att.global.attributes, empty
  }
sponsor =
  
  ## specifies the name of a sponsoring organization or institution. [2.2.1. ]
  element ns2:sponsor {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
funder =
  
  ## (funding body) specifies the name of an individual, institution, or organization responsible for the funding of a project or text. [2.2.1. ]
  element ns2:funder {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
principal =
  
  ## (principal researcher) supplies the name of the principal researcher responsible for the creation of an electronic text. [2.2.1. ]
  element ns2:principal {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
editionStmt =
  
  ## (edition statement) groups information relating to one edition of a text. [2.2.2.  2.2. ]
  element ns2:editionStmt {
    (model.pLike+ | (edition, model.respLike*)),
    att.global.attributes,
    empty
  }
edition =
  
  ## (edition) describes the particularities of one edition of a text. [2.2.2. ]
  element ns2:edition { macro.phraseSeq, att.global.attributes, empty }
extent =
  
  ## describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. [2.2.3.  2.2.  3.11.2.4.  10.7.1. ]
  element ns2:extent { macro.phraseSeq, att.global.attributes, empty }
publicationStmt =
  
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text.  [2.2.4.  2.2. ]
  element ns2:publicationStmt {
    (model.pLike+ | model.publicationStmtPart+),
    att.global.attributes,
    empty
  }
distributor =
  
  ## supplies the name of a person or other agency responsible for the distribution of a text. [2.2.4. ]
  element ns2:distributor {
    macro.phraseSeq, att.global.attributes, empty
  }
authority =
  
  ## (release authority) supplies the name of a person or other agency responsible for making a work available, other than a publisher or distributor. [2.2.4. ]
  element ns2:authority {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
idno =
  
  ## (identifier) supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. [2.2.4.  2.2.5.  3.11.2.4. ]
  element ns2:idno {
    (text | model.gLike | idno)*,
    att.global.attributes,
    att.sortable.attributes,
    
    ## categorizes the identifier, for example as an ISBN, Social Security number, etc. 
    attribute type { data.enumerated }?,
    empty
  }
availability =
  
  ## supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. [2.2.4. ]
  element ns2:availability {
    (model.availabilityPart | model.pLike)+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## supplies a code identifying the current availability of the text. 
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text is freely available. 
      "free"
      | 
        ## the status of the text is unknown. 
        "unknown"
      | 
        ## the text is not freely available. 
        "restricted"
    }?,
    empty
  }
licence =
  
  ## contains information about a licence or other legal agreement applicable to the text. [2.2.4. ]
  element ns2:licence {
    macro.specialPara,
    att.global.attributes,
    att.pointing.attributes,
    att.datable.attributes,
    empty
  }
seriesStmt =
  
  ## (series statement) groups information about the series, if any, to which a publication belongs. [2.2.5.  2.2. ]
  element ns2:seriesStmt {
    (model.pLike+
     | (title+, (editor | respStmt)*, (idno | biblScope)*)),
    att.global.attributes,
    empty
  }
notesStmt =
  
  ## (notes statement) collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. [2.2.6.  2.2. ]
  element ns2:notesStmt {
    (model.noteLike | relatedItem)+, att.global.attributes, empty
  }
sourceDesc =
  
  ## (source description) describes the source from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. ]
  element ns2:sourceDesc {
    (model.pLike+
     | (model.biblLike | model.sourceDescPart | model.listLike)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
biblFull =
  
  ## (fully-structured bibliographic citation) contains a fully-structured bibliographic citation, in which all components of the TEI file description are present. [3.11.1.  2.2.  2.2.7.  15.3.2. ]
  element ns2:biblFull {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt?,
      notesStmt?),
     sourceDesc*),
    att.global.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
encodingDesc =
  
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3.  2.1.1. ]
  element ns2:encodingDesc {
    (model.encodingDescPart | model.pLike)+,
    att.global.attributes,
    empty
  }
projectDesc =
  
  ## (project description) describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. [2.3.1.  2.3.  15.3.2. ]
  element ns2:projectDesc {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
samplingDecl =
  
  ## (sampling declaration) contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. [2.3.2.  2.3.  15.3.2. ]
  element ns2:samplingDecl {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
editorialDecl =
  
  ## (editorial practice declaration) provides details of editorial principles and practices applied during the encoding of a text. [2.3.3.  2.3.  15.3.2. ]
  element ns2:editorialDecl {
    (model.pLike | model.editorialDeclPart)+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
correction =
  
  ## (correction principles) states how and under what circumstances corrections have been made in the text. [2.3.3.  15.3.2. ]
  element ns2:correction {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## indicates the degree of correction applied to the text. 
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text has been thoroughly checked and proofread. 
      "high"
      | 
        ## the text has been checked at least once. 
        "medium"
      | 
        ## the text has not been checked. 
        "low"
      | 
        ## the correction status of the text is unknown. 
        "unknown"
    }?,
    
    ## indicates the method adopted to indicate corrections within the text. 
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## corrections have been made silently 
      "silent"
      | 
        ## corrections have been represented using markup
        "markup"
    }?,
    empty
  }
normalization =
  
  ## indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. [2.3.3.  15.3.2. ]
  element ns2:normalization {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## indicates the authority for any normalization carried out. 
    attribute source { data.pointer }?,
    
    ## indicates the method adopted to indicate normalizations within the text. 
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## normalization made silently 
      "silent"
      | 
        ## normalization represented using markup 
        "markup"
    }?,
    empty
  }
quotation =
  
  ## specifies editorial practice adopted with respect to quotation marks in the original.  [2.3.3.  15.3.2. ]
  element ns2:quotation {
    (model.pLike*)
    >> sch:pattern [
         id = "quotation-constraint-quotationContents"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:quotation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@marks) and not (tei:p)"
             "\x{a}" ~
             "On "
             sch:name [ ]
             ", either the @marks attribute should be used, or a paragraph of description provided"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.declarable.attributes,
    
    ## (quotation marks) indicates whether or not quotation marks have been retained as content within the text. 
    attribute marks {
      
      ## no quotation marks have been retained 
      "none"
      | 
        ## some quotation marks have been retained 
        "some"
      | 
        ## all quotation marks have been retained 
        "all"
    }?,
    
    ## specifies how quotation marks are indicated within the text.
    [ a:defaultValue = "unknown" ] attribute form { data.enumerated }?,
    empty
  }
hyphenation =
  
  ## summarizes the way in which hyphenation in a source text has been treated in an encoded version of it. [2.3.3.  15.3.2. ]
  element ns2:hyphenation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## (end-of-line) indicates whether or not end-of-line hyphenation has been retained in a text.
    [ a:defaultValue = "some" ]
    attribute eol {
      
      ## all end-of-line hyphenation has been retained, even though the lineation of the original may not have been. 
      "all"
      | 
        ## end-of-line hyphenation has been retained in some cases. 
        "some"
      | 
        ## all soft end-of-line hyphenation has been removed: any remaining end-od-line hyphenation should be retained. 
        "hard"
      | 
        ## all end-of-line hyphenation has been removed: any remaining hyphenation occurred within the line. 
        "none"
    }?,
    empty
  }
segmentation =
  
  ## describes the principles according to which the text has been segmented, for example into sentences, tone-units, graphemic strata, etc. [2.3.3.  15.3.2. ]
  element ns2:segmentation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
stdVals =
  
  ## (standard values) specifies the format used when standardized date or number values are supplied. [2.3.3.  15.3.2. ]
  element ns2:stdVals {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
interpretation =
  
  ## describes the scope of any analytic or interpretive information added to the text in addition to the transcription.  [2.3.3. ]
  element ns2:interpretation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
tagsDecl =
  
  ## (tagging declaration) provides detailed information about the tagging applied to a document. [2.3.4.  2.3. ]
  element ns2:tagsDecl {
    (rendition*, \namespace*), att.global.attributes, empty
  }
tagUsage =
  
  ## supplies information about the usage of a specific element within a text.  [2.3.4. ]
  element ns2:tagUsage {
    macro.limitedContent,
    att.global.attributes,
    
    ## (element name) specifies the name (generic identifier) of the element indicated by the tag.
    attribute gi { data.name },
    
    ## specifies the number of occurrences of this element within the text.
    attribute occurs { data.count }?,
    
    ## (with unique identifier) specifies the number of occurrences of this element within the text which bear a distinct value for the global xml:id attribute.
    attribute withId { data.count }?,
    
    ## specifies the identifier of a rendition element which defines how this element was rendered in the source text.
    attribute render {
      list { data.pointer+ }
    }?,
    empty
  }
\namespace =
  
  ## supplies the formal name of the namespace to which the elements documented by its children belong.  [2.3.4. ]
  element ns2:namespace {
    tagUsage+,
    att.global.attributes,
    
    ## specifies the full formal name of the namespace concerned.
    attribute name { data.namespace },
    empty
  }
rendition =
  
  ## supplies information about the rendition or appearance of one or more elements in the source text. [2.3.4. ]
  element ns2:rendition {
    macro.limitedContent,
    att.global.attributes,
    att.styleDef.attributes,
    
    ## where CSS is used, provides a way of defining pseudo-elements, that is, styling rules applicable to specific sub-portions of an element.
    ## Sample values include: 1] first-line; 2] first-letter; 3] before; 4] after
    attribute scope { data.enumerated }?,
    empty
  }
styleDefDecl =
  
  ##  (style definition language declaration) specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. [2.3.5. ]
  element ns2:styleDefDecl {
    model.pLike*,
    att.global.attributes,
    att.declarable.attributes,
    att.styleDef.attributes,
    empty
  }
refsDecl =
  
  ## (references declaration) specifies how canonical references are constructed for this text. [2.3.6.3.  2.3.  2.3.6. ]
  element ns2:refsDecl {
    (model.pLike+ | cRefPattern+ | refState+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
cRefPattern =
  
  ## (canonical reference pattern) specifies an expression and replacement pattern for transforming a canonical reference into a URI.  [2.3.6.3.  2.3.6.  2.3.6.2. ]
  element ns2:cRefPattern {
    model.pLike*,
    att.global.attributes,
    att.patternReplacement.attributes,
    empty
  }
att.patternReplacement.attributes =
  att.patternReplacement.attribute.matchPattern,
  att.patternReplacement.attribute.replacementPattern
att.patternReplacement.attribute.matchPattern =
  
  ## specifies a regular expression against which the values of other attributes can be matched.
  attribute matchPattern { data.pattern }
att.patternReplacement.attribute.replacementPattern =
  
  ## specifies a replacement pattern which, once subpattern substitution has been performed, provides a URI.
  attribute replacementPattern { data.replacement }
prefixDef =
  
  ##  (prefixing scheme used in data.pointer values) defines a prefixing scheme used in data.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. [16.2.3. ]
  element ns2:prefixDef {
    model.pLike*,
    att.global.attributes,
    att.patternReplacement.attributes,
    
    ## supplies the identifier which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.
    attribute ident { data.name },
    empty
  }
listPrefixDef =
  
  ##  (list of prefix definitions) contains a list of definitions of prefixing schemes used in data.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. [16.2.3. ]
  element ns2:listPrefixDef {
    (prefixDef | listPrefixDef)+, att.global.attributes, empty
  }
refState =
  
  ## (reference state) specifies one component of a canonical reference defined by the milestone method. [2.3.6.3.  2.3.6. ]
  element ns2:refState {
    empty,
    att.global.attributes,
    att.milestoneUnit.attributes,
    att.edition.attributes,
    
    ## specifies the fixed length of the reference component.
    attribute length { data.count }?,
    
    ## (delimiter) supplies a delimiting string following the reference component.
    attribute delim { data.text }?,
    empty
  }
classDecl =
  
  ## (classification declarations) contains one or more taxonomies defining any classificatory codes used elsewhere in the text. [2.3.7.  2.3. ]
  element ns2:classDecl { taxonomy+, att.global.attributes, empty }
taxonomy =
  
  ## defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy. [2.3.7. ]
  element ns2:taxonomy {
    ((model.glossLike | model.descLike)*
     | category+
     | (model.biblLike, category*)),
    att.global.attributes,
    empty
  }
category =
  
  ## contains an individual descriptive category, possibly nested within a superordinate category, within a user-defined taxonomy. [2.3.7. ]
  element ns2:category {
    ((catDesc+ | (model.descLike | model.glossLike)*),
     category*),
    att.global.attributes,
    empty
  }
catDesc =
  
  ## (category description) describes some category within a taxonomy or text typology, either in the form of a brief prose description or in terms of the situational parameters used by the TEI formal textDesc. [2.3.7. ]
  element ns2:catDesc {
    (text | model.limitedPhrase | model.catDescPart)*,
    att.global.attributes,
    empty
  }
geoDecl =
  
  ## (geographic coordinates declaration) documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. [2.3.8. ]
  element ns2:geoDecl {
    macro.phraseSeq,
    att.global.attributes,
    att.declarable.attributes,
    
    ## supplies a commonly used code name for the datum employed.
    ## Suggested values include: 1] WGS84(World Geodetic System) ; 2] MGRS(Military Grid Reference System) ; 3] OSGB36(ordnance survey great britain) ; 4] ED50(European Datum coordinate system) 
    [ a:defaultValue = "WGS84" ]
    attribute datum {
      
      ## (World Geodetic System) a pair of numbers to be interpreted as latitude followed by longitude according to the World Geodetic System.
      "WGS84"
      | 
        ## (Military Grid Reference System) the values supplied are geospatial entity object codes, based on
        "MGRS"
      | 
        ## (ordnance survey great britain) the value supplied is to be interpreted as a British National Grid Reference.
        "OSGB36"
      | 
        ## (European Datum coordinate system) the value supplied is to be interpreted as latitude followed by longitude according to the European Datum coordinate system.
        "ED50"
      | xsd:Name
    }?,
    empty
  }
appInfo =
  
  ## (application information) records information about an application which has edited the TEI file.  [2.3.10. ]
  element ns2:appInfo {
    model.applicationLike+, att.global.attributes, empty
  }
application =
  
  ## provides information about an application which has acted upon the document. [2.3.10. ]
  element ns2:application {
    (model.labelLike+, (model.ptrLike* | model.pLike*)),
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ## supplies an identifier for the application, independent of its version number or display name.
    attribute ident { data.name },
    
    ## supplies a version number for the application, independent of its identifier or display name.
    attribute version { data.versionNumber },
    empty
  }
profileDesc =
  
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. [2.4.  2.1.1. ]
  element ns2:profileDesc {
    model.profileDescPart*, att.global.attributes, empty
  }
handNote =
  
  ## (note on hand) describes a particular style or hand distinguished within a manuscript. [10.7.2. ]
  element ns2:handNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
creation =
  
  ## contains information about the creation of a text. [2.4.1.  2.4. ]
  element ns2:creation {
    (text | model.limitedPhrase | listChange)*,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
langUsage =
  
  ## (language usage) describes the languages, sublanguages, registers, dialects, etc. represented within a text. [2.4.2.  2.4.  15.3.2. ]
  element ns2:langUsage {
    language+, att.global.attributes, att.declarable.attributes, empty
  }
language =
  
  ## characterizes a single language or sublanguage used within a text. [2.4.2. ]
  element ns2:language {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## (identifier) Supplies a language code constructed as defined in BCP 47 which is used to identify the language documented by this element, and which is referenced by the global xml:lang attribute.
    attribute ident { data.language },
    
    ## specifies the approximate percentage (by volume) of the text which uses this language. 
    attribute usage {
      xsd:nonNegativeInteger { maxInclusive = "100" }
    }?,
    empty
  }
textClass =
  
  ## (text classification) groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. [2.4.3. ]
  element ns2:textClass {
    (classCode | catRef | keywords)*,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
keywords =
  
  ## contains a list of keywords or phrases identifying the topic or nature of a text. [2.4.3. ]
  element ns2:keywords {
    (term+ | \list),
    att.global.attributes,
    
    ## identifies the controlled vocabulary within which the set of keywords concerned is defined. 
    attribute scheme { data.pointer }?,
    empty
  }
classCode =
  
  ## (classification code) contains the classification code used for this text in some standard classification system. [2.4.3. ]
  element ns2:classCode {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## identifies the classification system or taxonomy in use.
    attribute scheme { data.pointer },
    empty
  }
catRef =
  
  ## (category reference) specifies one or more defined categories within some taxonomy or text typology. [2.4.3. ]
  element ns2:catRef {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifies the classification scheme within which the set of categories concerned is defined 
    attribute scheme { data.pointer }?,
    empty
  }
calendarDesc =
  
  ## (calendar description) contains a description of the calendar system used in any dating expression found in the text. [2.4.  2.4.4. ]
  element ns2:calendarDesc { calendar+, att.global.attributes, empty }
calendar =
  
  ## describes a calendar or dating system used in a dating formula in the text. [2.4.4. ]
  element ns2:calendar {
    model.pLike+, att.global.attributes, att.pointing.attributes, empty
  }
revisionDesc =
  
  ## (revision description) summarizes the revision history for a file. [2.5.  2.1.1. ]
  element ns2:revisionDesc {
    (\list | listChange | change+),
    att.global.attributes,
    att.docStatus.attributes,
    empty
  }
change =
  
  ## documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. [2.5.  2.4.1. ]
  element ns2:change {
    macro.specialPara,
    att.ascribed.attributes,
    att.datable.attributes,
    att.docStatus.attributes,
    att.global.attributes,
    att.typed.attributes,
    
    ## points to one or more elements that belong to this change.
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
typeNote =
  
  ## describes a particular font or other significant typographic feature distinguished within the description of a printed resource. [10.7.2. ]
  element ns2:typeNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
scriptNote =
  
  ## describes a particular script distinguished within the description of a manuscript or similar resource. [10.7.2. ]
  element ns2:scriptNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
listChange =
  
  ## groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text.  [2.5.  11.7. ]
  element ns2:listChange {
    (listChange | change)+,
    att.global.attributes,
    att.sortable.attributes,
    
    ## indicates whether the ordering of its child change elements is to be considered significant or not
    [ a:defaultValue = "true" ] attribute ordered { data.truthValue }?,
    empty
  }
fsdDecl =
  
  ## (feature system declaration) provides a feature system declaration comprising one or more feature structure declarations or feature structure declaration links. [18.11. ]
  element ns2:fsdDecl {
    (fsDecl | fsdLink)+, att.global.attributes, empty
  }
fsDecl =
  
  ## (feature structure declaration) declares one type of feature structure. [18.11. ]
  element ns2:fsDecl {
    (fsDescr?, fDecl+, fsConstraints?),
    att.global.attributes,
    
    ## gives a name for the type of feature structure being declared.
    attribute type { data.enumerated },
    
    ## gives the name of one or more typed feature structures from which this type inherits feature specifications and constraints; if this type includes a feature specification with the same name as that of any of those specified by this attribute, or if more than one specification of the same name is inherited, then the set of possible values is defined by unification. Similarly, the set of constraints applicable is derived by combining those specified explicitly within this element with those implied by the baseTypes attribute. When no baseTypes attribute is specified, no feature specification or constraint is inherited.
    attribute baseTypes {
      list { data.name+ }
    }?,
    empty
  }
fsDescr =
  
  ## (feature system description (in FSD)) describes in prose what is represented by the type of feature structure declared in the enclosing fsDecl. [18.11. ]
  element ns2:fsDescr {
    macro.limitedContent, att.global.attributes, empty
  }
fsdLink =
  
  ## (feature structure declaration link) associates the name of a typed feature structure with a feature structure declaration for it. [18.11. ]
  element ns2:fsdLink {
    empty,
    att.global.attributes,
    
    ## identifies the type of feature structure to be documented; this will be the value of the type attribute on at least one feature structure.
    attribute type { data.enumerated },
    
    ## supplies a pointer to a feature structure declaration (fsDecl) element within the current document or elsewhere.
    attribute target { data.pointer },
    empty
  }
fDecl =
  
  ## (feature declaration) declares a single feature, specifying its name, organization, range of allowed values, and optionally its default value. [18.11. ]
  element ns2:fDecl {
    (fDescr?, vRange, vDefault?),
    att.global.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), indicating the name of the feature being declared; matches the name attribute of f elements in the text.
    attribute name { data.name },
    
    ## indicates whether or not the value of this feature may be present.
    [ a:defaultValue = "true" ] attribute optional { data.truthValue }?,
    empty
  }
fDescr =
  
  ## (feature description (in FSD)) describes in prose what is represented by the feature being declared and its values. [18.11. ]
  element ns2:fDescr {
    macro.limitedContent, att.global.attributes, empty
  }
vRange =
  
  ## (value range) defines the range of allowed values for a feature, in the form of an fs, vAlt, or primitive value; for the value of an f to be valid, it must be subsumed by the specified range; if the f contains multiple values (as sanctioned by the org attribute), then each value must be subsumed by the vRange. [18.11. ]
  element ns2:vRange { model.featureVal, att.global.attributes, empty }
vDefault =
  
  ## (value default) declares the default value to be supplied when a feature structure does not contain an instance of f for this name; if unconditional, it is specified as one (or, depending on the value of the org attribute of the enclosing fDecl) more fs elements or primitive values; if conditional, it is specified as one or more if elements; if no default is specified, or no condition matches, the value none is assumed. [18.11. ]
  element ns2:vDefault {
    (model.featureVal+ | if+), att.global.attributes, empty
  }
if =
  
  ## defines a conditional default value for a feature; the condition is specified as a feature structure, and is met if it subsumes the feature structure in the text for which a default value is sought. [18.11. ]
  element ns2:if {
    ((fs | f), then, model.featureVal),
    att.global.attributes,
    empty
  }
then =
  
  ## separates the condition from the default in an if, or the antecedent and the consequent in a cond element. [18.11. ]
  element ns2:then { empty, att.global.attributes, empty }
fsConstraints =
  
  ## (feature-structure constraints) specifies constraints on the content of valid feature structures. [18.11. ]
  element ns2:fsConstraints {
    (cond | bicond)*, att.global.attributes, empty
  }
cond =
  
  ## (conditional feature-structure constraint) defines a conditional feature-structure constraint; the consequent and the antecedent are specified as feature structures or feature-structure collections; the constraint is satisfied if both the antecedent and the consequent subsume a given feature structure, or if the antecedent does not. [18.11. ]
  element ns2:cond {
    ((fs | f), then, (fs | f)),
    att.global.attributes,
    empty
  }
bicond =
  
  ## (bi-conditional feature-structure constraint) defines a biconditional feature-structure constraint; both consequent and antecedent are specified as feature structures or groups of feature structures; the constraint is satisfied if both subsume a given feature structure, or if both do not. [18.11. ]
  element ns2:bicond {
    ((fs | f), iff, (fs | f)),
    att.global.attributes,
    empty
  }
iff =
  
  ## (if and only if) separates the condition from the consequence in a bicond element. [18.11. ]
  element ns2:iff { empty, att.global.attributes, empty }
fs =
  
  ## (feature structure) represents a feature structure, that is, a collection of feature-value pairs organized as a structural unit. [18.2. ]
  element ns2:fs {
    f*,
    att.global.attributes,
    att.datcat.attributes,
    
    ## specifies the type of the feature structure.
    attribute type { data.enumerated }?,
    
    ## (features) references the feature-value specifications making up this feature structure.
    attribute feats {
      list { data.pointer+ }
    }?,
    empty
  }
f =
  
  ## (feature) represents a feature value specification, that is, the association of a name with a value of any of several different types. [18.2. ]
  element ns2:f {
    ((text | model.gLike | model.featureVal)*)
    >> sch:pattern [
         id = "f-constraint-fValConstraints"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:fVal"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(tei:* and text)"
             " A feature value cannot\x{a}" ~
             "    contain both text and element content"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "f-constraint-fValConstraints"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:fVal"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:*)>1"
             " A feature value can contain\x{a}" ~
             "    only one child element"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.datcat.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), providing a name for the feature.
    attribute name { data.name },
    
    ## (feature value) references any element which can be used to represent the value of a feature.
    attribute fVal { data.pointer }?,
    empty
  }
binary =
  
  ## (binary value) represents the value part of a feature-value specification which can contain either of exactly two possible values. [18.2. ]
  element ns2:binary {
    empty,
    att.global.attributes,
    att.datcat.attributes,
    
    ## supplies a binary value.
    attribute value { data.truthValue },
    empty
  }
symbol =
  
  ## (symbolic value) represents the value part of a feature-value specification which contains one of a finite list of symbols. [18.3. ]
  element ns2:symbol {
    empty,
    att.global.attributes,
    att.datcat.attributes,
    
    ## supplies the symbolic value for the feature, one of a finite list that may be specified in a feature declaration.
    attribute value { data.word },
    empty
  }
numeric =
  
  ## (numeric value) represents the value part of a feature-value specification which contains a numeric value or range. [18.3. ]
  element ns2:numeric {
    empty,
    att.global.attributes,
    att.datcat.attributes,
    
    ## supplies a lower bound for the numeric value represented, and also (if max is not supplied) its upper bound.
    attribute value { data.numeric },
    
    ## supplies an upper bound for the numeric value represented.
    attribute max { data.numeric }?,
    
    ## specifies whether the value represented should be truncated to give an integer value.
    attribute trunc { data.truthValue }?,
    empty
  }
\string =
  
  ## (string value) represents the value part of a feature-value specification which contains a string. [18.3. ]
  element ns2:string {
    macro.xtext, att.global.attributes, att.datcat.attributes, empty
  }
vLabel =
  
  ## (value label) represents the value part of a feature-value specification which appears at more than one point in a feature structure. [18.6. ]
  element ns2:vLabel {
    model.featureVal?,
    att.global.attributes,
    
    ## supplies a name for the sharing point.
    attribute name { data.word },
    empty
  }
vColl =
  
  ## (collection of values) represents the value part of a feature-value specification which contains multiple values organized as a set, bag, or list. [18.7. ]
  element ns2:vColl {
    (fs | model.featureVal.single)*,
    att.global.attributes,
    
    ## (organization) indicates organization of given value or values as set, bag or list.
    attribute org {
      
      ## indicates that the given values are organized as a set. 
      "set"
      | 
        ## indicates that the given values are organized as a bag (multiset). 
        "bag"
      | 
        ## indicates that the given values are organized as a list.
        "list"
    }?,
    empty
  }
\default =
  
  ## (default feature value) represents the value part of a feature-value specification which contains a defaulted value. [18.9. ]
  element ns2:default { empty, att.global.attributes, empty }
vAlt =
  
  ## (value alternation) represents the value part of a feature-value specification which contains a set of values, only one of which can be valid. [18.8.1. ]
  element ns2:vAlt {
    (model.featureVal, model.featureVal+), att.global.attributes, empty
  }
vNot =
  
  ## (value negation) represents a feature value which is the negation of its content. [18.8.2. ]
  element ns2:vNot { model.featureVal, att.global.attributes, empty }
vMerge =
  
  ## (merged collection of values) represents a feature value which is the result of merging together the feature values contained by its children, using the organization specified by the org attribute. [18.8.3. ]
  element ns2:vMerge {
    model.featureVal+,
    att.global.attributes,
    
    ## indicates the organization of the resulting merged values as set, bag or list.
    attribute org {
      
      ## indicates that the resulting values are organized as a set.
      "set"
      | 
        ## indicates that the resulting values are organized as a bag (multiset). 
        "bag"
      | 
        ## indicates that the resulting values are organized as a list.
        "list"
    }?,
    empty
  }
fLib =
  
  ## (feature library) assembles a library of feature elements. [18.4. ]
  element ns2:fLib { f+, att.global.attributes, empty }
fvLib =
  
  ## (feature-value library) assembles a library of reusable feature value elements (including complete feature structures). [18.4. ]
  element ns2:fvLib { model.featureVal*, att.global.attributes, empty }
link =
  
  ## defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements. [16.1. ]
  element ns2:link {
    empty
    >> sch:pattern [
         id = "link-constraint-linkTargets1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @targets"
             "You may not supply both @target and @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "link-constraint-linkTargets2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@target) and not(@targets)"
             "You must supply either @target or @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "link-constraint-linkTargets3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@targets,' ') or contains(@target,' ')"
             "You must supply at least two values for  @target or @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    
    ## specifies the identifiers of the elements or passages to be linked or associated. 
    attribute targets {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    empty
  }
linkGrp =
  
  ## (link group) defines a collection of associations or hypertextual links. [16.1. ]
  element ns2:linkGrp {
    (link | ptr)+,
    att.global.attributes,
    att.pointing.group.attributes,
    empty
  }
ab =
  
  ## (anonymous block) contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. [16.3. ]
  element ns2:ab {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.fragmentable.attributes,
    empty
  }
anchor =
  
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element. [8.4.2.  16.4. ]
  element ns2:anchor {
    empty, att.global.attributes, att.typed.attributes, empty
  }
seg =
  
  ## (arbitrary segment) represents any segmentation of text below the chunk level. [16.3.  6.2.  7.2.5. ]
  element ns2:seg {
    macro.paraContent,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    att.responsibility.attributes,
    empty
  }
when =
  
  ## indicates a point in time either relative to other elements in the same timeline tag, or absolutely. [16.5.2. ]
  element ns2:when {
    empty,
    att.global.attributes,
    
    ## supplies an absolute value for the time.
    attribute absolute { data.temporal.w3c }?,
    
    ## specifies the unit of time in which the interval value is expressed, if this is not inherited from the parent timeline.
    ## Suggested values include: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies the numeric portion of a time interval
    attribute interval { data.interval }?,
    
    ## identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point.
    attribute since { data.pointer }?,
    empty
  }
timeline =
  
  ## (timeline) provides a set of ordered points in time which can be linked to elements of a spoken text to create a temporal alignment of that text. [16.5.2. ]
  element ns2:timeline {
    when+,
    att.global.attributes,
    
    ## designates the origin of the timeline, i.e. the time at which it begins.
    attribute origin { data.pointer }?,
    
    ## specifies the unit of time corresponding to the interval value of the timeline or of its constituent points in time.
    ## Suggested values include: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies the numeric portion of a time interval
    attribute interval { data.interval }?,
    empty
  }
join =
  
  ## identifies a possibly fragmented segment of text, by pointing at the possibly discontiguous elements which compose it. [16.7. ]
  element ns2:join {
    ((model.descLike | model.certLike)*)
    >> sch:pattern [
         id = "join-constraint-joinTargets1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @targets"
             "\x{a}" ~
             "You may not supply both @target and @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "join-constraint-joinTargets2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@target) and not(@targets)"
             "\x{a}" ~
             "You must supply either @target or @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "join-constraint-joinTargets3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@target,' ')"
             "\x{a}" ~
             "You must supply at least two values for @target on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    
    ## specifies the identifiers of the elements or passages to be joined into a virtual element.
    attribute targets {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    
    ## specifies the name of an element which this aggregation may be understood to represent.
    attribute result { data.name }?,
    
    ## indicates whether the targets to be joined include the entire element indicated (the entire subtree including its root), or just the children of the target (the branches of the subtree).
    [ a:defaultValue = "root" ]
    attribute scope {
      
      ## the rooted subtrees indicated by the targets attribute are joined, each subtree become a child of the virtual element created by the join
      "root"
      | 
        ## the children of the subtrees indicated by the targets attribute become the children of the virtual element (i.e. the roots of the subtrees are discarded)
        "branches"
    }?,
    empty
  }
joinGrp =
  
  ## (join group) groups a collection of join elements and possibly pointers. [16.7. ]
  element ns2:joinGrp {
    (model.glossLike*, (join | ptr)+),
    att.global.attributes,
    att.pointing.group.attributes,
    
    ## describes the result of the joins gathered in this collection.
    attribute result { data.name }?,
    empty
  }
alt =
  
  ## (alternation) identifies an alternation or a set of choices among elements or passages. [16.8. ]
  element ns2:alt {
    empty
    >> sch:pattern [
         id = "alt-constraint-altTargets1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:alt"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @targets"
             "You may not supply both \x{a}" ~
             "	@target and @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "alt-constraint-altTargets2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:alt"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@target) and not(@targets)"
             "You must\x{a}" ~
             "	supply either @target or @targets on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attribute.targetLang,
    att.pointing.attribute.evaluate,
    att.typed.attributes,
    
    ## specifies the destination of the reference by supplying one or more URI References
    attribute target {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    
    ## specifies the identifiers of the alternative elements or passages.
    attribute targets {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    
    ## If mode is , each weight states the probability that the corresponding alternative occurs. If mode is incl each weight states the probability that the corresponding alternative occurs given that at least one of the other alternatives occurs.
    attribute weights {
      list { data.probability, data.probability, data.probability* }
    }?,
    empty
  }
altGrp =
  
  ## (alternation group) groups a collection of alt elements and possibly pointers. [16.8. ]
  element ns2:altGrp {
    (alt | ptr)*,
    att.global.attributes,
    att.pointing.group.attributes,
    
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    [ a:defaultValue = "excl" ]
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    empty
  }
att.global.linking.attributes =
  att.global.linking.attribute.corresp,
  att.global.linking.attribute.synch,
  att.global.linking.attribute.sameAs,
  att.global.linking.attribute.copyOf,
  att.global.linking.attribute.next,
  att.global.linking.attribute.prev,
  att.global.linking.attribute.exclude,
  att.global.linking.attribute.select
att.global.linking.attribute.corresp =
  
  ## (corresponds) points to elements that correspond to the current element in some way.
  attribute corresp {
    list { data.pointer+ }
  }?
att.global.linking.attribute.synch =
  
  ## (synchronous) points to elements that are synchronous with the current element.
  attribute synch {
    list { data.pointer+ }
  }?
att.global.linking.attribute.sameAs =
  
  ## points to an element that is the same as the current element.
  attribute sameAs { data.pointer }?
att.global.linking.attribute.copyOf =
  
  ## points to an element of which the current element is a copy.
  attribute copyOf { data.pointer }?
att.global.linking.attribute.next =
  
  ## points to the next element of a virtual aggregate of which the current element is part.
  attribute next { data.pointer }?
att.global.linking.attribute.prev =
  
  ## (previous) points to the previous element of a virtual aggregate of which the current element is part.
  attribute prev { data.pointer }?
att.global.linking.attribute.exclude =
  
  ## points to elements that are in exclusive alternation with the current element.
  attribute exclude {
    list { data.pointer+ }
  }?
att.global.linking.attribute.select =
  
  ## selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.
  attribute select {
    list { data.pointer+ }
  }?
msDesc =
  
  ## (manuscript description) contains a description of a single identifiable manuscript or other text-bearing object. [10.1. ]
  element ns2:msDesc {
    (msIdentifier,
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    empty
  }
catchwords =
  
  ## describes the system used to ensure correct ordering of the quires making up a codex or incunable, typically by means of annotations at the foot of the page. [10.3.7. ]
  element ns2:catchwords {
    macro.phraseSeq, att.global.attributes, empty
  }
dimensions =
  
  ## contains a dimensional specification. [10.3.4. ]
  element ns2:dimensions {
    ((dim | model.dimLike)*)
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:width)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:height)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:depth)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.dimensions.attributes,
    
    ## indicates which aspect of the object is being measured. 
    ## Sample values include: 1] leaves; 2] ruled; 3] pricked; 4] written; 5] miniatures; 6] binding; 7] box
    attribute type { data.enumerated }?,
    empty
  }
dim =
  
  ## contains any single measurement forming part of a dimensional specification of some sort. [10.3.4. ]
  element ns2:dim {
    macro.xtext,
    att.global.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
height =
  
  ## contains a measurement measured along the axis at right angles to the bottom of the written surface, i.e. parallel to the spine for a codex or book.  [10.3.4. ]
  element ns2:height {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
depth =
  
  ## contains a measurement measured across the spine of a book or codex, or (for other text-bearing objects) perpendicular to the measurement given by the width element. [10.3.4. ]
  element ns2:depth {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
width =
  
  ## contains a measurement measured along the axis parallel to the bottom of the written surface, i.e. perpendicular to the spine of a book or codex.  [10.3.4. ]
  element ns2:width {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
heraldry =
  
  ## contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc.  [10.3.8. ]
  element ns2:heraldry { macro.phraseSeq, att.global.attributes, empty }
locus =
  
  ## defines a location within a manuscript or manuscript part, usually as a (possibly discontinuous) sequence of folio references.  [10.3.5. ]
  element ns2:locus {
    macro.xtext,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifies the foliation scheme in terms of which the location is being specified.
    attribute scheme { data.pointer }?,
    
    ## specifies the starting point of the location in a normalized form.
    attribute from { data.word }?,
    
    ## specifies the end-point of the location in a normalized form.
    attribute to { data.word }?,
    empty
  }
locusGrp =
  
  ## groups a number of locations which together form a distinct but discontinuous item within a manuscript or manuscript part, according to a specific foliation.  [10.3.5. ]
  element ns2:locusGrp {
    locus+,
    att.global.attributes,
    
    ## identifies the foliation scheme in terms of which all the locations contained by the group are specified.
    attribute scheme { data.pointer }?,
    empty
  }
material =
  
  ## contains a word or phrase describing the material of which the object being described is composed.  [10.3.2. ]
  element ns2:material {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
objectType =
  
  ## contains a word or phrase describing the type of object being referred to.  [10.3.2. ]
  element ns2:objectType {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
origDate =
  
  ## (origin date) contains any form of date, used to identify the date of origin for a manuscript or manuscript part.  [10.3.1. ]
  element ns2:origDate {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
origPlace =
  
  ## (origin place) contains any form of place name, used to identify the place of origin for a manuscript or manuscript part.  [10.3.1. ]
  element ns2:origPlace {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
secFol =
  
  ## (second folio) marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it.  [10.3.7. ]
  element ns2:secFol { macro.phraseSeq, att.global.attributes, empty }
signatures =
  
  ## contains discussion of the leaf or quire signatures found within a codex. [10.3.7. ]
  element ns2:signatures {
    macro.phraseSeq, att.global.attributes, empty
  }
stamp =
  
  ## contains a word or phrase describing a stamp or similar device. [10.3.3. ]
  element ns2:stamp {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
watermark =
  
  ## contains a word or phrase describing a watermark or similar device. [10.3.3. ]
  element ns2:watermark {
    macro.phraseSeq, att.global.attributes, empty
  }
msIdentifier =
  
  ## (manuscript identifier) contains the information required to identify the manuscript being described.  [10.4. ]
  element ns2:msIdentifier {
    ((model.placeNamePart_sequenceOptional,
      institution?,
      repository?,
      collection*,
      idno?),
     (msName | altIdentifier)*)
    >> sch:pattern [
         id = "msIdentifier-constraint-msId_minimal"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:msIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(parent::tei:msPart) and       (local-name(*[1])='idno' or       local-name(*[1])='altIdentifier' or       normalize-space(.)='')"
             "An msIdentifier must contain either a repository or location of some type, or a manuscript name"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
institution =
  
  ## contains the name of an organization such as a university or library, with which a manuscript is identified, generally its holding institution. [10.4. ]
  element ns2:institution {
    macro.xtext, att.global.attributes, att.naming.attributes, empty
  }
repository =
  
  ## contains the name of a repository within which manuscripts are stored, possibly forming part of an institution. [10.4. ]
  element ns2:repository {
    macro.xtext, att.global.attributes, att.naming.attributes, empty
  }
collection =
  
  ## contains the name of a collection of manuscripts, not necessarily located within a single repository.  [10.4. ]
  element ns2:collection {
    macro.xtext,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
altIdentifier =
  
  ## (alternative identifier) contains an alternative or former structured identifier used for a manuscript, such as a former catalogue number. [10.4. ]
  element ns2:altIdentifier {
    (model.placeNamePart_sequenceOptional,
     institution?,
     repository?,
     collection?,
     idno,
     note?),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
msName =
  
  ## (alternative name) contains any form of unstructured alternative name used for a manuscript, such as an ocellus nominum, or nickname. [10.4. ]
  element ns2:msName {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
colophon =
  
  ## contains the colophon of a manuscript item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript. [10.6.1. ]
  element ns2:colophon { macro.phraseSeq, att.global.attributes, empty }
explicit =
  
  ## contains the explicit of a manuscript item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. [10.6.1. ]
  element ns2:explicit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
filiation =
  
  ## contains information concerning the manuscript's filiation, i.e. its relationship to other surviving manuscripts of the same text, its protographs, antigraphs and apographs. [10.6.1. ]
  element ns2:filiation {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
finalRubric =
  
  ## contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. [10.6.1. ]
  element ns2:finalRubric {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
incipit =
  
  ## contains the incipit of a manuscript item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. [10.6.1. ]
  element ns2:incipit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
msContents =
  
  ## (manuscript contents) describes the intellectual content of a manuscript or manuscript part, either as a series of paragraphs or as a series of structured manuscript items. [10.6. ]
  element ns2:msContents {
    (model.pLike+
     | (summary?, textLang?, titlePage?, (msItem | msItemStruct)*)),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this object.
    attribute class {
      list { data.pointer+ }
    }?,
    empty
  }
msItem =
  
  ## (manuscript item) describes an individual work or item within the intellectual content of a manuscript or manuscript part.  [10.6.1. ]
  element ns2:msItem {
    ((locus | locusGrp)*,
     (model.pLike+
      | (model.titlepagePart | model.msItemPart | model.global)+)),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this item
    attribute class {
      list { data.pointer+ }
    }?,
    empty
  }
msItemStruct =
  
  ## (structured manuscript item) contains a structured description for an individual work or item within the intellectual content of a manuscript or manuscript part. [10.6.1. ]
  element ns2:msItemStruct {
    ((locus | locusGrp)?,
     (model.pLike+
      | (author*,
         respStmt*,
         title*,
         rubric?,
         incipit?,
         msItemStruct*,
         explicit?,
         finalRubric?,
         colophon*,
         decoNote*,
         listBibl*,
         (bibl | biblStruct)*,
         model.noteLike*,
         textLang?))),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this item
    attribute class {
      list { data.pointer+ }
    }?,
    empty
  }
rubric =
  
  ## contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, usually in red ink, or by use of different size or type of script, or some other such visual device. [10.6.1. ]
  element ns2:rubric {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
summary =
  
  ## contains an overview of the available information concerning some aspect of an item (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. [10.6. ]
  element ns2:summary { macro.phraseSeq, att.global.attributes, empty }
att.msExcerpt.attributes = att.msExcerpt.attribute.defective
att.msExcerpt.attribute.defective =
  
  ## indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.
  [ a:defaultValue = "false" ] attribute defective { data.xTruthValue }?
physDesc =
  
  ## (physical description) contains a full physical description of a manuscript or manuscript part, optionally subdivided using more specialized elements from the model.physDescPart class. [10.7. ]
  element ns2:physDesc {
    (model.pLike*, model.physDescPart_sequenceOptional),
    att.global.attributes,
    empty
  }
objectDesc =
  
  ## contains a description of the physical components making up the object which is being described. [10.7.1. ]
  element ns2:objectDesc {
    (model.pLike+ | (supportDesc?, layoutDesc?)),
    att.global.attributes,
    
    ## a short project-specific name identifying the physical form of the carrier, for example as a codex, roll, fragment, partial leaf, cutting etc.
    attribute form { data.enumerated }?,
    empty
  }
supportDesc =
  
  ## (support description) groups elements describing the physical support for the written part of a manuscript. [10.7.1. ]
  element ns2:supportDesc {
    (model.pLike+
     | (support?, extent?, foliation*, collation?, condition?)),
    att.global.attributes,
    
    ## a short project-defined name for the material composing the majority of the support
    ## Suggested values include: 1] paper (paper) ; 2] parch(parchment) ; 3] mixed
    attribute material {
      
      ##  (paper) 
      "paper"
      | 
        ## (parchment) 
        "parch"
      | 
        ##
        "mixed"
      | xsd:Name
    }?,
    empty
  }
support =
  
  ## contains a description of the materials etc. which make up the physical support for the written part of a manuscript. [10.7.1. ]
  element ns2:support {
    macro.specialPara, att.global.attributes, empty
  }
collation =
  
  ## contains a description of how the leaves or bifolia are physically arranged. [10.7.1. ]
  element ns2:collation {
    macro.specialPara, att.global.attributes, empty
  }
foliation =
  
  ## describes the numbering system or systems used to count the leaves or pages in a codex. [10.7.1.4. ]
  element ns2:foliation {
    macro.specialPara, att.global.attributes, empty
  }
condition =
  
  ## contains a description of the physical condition of the manuscript.  [10.7.1.5. ]
  element ns2:condition {
    macro.specialPara, att.global.attributes, empty
  }
layoutDesc =
  
  ## (layout description) collects the set of layout descriptions applicable to a manuscript. [10.7.2. ]
  element ns2:layoutDesc {
    (model.pLike+ | (summary?, layout+)),
    att.global.attributes,
    empty
  }
layout =
  
  ## describes how text is laid out on the page, including information about any ruling, pricking, or other evidence of page-preparation techniques. [10.7.2. ]
  element ns2:layout {
    macro.specialPara,
    att.global.attributes,
    
    ## specifies the number of columns per page
    attribute columns {
      list { data.count, data.count? }
    }?,
    
    ## specifies the number of ruled lines per column
    attribute ruledLines {
      list { data.count, data.count? }
    }?,
    
    ## specifies the number of written lines per column
    attribute writtenLines {
      list { data.count, data.count? }
    }?,
    empty
  }
handDesc =
  
  ## (description of hands) contains a description of all the different kinds of writing used in a manuscript. [10.7.2. ]
  element ns2:handDesc {
    (model.pLike+ | (summary?, handNote+)),
    att.global.attributes,
    
    ## specifies the number of distinct hands identified within the manuscript
    attribute hands { data.count }?,
    empty
  }
typeDesc =
  
  ## contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. [10.7.2.1. ]
  element ns2:typeDesc {
    (model.pLike+ | (summary?, typeNote+)),
    att.global.attributes,
    empty
  }
scriptDesc =
  
  ## contains a description of the scripts used in a manuscript or similar source. [10.7.2.1. ]
  element ns2:scriptDesc {
    (model.pLike+ | (summary?, scriptNote+)),
    att.global.attributes,
    empty
  }
musicNotation =
  
  ## contains description of type of musical notation. [10.7.2. ]
  element ns2:musicNotation {
    macro.specialPara, att.global.attributes, empty
  }
decoDesc =
  
  ## (decoration description) contains a description of the decoration of a manuscript, either as a sequence of paragraphs, or as a sequence of topically organized decoNote elements. [10.7.3. ]
  element ns2:decoDesc {
    (model.pLike+ | (summary?, decoNote+)),
    att.global.attributes,
    empty
  }
decoNote =
  
  ## (note on decoration) contains a note describing either a decorative component of a manuscript, or a fairly homogenous class of such components. [10.7.3. ]
  element ns2:decoNote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
additions =
  
  ## contains a description of any significant additions found within a manuscript, such as marginalia or other annotations.  [10.7.2. ]
  element ns2:additions {
    macro.specialPara, att.global.attributes, empty
  }
bindingDesc =
  
  ## (binding description) describes the present and former bindings of a manuscript, either as a series of paragraphs or as a series of distinct binding elements, one for each binding of the manuscript. [10.7.3.1. ]
  element ns2:bindingDesc {
    ((model.pLike | decoNote | condition)+ | binding+),
    att.global.attributes,
    empty
  }
binding =
  
  ## contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript. [10.7.3.1. ]
  element ns2:binding {
    (model.pLike | condition | decoNote)+,
    att.global.attributes,
    att.datable.attributes,
    
    ## specifies whether or not the binding is contemporary with the majority of its contents
    attribute contemporary { data.xTruthValue }?,
    empty
  }
sealDesc =
  
  ## (seal description) describes the seals or other external items attached to a manuscript, either as a series of paragraphs or as a series of distinct seal elements, possibly with additional decoNotes. [10.7.3.2. ]
  element ns2:sealDesc {
    (model.pLike+
     | (summary?, (decoNote | seal | condition)+)),
    att.global.attributes,
    empty
  }
seal =
  
  ## contains a description of one seal or similar attachment applied to a manuscript. [10.7.3.2. ]
  element ns2:seal {
    (model.pLike | decoNote)+,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ## specifies whether or not the seal is contemporary with the item to which it is affixed
    attribute contemporary { data.xTruthValue }?,
    empty
  }
accMat =
  
  ## (accompanying material) contains details of any significant additional material which may be closely associated with the manuscript being described, such as non-contemporaneous documents or fragments bound in with the manuscript at some earlier historical period. [10.7.3.3. ]
  element ns2:accMat {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
history =
  
  ## groups elements describing the full history of a manuscript or manuscript part. [10.8. ]
  element ns2:history {
    (model.pLike+ | (summary?, origin?, provenance*, acquisition?)),
    att.global.attributes,
    empty
  }
origin =
  
  ## contains any descriptive or other information concerning the origin of a manuscript or manuscript part.  [10.8. ]
  element ns2:origin {
    macro.specialPara,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    empty
  }
provenance =
  
  ## contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript or manuscript part, after its creation but before its acquisition.  [10.8. ]
  element ns2:provenance {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    att.responsibility.attributes,
    empty
  }
acquisition =
  
  ## contains any descriptive or other information concerning the process by which a manuscript or manuscript part entered the holding institution.  [10.8. ]
  element ns2:acquisition {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
additional =
  
  ## groups additional information, combining bibliographic information about a manuscript, or surrogate copies of it with curatorial or administrative information.  [10.9. ]
  element ns2:additional {
    (adminInfo?, surrogates?, listBibl?), att.global.attributes, empty
  }
adminInfo =
  
  ## (administrative information) contains information about the present custody and availability of the manuscript, and also about the record description itself.  [10.9.1. ]
  element ns2:adminInfo {
    (recordHist?, availability?, custodialHist?, model.noteLike?),
    att.global.attributes,
    empty
  }
recordHist =
  
  ## (recorded history) provides information about the source and revision status of the parent manuscript description itself.  [10.9.1. ]
  element ns2:recordHist {
    (model.pLike+ | (source, change*)),
    att.global.attributes,
    empty
  }
source =
  
  ## describes the original source for the information contained with a manuscript description.  [10.9.1.1. ]
  element ns2:source { macro.specialPara, att.global.attributes, empty }
custodialHist =
  
  ## (custodial history) contains a description of a manuscript's custodial history, either as running prose or as a series of dated custodial events.  [10.9.1.2. ]
  element ns2:custodialHist {
    (model.pLike+ | custEvent+), att.global.attributes, empty
  }
custEvent =
  
  ## (custodial event) describes a single event during the custodial history of a manuscript. [10.9.1.2. ]
  element ns2:custEvent {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    empty
  }
surrogates =
  
  ## contains information about any representations of the manuscript being described which may exist in the holding institution or elsewhere.  [10.9. ]
  element ns2:surrogates {
    macro.specialPara, att.global.attributes, empty
  }
msPart =
  
  ## (manuscript part) contains information about an originally distinct manuscript or part of a manuscript, now forming part of a composite manuscript. [10.10. ]
  element ns2:msPart {
    ((altIdentifier | msIdentifier),
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    empty
  }
att.datable.custom.attributes =
  att.datable.custom.attribute.when-custom,
  att.datable.custom.attribute.notBefore-custom,
  att.datable.custom.attribute.notAfter-custom,
  att.datable.custom.attribute.from-custom,
  att.datable.custom.attribute.to-custom,
  att.datable.custom.attribute.datingPoint,
  att.datable.custom.attribute.datingMethod
att.datable.custom.attribute.when-custom =
  
  ## supplies the value of a date or time in some standard form.
  attribute when-custom {
    list { data.word+ }
  }?
att.datable.custom.attribute.notBefore-custom =
  
  ## specifies the earliest possible date for the event in some custom standard form.
  attribute notBefore-custom {
    list { data.word+ }
  }?
att.datable.custom.attribute.notAfter-custom =
  
  ## specifies the latest possible date for the event in some custom standard form.
  attribute notAfter-custom {
    list { data.word+ }
  }?
att.datable.custom.attribute.from-custom =
  
  ## indicates the starting point of the period in some standard form.
  attribute from-custom {
    list { data.word+ }
  }?
att.datable.custom.attribute.to-custom =
  
  ## indicates the ending point of the period in some standard form.
  attribute to-custom {
    list { data.word+ }
  }?
att.datable.custom.attribute.datingPoint =
  
  ## supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred
  attribute datingPoint { data.pointer }?
att.datable.custom.attribute.datingMethod =
  
  ## supplies a pointer to a calendar element or other means of interpreting the values of the custom dating attributes.
  attribute datingMethod { data.pointer }?
model.persNamePart =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_alternation =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_sequence =
  surname, forename, genName, nameLink, addName, roleName
model.persNamePart_sequenceOptional =
  surname?, forename?, genName?, nameLink?, addName?, roleName?
model.persNamePart_sequenceOptionalRepeatable =
  surname*, forename*, genName*, nameLink*, addName*, roleName*
model.persNamePart_sequenceRepeatable =
  surname+, forename+, genName+, nameLink+, addName+, roleName+
orgName =
  
  ## (organization name) contains an organizational name.  [13.2.2. ]
  element ns2:orgName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
persName =
  
  ## (personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. [13.2.1. ]
  element ns2:persName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
surname =
  
  ## contains a family (inherited) name, as opposed to a given, baptismal, or nick name. [13.2.1. ]
  element ns2:surname {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
forename =
  
  ## contains a forename, given or baptismal name. [13.2.1. ]
  element ns2:forename {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
genName =
  
  ## (generational name component) contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. [13.2.1. ]
  element ns2:genName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
nameLink =
  
  ## (name link) contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of. [13.2.1. ]
  element ns2:nameLink {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
addName =
  
  ## (additional name) contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. [13.2.1. ]
  element ns2:addName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
roleName =
  
  ## contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. [13.2.1. ]
  element ns2:roleName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
placeName =
  
  ## contains an absolute or relative place name.  [13.2.3. ]
  element ns2:placeName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
bloc =
  
  ## (bloc) contains the name of a geo-political unit consisting of two or more nation states or countries. [13.2.3. ]
  element ns2:bloc {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
country =
  
  ## (country) contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. [13.2.3. ]
  element ns2:country {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
region =
  
  ## contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. [13.2.3. ]
  element ns2:region {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
district =
  
  ## contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. [13.2.3. ]
  element ns2:district {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
settlement =
  
  ## contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. [13.2.3. ]
  element ns2:settlement {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
offset =
  
  ## marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression.  [13.2.3. ]
  element ns2:offset {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
geogName =
  
  ## (geographical name) identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. [13.2.3. ]
  element ns2:geogName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
geogFeat =
  
  ## (geographical feature name) contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. [13.2.3. ]
  element ns2:geogFeat {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
affiliation =
  
  ## (affiliation) contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. [15.2.2. ]
  element ns2:affiliation {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
age =
  
  ## (age) specifies the age of a person. [13.3.2.1. ]
  element ns2:age {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    
    ## supplies a numeric code representing the age or age group
    attribute value { data.count }?,
    empty
  }
birth =
  
  ## (birth) contains information about a person's birth, such as its date and place. [15.2.2. ]
  element ns2:birth {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
climate =
  
  ## (climate) contains information about the physical climate of a place. [13.3.4.3. ]
  element ns2:climate {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     climate*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
death =
  
  ## (death) contains information about a person's death, such as its date and place. [15.2.2. ]
  element ns2:death {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
education =
  
  ## contains a description of the educational experience of a person. [15.2.2. ]
  element ns2:education {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
event =
  
  ## (event) contains data relating to any kind of significant event associated with a person, place, or organization. [13.3.1. ]
  element ns2:event {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike | linkGrp | link)*,
     event*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    att.sortable.attributes,
    
    ## indicates the location of an event by pointing to a place element
    attribute where { data.pointer }?,
    empty
  }
faith =
  
  ## specifies the faith, religion, or belief set of a person. [13.3.2.1. ]
  element ns2:faith {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.canonical.attributes,
    empty
  }
floruit =
  
  ## contains information about a person's period of activity. [13.3.2.1. ]
  element ns2:floruit {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
geo =
  
  ## (geographical coordinates) contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some notation. [13.3.4.1. ]
  element ns2:geo {
    text, att.global.attributes, att.declaring.attributes, empty
  }
langKnowledge =
  
  ## (language knowledge) summarizes the state of a person's linguistic knowledge, either as prose or by a list of langKnown elements. [13.3.2.1. ]
  element ns2:langKnowledge {
    (model.pLike | langKnown+),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    
    ## supplies one or more valid language tags for the languages specified
    attribute tags {
      list { data.language+ }
    }?,
    empty
  }
langKnown =
  
  ## (language known) summarizes the state of a person's linguistic competence, i.e., knowledge of a single language. [15.2.2. ]
  element ns2:langKnown {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    
    ## supplies a valid language tag for the language concerned.
    attribute tag { data.language },
    
    ## a code indicating the person's level of knowledge for this language 
    attribute level { data.word }?,
    empty
  }
listOrg =
  
  ## (list of organizations) contains a list of elements, each of which provides information about an identifiable organization.  [13.2.2. ]
  element ns2:listOrg {
    (model.headLike*,
     (org | listOrg)+,
     (listRelation | relationGrp | relation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listEvent =
  
  ## (list of events) contains a list of descriptions, each of which provides information about an identifiable event.  [13.3.1. ]
  element ns2:listEvent {
    (model.headLike*,
     (event | listEvent)+,
     (relation | relationGrp | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listPerson =
  
  ## (list of persons) contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source.  [13.3.2.  15.2.  2.4.  15.3.2. ]
  element ns2:listPerson {
    (model.headLike*,
     (model.personLike | listPerson)+,
     (relation | listRelation | relationGrp)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listPlace =
  
  ## (list of places) contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them.  [2.2.7.  13.3.4. ]
  element ns2:listPlace {
    (model.headLike*,
     (model.placeLike | listPlace)+,
     (listRelation | relationGrp | relation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
location =
  
  ## defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. [13.3.4. ]
  element ns2:location {
    (model.labelLike
     | model.placeNamePart
     | model.offsetLike
     | model.measureLike
     | model.addressLike
     | model.noteLike
     | model.biblLike)*,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
nationality =
  
  ## contains an informal description of a person's present or past nationality or citizenship. [15.2.2. ]
  element ns2:nationality {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    empty
  }
occupation =
  
  ## contains an informal description of a person's trade, profession or occupation. [15.2.2. ]
  element ns2:occupation {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    
    ## identifies the classification system or taxonomy in use by supplying the identifier of a taxonomy element typically but not necessarily elsewhere in the current document header.
    attribute scheme { data.pointer }?,
    
    ## identifies an occupation code defined within the classification system or taxonomy defined by the scheme attribute.
    attribute code { data.pointer }?,
    empty
  }
org =
  
  ## (organization) provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. [13.2.2. ]
  element ns2:org {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.nameLike
         | model.placeLike
         | model.orgPart)*),
     (model.noteLike | model.biblLike | linkGrp | link)*,
     model.personLike*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the organization.
    attribute role {
      list { data.word+ }
    }?,
    empty
  }
listRelation =
  
  ## provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links.  [13.3.2.3. ]
  element ns2:listRelation {
    (model.pLike+ | relation+),
    att.global.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    empty
  }
relationGrp =
  
  ## (relation group) provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links.  [13.3.2.3. ]
  element ns2:relationGrp {
    (model.pLike+ | relation+),
    att.global.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    empty
  }
person =
  
  ## provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. [13.3.2.  15.2.2. ]
  element ns2:person {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the person.
    attribute role {
      list { data.enumerated+ }
    }?,
    
    ## specifies the sex of the person.
    attribute sex {
      list { data.sex+ }
    }?,
    
    ## specifies an age group for the person.
    attribute age { data.enumerated }?,
    empty
  }
personGrp =
  
  ## (personal group) describes a group of individuals treated as a single person for analytic purposes. [15.2.2. ]
  element ns2:personGrp {
    (model.pLike+ | model.personPart*),
    att.global.attributes,
    att.sortable.attributes,
    
    ## specifies the role of this group of participants in the interaction.
    attribute role { data.enumerated }?,
    
    ## specifies the sex of the participant group.
    attribute sex {
      list { data.sex+ }
    }?,
    
    ## specifies the age group of the participants.
    attribute age { data.enumerated }?,
    
    ## specifies the size or approximate size of the group.
    attribute size {
      list { data.word+ }
    }?,
    empty
  }
place =
  
  ## contains data about a geographic location [13.3.4. ]
  element ns2:place {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.placeStateLike
         | model.placeEventLike)*),
     (model.noteLike | model.biblLike | idno | linkGrp | link)*,
     (model.placeLike | listPlace)*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    empty
  }
population =
  
  ## contains information about the population of a place. [13.3.4.3. ]
  element ns2:population {
    (model.headLike*,
     ((model.pLike+ | model.labelLike+),
      (model.noteLike | model.biblLike)*)?,
     population*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
relation =
  
  ## (relationship) describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. [13.3.2.3. ]
  element ns2:relation {
    (desc?)
    >> sch:pattern [
         id = "relation-constraint-activemutual"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@active and @mutual"
             "Only one of the attributes\x{a}" ~
             "@active and @mutual may be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relation-constraint-activepassive"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@passive and not(@active)"
             "the attribute 'passive'\x{a}" ~
             "	may be supplied only if the attribute 'active' is\x{a}" ~
             "	supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.canonical.attributes,
    att.sortable.attributes,
    
    ## categorizes the relationship in some respect, e.g. as social, personal or other.
    ## Suggested values include: 1] social; 2] personal; 3] other
    [ a:defaultValue = "personal" ]
    attribute type {
      
      ## relationship concerned with social roles
      "social"
      | 
        ## relationship concerned with personal roles, e.g. kinship, marriage, etc.
        "personal"
      | 
        ## other kinds of relationship
        "other"
      | xsd:Name
    }?,
    
    ## supplies a name for the kind of relationship of which this is an instance.
    attribute name { data.enumerated },
    (
     ## identifies the active participants in a non-mutual relationship, or all the participants in a mutual one.
     attribute active {
       list { data.pointer+ }
     }?
     | 
       ## supplies a list of participants amongst all of whom the relationship holds equally.
       attribute mutual {
         list { data.pointer+ }
       }?),
    
    ## identifies the passive participants in a non-mutual relationship.
    attribute passive {
      list { data.pointer+ }
    }?,
    empty
  }
residence =
  
  ## (residence) describes a person's present or past places of residence. [15.2.2. ]
  element ns2:residence {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    empty
  }
sex =
  
  ## specifies the sex of a person. [13.3.2.1. ]
  element ns2:sex {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    
    ## supplies a coded value for sex
    attribute value {
      list { data.sex+ }
    }?,
    empty
  }
socecStatus =
  
  ## (socio-economic status) contains an informal description of a person's perceived social or economic status. [15.2.2. ]
  element ns2:socecStatus {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    
    ## identifies the classification system or taxonomy in use.
    attribute scheme { data.pointer }?,
    
    ## identifies a status code defined within the classification system or taxonomy defined by the scheme attribute.
    attribute code { data.pointer }?,
    empty
  }
state =
  
  ## contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. [13.3.1.  13.3.2.1.  13.3.2.1. ]
  element ns2:state {
    (state+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    empty
  }
terrain =
  
  ## contains information about the physical terrain of a place. [13.3.4.3. ]
  element ns2:terrain {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     terrain*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
trait =
  
  ## contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. [13.3.1.  13.3.2.1.  13.3.2.1. ]
  element ns2:trait {
    (trait+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
nym =
  
  ## (canonical name) contains the definition for a canonical name or name component of any kind. [13.3.5. ]
  element ns2:nym {
    (model.entryPart*, model.pLike*, nym*),
    att.global.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    
    ## points to constituent nyms 
    attribute parts {
      list { data.pointer+ }
    }?,
    empty
  }
listNym =
  
  ## (list of canonical names) contains a list of nyms, that is, standardized names for any thing.  [13.3.5. ]
  element ns2:listNym {
    (model.headLike*,
     (nym | listNym)+,
     (listRelation | relationGrp | relation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
att.datable.iso.attributes =
  att.datable.iso.attribute.when-iso,
  att.datable.iso.attribute.notBefore-iso,
  att.datable.iso.attribute.notAfter-iso,
  att.datable.iso.attribute.from-iso,
  att.datable.iso.attribute.to-iso
att.datable.iso.attribute.when-iso =
  
  ## supplies the value of a date or time in a standard form.
  attribute when-iso { data.temporal.iso }?
att.datable.iso.attribute.notBefore-iso =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore-iso { data.temporal.iso }?
att.datable.iso.attribute.notAfter-iso =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter-iso { data.temporal.iso }?
att.datable.iso.attribute.from-iso =
  
  ## indicates the starting point of the period in standard form.
  attribute from-iso { data.temporal.iso }?
att.datable.iso.attribute.to-iso =
  
  ## indicates the ending point of the period in standard form.
  attribute to-iso { data.temporal.iso }?
graph =
  
  ## encodes a graph, which is a collection of nodes, and arcs which connect the nodes. [19.1. ]
  element ns2:graph {
    ((label, model.global*)?,
     (((node, model.global*)+, (arc, model.global*)*)
      | ((arc, model.global*)+, (node, model.global*)+))),
    att.global.attributes,
    
    ## describes the type of graph.
    ## Suggested values include: 1] undirected; 2] directed; 3] transitionNetwork; 4] transducer
    attribute type {
      
      ## undirected graph
      "undirected"
      | 
        ## directed graph
        "directed"
      | 
        ## a directed graph with distinguished initial and final nodes
        "transitionNetwork"
      | 
        ## a transition network with up to two labels on each arc
        "transducer"
      | xsd:Name
    }?,
    
    ## states the order of the graph, i.e., the number of its nodes.
    attribute order { data.count }?,
    
    ## states the size of the graph, i.e., the number of its arcs.
    attribute size { data.count }?,
    empty
  }
node =
  
  ## encodes a node, a possibly labeled point in a graph. [19.1. ]
  element ns2:node {
    (label, label?)?,
    att.global.attributes,
    
    ## provides the value of a node, which is a feature structure or other analytic element.
    attribute value { data.pointer }?,
    
    ## provides a type for a node.
    ## Suggested values include: 1] initial; 2] final
    attribute type {
      
      ## initial node in a transition network
      "initial"
      | 
        ## final node in a transition network
        "final"
      | xsd:Name
    }?,
    
    ## (adjacent to) gives the identifiers of the nodes which are adjacent to the current node.
    attribute adjTo {
      list { data.pointer+ }
    }?,
    
    ## (adjacent from) gives the identifiers of the nodes which are adjacent from the current node.
    attribute adjFrom {
      list { data.pointer+ }
    }?,
    
    ## (adjacent) gives the identifiers of the nodes which are both adjacent to and adjacent from the current node.
    attribute adj {
      list { data.pointer+ }
    }?,
    
    ## gives the in degree of the node, the number of nodes which are adjacent from the given node.
    attribute inDegree { data.count }?,
    
    ## gives the out degree of the node, the number of nodes which are adjacent to the given node.
    attribute outDegree { data.count }?,
    
    ## gives the degree of the node, the number of arcs with which the node is incident.
    attribute degree { data.count }?,
    empty
  }
arc =
  
  ## encodes an arc, the connection from one node to another in a graph. [19.1. ]
  element ns2:arc {
    (label, label?)?,
    att.global.attributes,
    
    ## gives the identifier of the node which is adjacent from this arc.
    attribute from { data.pointer },
    
    ## gives the identifier of the node which is adjacent to this arc.
    attribute to { data.pointer },
    empty
  }
tree =
  
  ## encodes a tree, which is made up of a root, internal nodes, leaves, and arcs from root to leaves. [19.2. ]
  element ns2:tree {
    (label?,
     ((leaf | iNode)*, root, (leaf | iNode)*)),
    att.global.attributes,
    
    ## gives the maximum number of children of the root and internal nodes of the tree.
    attribute arity { data.count }?,
    
    ## (ordered) indicates whether or not the tree is ordered, or if it is partially ordered.
    [ a:defaultValue = "true" ]
    attribute ord {
      
      ## indicates that all of the branching nodes of the tree are ordered.
      "true"
      | 
        ## indicates that some of the branching nodes of the tree are ordered and some are unordered.
        "partial"
      | 
        ## indicates that all of the branching nodes of the tree are unordered.
        "false"
    },
    
    ## gives the order of the tree, i.e., the number of its nodes.
    attribute order { data.count }?,
    empty
  }
root =
  
  ## (root node) represents the root node of a tree. [19.2. ]
  element ns2:root {
    label?,
    att.global.attributes,
    
    ## provides the value of the root, which is a feature structure or other analytic element.
    attribute value { data.pointer }?,
    
    ## provides a list of identifiers of the elements which are the children of the root node.
    attribute children {
      list { data.pointer+ }
    },
    
    ## (ordered) indicates whether or not the root is ordered.
    attribute ord { data.xTruthValue }?,
    
    ## gives the out degree of the root, the number of its children.
    attribute outDegree { data.count }?,
    empty
  }
iNode =
  
  ## (intermediate (or internal) node) represents an intermediate (or internal) node of a tree. [19.2. ]
  element ns2:iNode {
    label?,
    att.global.attributes,
    
    ## provides the value of an intermediate node, which is a feature structure or other analytic element.
    attribute value { data.pointer }?,
    
    ## provides a list of identifiers of the elements which are the children of the intermediate node.
    attribute children {
      list { data.pointer+ }
    },
    
    ## provides the identifier of the element which is the parent of this node.
    attribute parent { data.pointer }?,
    
    ## (ordered) indicates whether or not the internal node is ordered.
    attribute ord { data.xTruthValue }?,
    
    ## provides an identifier of the element which this node follows.
    attribute follow { data.pointer }?,
    
    ## gives the out degree of an intermediate node, the number of its children.
    attribute outDegree { data.count }?,
    empty
  }
leaf =
  
  ## encodes the leaves (terminal nodes) of a tree. [19.2. ]
  element ns2:leaf {
    label?,
    att.global.attributes,
    
    ## provides a pointer to a feature structure or other analytic element.
    attribute value { data.pointer }?,
    
    ## provides the identifier of parent of a leaf.
    attribute parent { data.pointer }?,
    
    ## provides an identifier of an element which this leaf follows.
    attribute follow { data.pointer }?,
    empty
  }
eTree =
  
  ## (embedding tree) provides an alternative to tree element for representing ordered rooted tree structures. [19.3. ]
  element ns2:eTree {
    (label?, (eTree | triangle | eLeaf | model.ptrLike)*),
    att.global.attributes,
    att.typed.attributes,
    
    ## provides the value of an embedding tree, which is a feature structure or other analytic element.
    attribute value { data.pointer }?,
    empty
  }
triangle =
  
  ## (underspecified embedding tree, so called because of its
  ##   characteristic shape when drawn) provides for an underspecified eTree, that is, an eTree with information left out. [19.3. ]
  element ns2:triangle {
    (label?, (eTree | triangle | eLeaf)*),
    att.global.attributes,
    
    ## provides the value of a triangle, which is the identifier of a feature structure or other analytic element.
    attribute value { data.pointer }?,
    empty
  }
eLeaf =
  
  ## (leaf or terminal node of an embedding tree) provides explicitly for a leaf of an embedding tree, which may also be encoded with the eTree element. [19.3. ]
  element ns2:eLeaf {
    (label?, model.ptrLike?),
    att.global.attributes,
    att.typed.attributes,
    
    ## provides the value of an embedding leaf, which is a feature structure or other analytic element.
    attribute value { data.pointer }?,
    empty
  }
forest =
  
  ## provides for groups of rooted trees. [19.3. ]
  element ns2:forest {
    (tree | eTree | triangle)+,
    att.global.attributes,
    
    ## identifies the type of the forest.
    attribute type { data.enumerated }?,
    empty
  }
listForest =
  
  ## provides for lists of forests. [19.3. ]
  element ns2:listForest {
    forest+,
    att.global.attributes,
    
    ## identifies the type of the forest group.
    attribute type { data.enumerated }?,
    empty
  }
att.duration.attributes =
  att.duration.w3c.attributes, att.duration.iso.attributes
model.global.spoken =
  pause | vocal | kinesic | incident | writing | shift
model.recordingPart = model.dateLike | respStmt | equipment | broadcast
scriptStmt =
  
  ## (script statement) contains a citation giving details of the script used for a spoken text. [8.2.  2.2.7.  15.3.2. ]
  element ns2:scriptStmt {
    (model.pLike+ | model.biblLike),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
recordingStmt =
  
  ## (recording statement) describes a set of recordings used as the basis for transcription of a spoken text. [8.2.  2.2.7. ]
  element ns2:recordingStmt {
    (model.pLike+ | recording+), att.global.attributes, empty
  }
recording =
  
  ## (recording event) provides details of an audio or video recording event used as the source of a spoken text, either directly or from a public broadcast.  [8.2.  15.3.2. ]
  element ns2:recording {
    (model.pLike+ | model.recordingPart*),
    att.global.attributes,
    att.declarable.attributes,
    att.duration.attributes,
    
    ## the kind of recording.
    [ a:defaultValue = "audio" ]
    attribute type {
      
      ## audio recording
      "audio"
      | 
        ## audio and video recording
        "video"
    }?,
    empty
  }
equipment =
  
  ## provides technical details of the equipment and media used for an audio or video recording used as the source for a spoken text. [8.2.  15.3.2. ]
  element ns2:equipment {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
broadcast =
  
  ## describes a broadcast used as the source of a spoken text. [8.2.  15.3.2. ]
  element ns2:broadcast {
    (model.pLike+ | model.biblLike | recording),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
u =
  
  ## (utterance) contains a stretch of speech usually preceded and followed by silence or by a change of speaker. [8.3.1. ]
  element ns2:u {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.timed.attributes,
    att.declaring.attributes,
    att.ascribed.attributes,
    
    ## (transition) indicates the nature of the transition between this utterance and the previous one.
    [ a:defaultValue = "smooth" ]
    attribute trans {
      
      ## this utterance begins without unusual pause or rapidity.
      "smooth"
      | 
        ## this utterance begins with a markedly shorter pause than normal.
        "latching"
      | 
        ## this utterance begins before the previous one has finished.
        "overlap"
      | 
        ## this utterance begins after a noticeable pause.
        "pause"
    }?,
    empty
  }
pause =
  
  ## marks a pause either between or within utterances. [8.3.2. ]
  element ns2:pause {
    empty,
    att.global.attributes,
    att.timed.attributes,
    att.typed.attributes,
    att.ascribed.attributes,
    empty
  }
vocal =
  
  ## marks any vocalized but not necessarily lexical phenomenon, for example voiced pauses, non-lexical backchannels, etc. [8.3.3. ]
  element ns2:vocal {
    model.descLike*,
    att.global.attributes,
    att.timed.attributes,
    att.ascribed.attributes,
    att.typed.attributes,
    
    ## indicates whether or not the phenomenon is repeated.
    [ a:defaultValue = "false" ]
    attribute iterated { data.xTruthValue }?,
    empty
  }
kinesic =
  
  ## marks any communicative phenomenon, not necessarily vocalized, for example a gesture, frown, etc. [8.3.3. ]
  element ns2:kinesic {
    model.descLike*,
    att.global.attributes,
    att.timed.attributes,
    att.typed.attributes,
    att.ascribed.attributes,
    
    ## indicates whether or not the phenomenon is repeated.
    [ a:defaultValue = "false" ]
    attribute iterated { data.xTruthValue }?,
    empty
  }
incident =
  
  ## marks any phenomenon or occurrence, not necessarily vocalized or communicative, for example incidental noises or other events affecting communication. [8.3.3. ]
  element ns2:incident {
    model.descLike*,
    att.global.attributes,
    att.timed.attributes,
    att.typed.attributes,
    att.ascribed.attributes,
    empty
  }
writing =
  
  ## contains a passage of written text revealed to participants in the course of a spoken text. [8.3.4. ]
  element ns2:writing {
    macro.paraContent,
    att.global.attributes,
    att.ascribed.attributes,
    att.typed.attributes,
    att.timed.attributes,
    att.source.attributes,
    
    ## indicates whether the writing is revealed all at once or gradually.
    attribute gradual { data.xTruthValue }?,
    empty
  }
shift =
  
  ## marks the point at which some paralinguistic feature of a series of utterances by any one speaker changes. [8.3.6. ]
  element ns2:shift {
    empty,
    att.global.attributes,
    att.ascribed.attributes,
    
    ## a paralinguistic feature.
    attribute feature {
      
      ## speed of utterance. 
      "tempo"
      | 
        ## loudness. 
        "loud"
      | 
        ## pitch range. 
        "pitch"
      | 
        ## tension or stress pattern. 
        "tension"
      | 
        ## rhythmic qualities. 
        "rhythm"
      | 
        ## voice quality. 
        "voice"
    }?,
    
    ## specifies the new state of the paralinguistic feature specified.
    [ a:defaultValue = "normal" ] attribute new { data.enumerated }?,
    empty
  }
model.divPart.spoken = u
model.divPart.spoken_alternation = u
model.divPart.spoken_sequence = u
model.divPart.spoken_sequenceOptional = u?
model.divPart.spoken_sequenceOptionalRepeatable = u*
model.divPart.spoken_sequenceRepeatable = u+
model.rdgLike = rdg
app =
  
  ## (apparatus entry) contains one entry in a critical apparatus, with an optional lemma and usually one or more reading or a note on the relevant passage. [12.1.1. ]
  element ns2:app {
    (model.global*,
     (lem, model.global*, (wit, model.global*)?)?,
     ((model.rdgLike, model.global*, (wit, model.global*)?)
      | (rdgGrp, model.global*, (wit, model.global*)?))*),
    att.global.attributes,
    
    ## classifies the variation contained in this element according to some convenient typology.
    attribute type { data.enumerated }?,
    
    ## identifies the beginning of the lemma in the base text.
    attribute from { data.pointer }?,
    
    ## identifies the endpoint of the lemma in the base text.
    attribute to { data.pointer }?,
    
    ## (location) indicates the location of the variation, when the location-referenced method of apparatus markup is used.
    attribute loc {
      list { data.word+ }
    }?,
    empty
  }
listApp =
  
  ## (list of apparatus entries) contains a list of apparatus entries.  [12.2. ]
  element ns2:listApp {
    (model.headLike*, (app | listApp)+),
    att.global.attributes,
    att.sortable.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
lem =
  
  ## (lemma) contains the lemma, or base text, of a textual variation. [12.1. ]
  element ns2:lem {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.global
     | model.rdgPart)*,
    att.global.attributes,
    att.textCritical.attributes,
    att.witnessed.attributes,
    empty
  }
rdg =
  
  ## (reading) contains a single reading within a textual variation. [12.1. ]
  element ns2:rdg {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.global
     | model.rdgPart)*,
    att.global.attributes,
    att.textCritical.attributes,
    att.witnessed.attributes,
    empty
  }
rdgGrp =
  
  ## (reading group) within a textual variation, groups two or more readings perceived to have a genetic relationship or other affinity. [12.1. ]
  element ns2:rdgGrp {
    (((rdgGrp, wit?)
      | ((lem, wit?)?, (model.rdgLike, wit?))*)+)
    >> sch:pattern [
         id = "rdgGrp-constraint-only1lem"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rdgGrp"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(tei:lem) < 2"
             "Only one <lem> element may appear within a <rdgGrp>"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.textCritical.attributes,
    empty
  }
witDetail =
  
  ## (witness detail) gives further information about a particular witness, or witnesses, to a particular reading. [12.1. ]
  element ns2:witDetail {
    macro.phraseSeq,
    att.global.attributes,
    att.placement.attributes,
    att.responsibility.attributes,
    att.pointing.attributes,
    
    ## (witnesses) indicates the sigil or sigla for the witnesses to which the detail refers.
    attribute wit {
      list { data.pointer+ }
    },
    
    ## describes the type of information given about the witness.
    attribute type { data.enumerated }?,
    empty
  }
wit =
  
  ## contains a list of one or more sigla of witnesses attesting a given reading, in a textual variation. [12.1.4. ]
  element ns2:wit {
    macro.phraseSeq,
    att.global.attributes,
    att.rdgPart.attributes,
    empty
  }
listWit =
  
  ## (witness list) lists definitions for all the witnesses referred to by a critical apparatus, optionally grouped hierarchically. [12.1. ]
  element ns2:listWit {
    (model.headLike?, (witness | listWit)+),
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
witness =
  
  ## contains either a description of a single witness referred to within the critical apparatus, or a list of witnesses which is to be referred to by a single sigil. [12.1. ]
  element ns2:witness {
    macro.limitedContent,
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
witStart =
  
  ## (fragmented witness start) indicates the beginning, or resumption, of the text of a fragmentary witness. [12.1.5. ]
  element ns2:witStart {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
witEnd =
  
  ## (fragmented witness end) indicates the end, or suspension, of the text of a fragmentary witness. [12.1.5. ]
  element ns2:witEnd {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
lacunaStart =
  
  ## indicates the beginning of a lacuna in the text of a mostly complete textual witness. [12.1.5. ]
  element ns2:lacunaStart {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
lacunaEnd =
  
  ## indicates the end of a lacuna in a mostly complete textual witness. [12.1.5. ]
  element ns2:lacunaEnd {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
variantEncoding =
  
  ## declares the method used to encode text-critical variants. [12.1.1. ]
  element ns2:variantEncoding {
    empty,
    att.global.attributes,
    
    ## indicates which method is used to encode the apparatus of variants.
    attribute method {
      
      ## apparatus uses line numbers or other canonical reference scheme referenced in a base text.
      "location-referenced"
      | 
        ## apparatus indicates the precise locations of the beginning and ending of each lemma relative to a base text.
        "double-end-point"
      | 
        ## alternate readings of a passage are given in parallel in the text; no notion of a base text is necessary.
        "parallel-segmentation"
    },
    
    ## indicates whether the apparatus appears within the running text or external to it.
    attribute location {
      
      ## apparatus appears within the running text.
      "internal"
      | 
        ## apparatus appears outside the base text.
        "external"
    }
    >> sch:pattern [
         id = "location-constraint-variantEncodingLocation"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:variantEncoding"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "(@location != 'external') or (@method != 'parallel-segmentation')"
             "\x{a}" ~
             '              The @location value "external" is inconsistent with the\x{a}' ~
             "              parallel-segmentation method of apparatus markup."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
model.rdgPart = wit | witStart | witEnd | lacunaStart | lacunaEnd
att.rdgPart.attributes = att.rdgPart.attribute.wit
att.rdgPart.attribute.wit =
  
  ## (witness or witnesses) contains a list of one or more sigla indicating the witnesses which begin or end at this point.
  attribute wit {
    list { data.pointer+ }
  }?
att.witnessed.attributes = att.witnessed.attribute.wit
att.witnessed.attribute.wit =
  
  ## (witness or witnesses) contains a list of one or more pointers indicating the witnesses which attest to a given reading.
  attribute wit {
    list { data.pointer+ }
  }?
att.textCritical.attributes =
  att.responsibility.attributes,
  att.textCritical.attribute.type,
  att.textCritical.attribute.cause,
  att.textCritical.attribute.varSeq,
  att.textCritical.attribute.hand
att.textCritical.attribute.type =
  
  ## classifies the reading according to some useful typology.
  ## Sample values include: 1] substantive; 2] orthographic
  attribute type { data.enumerated }?
att.textCritical.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  ## Sample values include: 1] homeoteleuton; 2] homeoarchy; 3] paleographicConfusion; 4] haplography; 5] dittography; 6] falseEmendation
  attribute cause { data.enumerated }?
att.textCritical.attribute.varSeq =
  
  ## (variant sequence) provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants on any one lemma.
  attribute varSeq { data.count }?
att.textCritical.attribute.hand =
  
  ## signifies the hand responsible for a particular reading in the witness.
  attribute hand { data.pointer }?
TEI =
  
  ## (TEI document) contains a single TEI-conformant document, comprising a TEI header and a text, either in isolation or as part of a teiCorpus element. [4.  15.1. ]
  element ns2:TEI {
    (teiHeader,
     ((model.resourceLike+, \text?) | \text))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    att.global.attributes,
    
    ## specifies the major version number of the TEI Guidelines against which this document is valid.
    attribute version { data.version }?,
    empty
  }
\text =
  
  ## contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4.  15.1. ]
  element ns2:text {
    (model.global*,
     (front, model.global*)?,
     (body | group),
     model.global*,
     (back, model.global*)?),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
body =
  
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. ]
  element ns2:body {
    (model.global*,
     (model.divTop, (model.global | model.divTop)*)?,
     (model.divGenLike, (model.global | model.divGenLike)*)?,
     ((model.divLike, (model.global | model.divGenLike)*)+
      | (model.div1Like, (model.global | model.divGenLike)*)+
      | ((model.common, model.global*)+,
         ((model.divLike, (model.global | model.divGenLike)*)+
          | (model.div1Like, (model.global | model.divGenLike)*)+)?)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
group =
  
  ## contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4.  4.3.1.  15.1. ]
  element ns2:group {
    ((model.divTop | model.global)*,
     ((\text | group), (\text | group | model.global)*),
     model.divBottom*),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
floatingText =
  
  ## contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. [4.3.2. ]
  element ns2:floatingText {
    (model.global*,
     (front, model.global*)?,
     (body | group),
     model.global*,
     (back, model.global*)?),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
\div =
  
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. ]
  element ns2:div {
    ((model.divTop | model.global)*,
     ((((model.divLike | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.divLike | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div1 =
  
  ## (level-1 text division) contains a first-level subdivision of the front, body, or back of a text. [4.1.2. ]
  element ns2:div1 {
    ((model.divTop | model.global)*,
     ((((model.div2Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div2Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div2 =
  
  ## (level-2 text division) contains a second-level subdivision of the front, body, or back of a text. [4.1.2. ]
  element ns2:div2 {
    ((model.divTop | model.global)*,
     ((((model.div3Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div3Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div3 =
  
  ## (level-3 text division) contains a third-level subdivision of the front, body, or back of a text. [4.1.2. ]
  element ns2:div3 {
    ((model.divTop | model.global)*,
     ((((model.div4Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div4Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div4 =
  
  ## (level-4 text division) contains a fourth-level subdivision of the front, body, or back of a text. [4.1.2. ]
  element ns2:div4 {
    ((model.divTop | model.global)*,
     ((((model.div5Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div5Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div5 =
  
  ## (level-5 text division) contains a fifth-level subdivision of the front, body, or back of a text. [4.1.2. ]
  element ns2:div5 {
    ((model.divTop | model.global)*,
     ((((model.div6Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div6Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div6 =
  
  ## (level-6 text division) contains a sixth-level subdivision of the front, body, or back of a text. [4.1.2. ]
  element ns2:div6 {
    ((model.divTop | model.global)*,
     ((((model.div7Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div7Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div7 =
  
  ## (level-7 text division) contains the smallest possible subdivision of the front, body or back of a text, larger than a paragraph. [4.1.2. ]
  element ns2:div7 {
    ((model.divTop | model.global)*,
     ((model.common, model.global*)+,
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
trailer =
  
  ## contains a closing title or footer appearing at the end of a division of a text.  [4.2.4.  4.2. ]
  element ns2:trailer {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
byline =
  
  ## contains the primary statement of responsibility given for a work on its title page or at the head or end of the work. [4.2.2.  4.5. ]
  element ns2:byline {
    (text | model.gLike | model.phrase | docAuthor | model.global)*,
    att.global.attributes,
    empty
  }
dateline =
  
  ## contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer.  [4.2.2. ]
  element ns2:dateline { macro.phraseSeq, att.global.attributes, empty }
argument =
  
  ## contains a formal list or prose description of the topics addressed by a subdivision of a text. [4.2.  4.6. ]
  element ns2:argument {
    ((model.global | model.headLike)*, (model.common, model.global*)+),
    att.global.attributes,
    empty
  }
epigraph =
  
  ## contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page.  [4.2.3.  4.2.  4.6. ]
  element ns2:epigraph {
    (model.common | model.global)*, att.global.attributes, empty
  }
opener =
  
  ## groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. [4.2. ]
  element ns2:opener {
    (text
     | model.gLike
     | model.phrase
     | argument
     | byline
     | dateline
     | epigraph
     | salute
     | signed
     | model.global)*,
    att.global.attributes,
    empty
  }
closer =
  
  ## groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. [4.2.2.  4.2. ]
  element ns2:closer {
    (text
     | model.gLike
     | signed
     | dateline
     | salute
     | model.phrase
     | model.global)*,
    att.global.attributes,
    empty
  }
salute =
  
  ## (salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. [4.2.2. ]
  element ns2:salute { macro.phraseSeq, att.global.attributes, empty }
signed =
  
  ## (signature) contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text.  [4.2.2. ]
  element ns2:signed { macro.paraContent, att.global.attributes, empty }
postscript =
  
  ## contains a postscript, e.g. to a letter. [4.2. ]
  element ns2:postscript {
    ((model.global | model.divTopPart)*,
     model.common,
     (model.global | model.common)*,
     (model.divBottomPart, model.global*)*),
    att.global.attributes,
    empty
  }
titlePage =
  
  ## (title page) contains the title page of a text, appearing within the front or back matter.  [4.6. ]
  element ns2:titlePage {
    (model.global*,
     model.titlepagePart,
     (model.titlepagePart | model.global)*),
    att.global.attributes,
    
    ## classifies the title page according to any convenient typology.
    attribute type { data.enumerated }?,
    empty
  }
docTitle =
  
  ## (document title) contains the title of a document, including all its constituents, as given on a title page. [4.6. ]
  element ns2:docTitle {
    (model.global*, (titlePart, model.global*)+),
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
titlePart =
  
  ## contains a subsection or division of the title of a work, as indicated on a title page. [4.6. ]
  element ns2:titlePart {
    macro.paraContent,
    att.global.attributes,
    
    ## specifies the role of this subdivision of the title.
    ## Suggested values include: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    [ a:defaultValue = "main" ]
    attribute type {
      
      ## main title of the work 
      "main"
      | 
        ## (subordinate) subtitle of the work 
        "sub"
      | 
        ## (alternate) alternative title of the work 
        "alt"
      | 
        ## abbreviated form of title
        "short"
      | 
        ## (descriptive) descriptive paraphrase of the work 
        "desc"
      | xsd:Name
    }?,
    empty
  }
docAuthor =
  
  ## (document author) contains the name of the author of the document, as given on the title page (often but not always contained in a byline). [4.6. ]
  element ns2:docAuthor {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
imprimatur =
  
  ## contains a formal statement authorizing the publication of a work, sometimes required to appear on a title page or its verso. [4.6. ]
  element ns2:imprimatur {
    macro.paraContent, att.global.attributes, empty
  }
docEdition =
  
  ## (document edition) contains an edition statement as presented on a title page of a document. [4.6. ]
  element ns2:docEdition {
    macro.paraContent, att.global.attributes, empty
  }
docImprint =
  
  ## (document imprint) contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. [4.6. ]
  element ns2:docImprint {
    (text
     | model.gLike
     | model.phrase
     | pubPlace
     | docDate
     | publisher
     | model.global)*,
    att.global.attributes,
    empty
  }
docDate =
  
  ## (document date) contains the date of a document, as given (usually) on a title page. [4.6. ]
  element ns2:docDate {
    macro.phraseSeq,
    att.global.attributes,
    
    ## gives the value of the date in standard form, i.e. YYYY-MM-DD.
    attribute when { data.temporal.w3c }?,
    empty
  }
front =
  
  ## (front matter) contains any prefatory matter (headers, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. [4.6.  4. ]
  element ns2:front {
    ((model.frontPart
      | model.pLike
      | model.pLike.front
      | model.global)*,
     (((model.div1Like,
        (model.div1Like | model.frontPart | model.global)*)
       | (model.divLike,
          (model.divLike | model.frontPart | model.global)*)),
      (model.divBottom, (model.divBottom | model.global)*)?)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
back =
  
  ## (back matter) contains any appendixes, etc. following the main part of a text. [4.7.  4. ]
  element ns2:back {
    ((model.frontPart
      | model.pLike.front
      | model.pLike
      | model.listLike
      | model.global)*,
     ((model.div1Like,
       (model.frontPart | model.div1Like | model.global)*)
      | (model.divLike,
         (model.frontPart | model.divLike | model.global)*))?,
     (model.divBottomPart, (model.divBottomPart | model.global)*)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
facsimile =
  
  ## contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. [11.1. ]
  element ns2:facsimile {
    (front?, (model.graphicLike | surface | surfaceGrp)+, back?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
sourceDoc =
  
  ## contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. [11.1.  11.2.2. ]
  element ns2:sourceDoc {
    (model.global | model.graphicLike | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
att.global.facs.attributes = att.global.facs.attribute.facs
att.global.facs.attribute.facs =
  
  ## (facsimile) points to all or part of an image which corresponds with the content of the element.
  attribute facs {
    list { data.pointer+ }
  }?
att.global.change.attributes = att.global.change.attribute.change
att.global.change.attribute.change =
  
  ## points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder.
  attribute change {
    list { data.pointer+ }
  }?
surface =
  
  ## defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. [11.1.  11.2.2. ]
  element ns2:surface {
    ((model.global | model.labelLike | model.graphicLike)*,
     ((zone | line | surface | surfaceGrp), model.global*)*),
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    
    ## describes the method by which this surface is or was connected to the main surface
    ## Sample values include: 1] glued; 2] pinned; 3] sewn
    attribute attachment { data.enumerated }?,
    
    ## indicates whether the surface is attached and folded in such a way as to provide two writing surfaces
    attribute flipping { data.truthValue }?,
    empty
  }
surfaceGrp =
  
  ## defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit.  [11.1. ]
  element ns2:surfaceGrp {
    (model.global | surface | surfaceGrp)+,
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
att.coordinated.attributes =
  att.coordinated.attribute.start,
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry
att.coordinated.attribute.start =
  
  ## indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface.
  attribute start { data.pointer }?
att.coordinated.attribute.ulx =
  
  ## gives the x coordinate value for the upper left corner of a rectangular space.
  attribute ulx { data.numeric }?
att.coordinated.attribute.uly =
  
  ## gives the y coordinate value for the upper left corner of a rectangular space.
  attribute uly { data.numeric }?
att.coordinated.attribute.lrx =
  
  ## gives the x coordinate value for the lower right corner of a rectangular space.
  attribute lrx { data.numeric }?
att.coordinated.attribute.lry =
  
  ## gives the y coordinate value for the lower right corner of a rectangular space.
  attribute lry { data.numeric }?
zone =
  
  ## defines any two-dimensional area within a surface element. [11.1.  11.2.2. ]
  element ns2:zone {
    (text
     | model.graphicLike
     | model.global
     | surface
     | model.linePart)*,
    att.global.attributes,
    att.coordinated.attributes,
    att.typed.attributes,
    
    ## identifies a two dimensional area within the bounding box specified by the other attributes by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.
    attribute points {
      list { data.point, data.point, data.point, data.point* }
    }?,
    
    ## indicates the amount by which this zone has been rotated clockwise, with respect to the normal orientation of the parent surface element as implied by the dimensions given in the msDesc element or by the coordinates of the surface itself. The orientation is expressed in arc degrees.
    [ a:defaultValue = "0" ] attribute rotate { data.count }?,
    empty
  }
addSpan =
  
  ## (added span of text) marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also add). [11.3.1.4. ]
  element ns2:addSpan {
    empty
    >> sch:pattern [
         id = "addSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "addSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
damage =
  
  ## contains an area of damage to the text witness. [11.3.3.1. ]
  element ns2:damage {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.damaged.attributes,
    empty
  }
damageSpan =
  
  ## (damaged span of text) marks the beginning of a longer sequence of text which is damaged in some way but still legible. [11.3.3.1. ]
  element ns2:damageSpan {
    empty
    >> sch:pattern [
         id = "damageSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "\x{a}" ~
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "damageSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.damaged.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
delSpan =
  
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. [11.3.1.4. ]
  element ns2:delSpan {
    empty
    >> sch:pattern [
         id = "delSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "delSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
ex =
  
  ## (editorial expansion) contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. [11.3.1.2. ]
  element ns2:ex {
    macro.xtext, att.global.attributes, att.editLike.attributes, empty
  }
fw =
  
  ## (forme work) contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. [11.6. ]
  element ns2:fw {
    macro.phraseSeq,
    att.global.attributes,
    att.placement.attributes,
    
    ## classifies the material encoded according to some useful typology.
    ## Sample values include: 1] header; 2] footer; 3] pageNum(page number) ; 4] lineNum(line number) ; 5] sig(signature) ; 6] catch(catchword) 
    attribute type { data.enumerated }?,
    empty
  }
handNotes =
  
  ## contains one or more handNote elements documenting the different hands identified within the source texts. [11.3.2.1. ]
  element ns2:handNotes { handNote+, att.global.attributes, empty }
handShift =
  
  ## marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. [11.3.2.1. ]
  element ns2:handShift {
    empty,
    att.global.attributes,
    att.handFeatures.attributes,
    att.responsibility.attributes,
    
    ## identifies the new hand.
    attribute new { data.pointer }?,
    empty
  }
am =
  
  ## (abbreviation marker) contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. [11.3.1.2. ]
  element ns2:am {
    (text | model.gLike | model.pPart.transcriptional)*,
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    empty
  }
restore =
  
  ## indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. [11.3.1.6. ]
  element ns2:restore {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    empty
  }
space =
  
  ## indicates the location of a significant space in the copy text. [11.5.1. ]
  element ns2:space {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.dimensions.attributes,
    
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      
      ## the space is horizontal.
      "horizontal"
      | 
        ## the space is vertical.
        "vertical"
    }?,
    
    ## (responsible party) indicates the individual responsible for identifying and measuring the space.
    attribute resp { data.pointer }?,
    empty
  }
subst =
  
  ## (substitution) groups one or more deletions with one or more additions when the combination is to be regarded as a single intervention in the text. [11.3.1.5. ]
  element ns2:subst {
    ((add | del | model.milestoneLike)+)
    >> sch:pattern [
         id = "subst-constraint-substContents1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:subst"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "child::tei:add and child::tei:del"
             "\x{a}" ~
             "                  "
             sch:name [ ]
             " must have at least one child add and at least one child del"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    empty
  }
substJoin =
  
  ## (substitution join) identifies a series of possibly fragmented additions, deletions or other revisions on a manuscript that combine to make up a single intervention in the text [11.3.1.5. ]
  element ns2:substJoin {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.pointing.attributes,
    att.transcriptional.attributes,
    empty
  }
supplied =
  
  ## signifies text supplied by the transcriber or editor for any reason, typically because the original cannot be read because of physical damage or loss to the original. [11.3.3.1. ]
  element ns2:supplied {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indicates why the text has had to be supplied.
    attribute reason {
      list { data.word+ }
    }?,
    empty
  }
surplus =
  
  ## marks text present in the source which the editor believes to be superfluous or redundant. [11.3.3.1. ]
  element ns2:surplus {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indicates the grounds for believing this text to be superfluous.
    attribute reason {
      list { data.word+ }
    }?,
    empty
  }
line =
  
  ## contains the transcription of a topographic line in the source document [11.2.2. ]
  element ns2:line {
    (text | model.global | model.gLike | model.linePart)*,
    att.typed.attributes,
    att.global.attributes,
    att.coordinated.attributes,
    empty
  }
listTranspose =
  
  ## supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. [11.3.4.5. ]
  element ns2:listTranspose { transpose+, att.global.attributes, empty }
metamark =
  
  ## contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. [11.3.4.2. ]
  element ns2:metamark {
    macro.specialPara,
    att.spanning.attributes,
    att.placement.attributes,
    att.global.attributes,
    
    ## describes the function (for example status, insertion, deletion, transposition) of the mark.
    attribute function { data.word }?,
    
    ## identifies one or more elements to which the function indicated by the metamark applies. 
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
mod =
  
  ## represents any kind of modification identified within a single document. [11.3.4.1. ]
  element ns2:mod {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
redo =
  
  ## indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. [11.3.4.4. ]
  element ns2:redo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    
    ## points to one or more elements representing the interventions which are being reasserted.
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
retrace =
  
  ## contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. [11.3.4.3. ]
  element ns2:retrace {
    macro.paraContent,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    empty
  }
transpose =
  
  ## describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined.  [11.3.4.5. ]
  element ns2:transpose { (ptr, ptr+), att.global.attributes, empty }
undo =
  
  ## indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. [11.3.4.4. ]
  element ns2:undo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    
    ## points to one or more elements representing the interventions which are to be reverted or undone.
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
metDecl =
  
  ## (metrical notation declaration) documents the notation employed to represent a metrical pattern when this is specified as the value of a met, real, or rhyme attribute on any structural element of a metrical text (e.g. lg, l, or seg). [6.5.  6.3. ]
  element ns2:metDecl {
    ((model.pLike | model.noteLike)+ | metSym+),
    att.global.attributes,
    att.declarable.attributes,
    
    ## indicates whether the notation conveys the abstract metrical form, its actual prosodic realization, or the rhyme scheme, or some combination thereof.
    [ a:defaultValue = "met real" ]
    attribute type {
      list {
        (
         ## (met attribute) declaration applies to the abstract metrical form recorded on the met attribute
         "met"
         | 
           ## (real attribute) declaration applies to the actual realization of the conventional metrical structure recorded on the real attribute
           "real"
         | 
           ## (rhyme attribute) declaration applies to the rhyme scheme recorded on the rhyme attribute
           "rhyme"),
        (
         ## (met attribute) declaration applies to the abstract metrical form recorded on the met attribute
         "met"
         | 
           ## (real attribute) declaration applies to the actual realization of the conventional metrical structure recorded on the real attribute
           "real"
         | 
           ## (rhyme attribute) declaration applies to the rhyme scheme recorded on the rhyme attribute
           "rhyme")?,
        (
         ## (met attribute) declaration applies to the abstract metrical form recorded on the met attribute
         "met"
         | 
           ## (real attribute) declaration applies to the actual realization of the conventional metrical structure recorded on the real attribute
           "real"
         | 
           ## (rhyme attribute) declaration applies to the rhyme scheme recorded on the rhyme attribute
           "rhyme")?
      }
    }?,
    
    ## (regular expression pattern) specifies a regular expression defining any value that is legal for this notation.
    attribute pattern { data.pattern }?,
    empty
  }
metSym =
  
  ## (metrical notation symbol) documents the intended significance of a particular character or character sequence within a metrical notation, either explicitly or in terms of other symbol elements in the same metDecl. [6.5. ]
  element ns2:metSym {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## specifies the character or character sequence being documented.
    attribute value {
      list { data.word+ }
    },
    
    ## specifies whether the symbol is defined in terms of other symbols (terminal is set to false) or in prose (terminal is set to true).
    [ a:defaultValue = "true" ] attribute terminal { data.truthValue }?,
    empty
  }
att.metrical.attributes =
  att.metrical.attribute.met,
  att.metrical.attribute.real,
  att.metrical.attribute.rhyme
att.metrical.attribute.met =
  
  ## (metrical structure, conventional) contains a user-specified encoding for the conventional metrical structure of the element.
  attribute met { xsd:token }?
att.metrical.attribute.real =
  
  ## (metrical structure, realized) contains a user-specified encoding for the actual realization of the conventional metrical structure applicable to the element.
  attribute real { xsd:token }?
att.metrical.attribute.rhyme =
  
  ## (rhyme scheme) specifies the rhyme scheme applicable to a group of verse lines.
  attribute rhyme { xsd:token }?
att.enjamb.attributes = att.enjamb.attribute.enjamb
att.enjamb.attribute.enjamb =
  
  ## (enjambement) indicates that the end of a verse line is marked by enjambement.
  ## Sample values include: 1] no; 2] yes; 3] weak; 4] strong
  attribute enjamb { data.enumerated }?
caesura =
  
  ## marks the point at which a metrical line may be divided. [6.2. ]
  element ns2:caesura { empty, att.global.attributes, empty }
rhyme =
  
  ## marks the rhyming part of a metrical line. [6.4. ]
  element ns2:rhyme {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    
    ## provides a label to identify which part of a rhyme scheme this rhyming string instantiates.
    attribute label { data.word }?,
    empty
  }
att =
  
  ## (attribute) contains the name of an attribute appearing within running text. [22. ]
  element ns2:att {
    data.name,
    att.global.attributes,
    
    ## supplies an identifier for the scheme in which this name is defined.
    ## Sample values include: 1] TEI(text encoding initiative) ; 2] DBK(docbook) ; 3] XX(unknown) 
    [ a:defaultValue = "TEI" ] attribute scheme { data.enumerated }?,
    empty
  }
code =
  
  ## contains literal code from some formal language such as a programming language. [22.1.1. ]
  element ns2:code {
    text,
    att.global.attributes,
    
    ## (formal language) a name identifying the formal language in which the code is expressed
    attribute lang { data.word }?,
    empty
  }
eg =
  
  ## (example) contains any kind of illustrative example.  [22.4.4.  22.4.5. ]
  element ns2:eg { macro.phraseSeq, att.global.attributes, empty }
egXML =
  
  ## (example of XML) contains a single well-formed XML fragment demonstrating the use of some XML element or attribute, in which the egXML element itself functions as the root element. [22.1.1. ]
  element egXML {
    (text | macro.anyXML)*,
    att.global.attributes,
    att.source.attributes,
    
    ## indicates the intended validity of the example with respect to a schema.
    [ a:defaultValue = "true" ]
    attribute valid {
      
      ## the example is intended to be fully valid, assuming that its root element, or a provided root element, could have been used as a possible root element in the schema concerned.
      "true"
      | 
        ## the example could be transformed into a valid document by inserting any number of valid attributes and child elements anywhere within it; or it is valid against a version of the schema concerned in which the provision of character data, list, element, or attribute values has been made optional.
        "feasible"
      | 
        ## the example is not intended to be valid, and contains deliberate errors.
        "false"
    }?,
    empty
  }
gi =
  
  ## (element name) contains the name (generic identifier) of an element. [22.  22.4.4. ]
  element ns2:gi {
    data.name,
    att.global.attributes,
    
    ## supplies the name of the scheme in which this name is defined.
    ## Sample values include: 1] TEI; 2] DBK (docbook) ; 3] XX(unknown) ; 4] Schematron; 5] HTML
    [ a:defaultValue = "TEI" ] attribute scheme { data.enumerated }?,
    empty
  }
ident =
  
  ## (identifier) contains an identifier or name for an object of some kind in a formal language. ident is used for tokens such as variable names, class names, type names, function names etc. in formal programming languages. [22.1.1. ]
  element ns2:ident {
    text, att.global.attributes, att.typed.attributes, empty
  }
tag =
  
  ## contains text of a complete start- or end-tag, possibly including attribute specifications, but excluding the opening and closing markup delimiter characters. [22. ]
  element ns2:tag {
    text,
    att.global.attributes,
    
    ## indicates the type of XML tag intended
    attribute type {
      
      ## a start-tag, with delimiters < and > is intended
      "start"
      | 
        ## an end-tag, with delimiters </ and > is intended
        "end"
      | 
        ## a empty tag, with delimiters < and /> is intended
        "empty"
      | 
        ## a pi (processing instruction), with delimiters <? and ?> is intended
        "pi"
      | 
        ## a comment, with delimiters <!-- and --> is intended
        "comment"
      | 
        ## a marked-section, with delimiters <[CDATA[ and ]]> is intended
        "ms"
    }?,
    
    ## supplies the name of the schema in which this tag is defined.
    ## Sample values include: 1] TEI(text encoding initiative) ; 2] DBK(docbook) ; 3] XX(unknown) ; 4] Schematron; 5] HTML
    [ a:defaultValue = "TEI" ] attribute scheme { data.enumerated }?,
    empty
  }
val =
  
  ## (value) contains a single attribute value. [22.  22.4.5. ]
  element ns2:val { text, att.global.attributes, empty }
specList =
  
  ## (specification list) marks where a list of descriptions is to be inserted into the prose documentation. [22.1.2. ]
  element ns2:specList { specDesc+, att.global.attributes, empty }
specDesc =
  
  ## (specification description) indicates that a description of the specified element or class should be included at this point within a document. [22.1.2. ]
  element ns2:specDesc {
    empty,
    att.global.attributes,
    
    ## (identifier) supplies the identifier of the documentary element or class for which a description is to be obtained.
    attribute key { data.name }?,
    
    ## (attributes) supplies attribute names for which descriptions should additionally be obtained.
    attribute atts {
      list { data.name* }
    }?,
    empty
  }
classRef =
  
  ## points to the specification for an attribute or model class which is to be included in a schema [22.4.6. ]
  element ns2:classRef {
    empty,
    att.global.attributes,
    att.readFrom.attributes,
    
    ## the identifier used for the required class within the source indicated.
    attribute key { data.xmlName },
    empty
  }
elementRef =
  
  ## points to the specification for some element which is to be included in a schema [22.2. ]
  element ns2:elementRef {
    empty,
    att.global.attributes,
    att.readFrom.attributes,
    
    ## the identifier used for the required element within the source indicated.
    attribute key { data.xmlName },
    empty
  }
macroRef =
  
  ## points to the specification for some pattern which is to be included in a schema [22.4.7. ]
  element ns2:macroRef {
    empty,
    att.global.attributes,
    att.readFrom.attributes,
    
    ## the identifier used for the required pattern within the source indicated.
    attribute key { data.xmlName },
    empty
  }
moduleRef =
  
  ## (module reference) references a module which is to be incorporated into a schema. [22.2. ]
  element ns2:moduleRef {
    (content?)
    >> sch:pattern [
         id = "moduleRef-constraint-modref"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:moduleRef"
           "\x{a}" ~
           "               "
           sch:report [
             test = "* and @key"
             "\x{a}" ~
             "Child elements of "
             sch:name [ ]
             " are only allowed when an external module is being loaded\x{a}" ~
             "        "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.readFrom.attributes,
    (
     ## specifies a default prefix which will be prepended to all patterns from the imported module
     attribute prefix { data.xmlName }?)
    >> sch:pattern [
         id = "prefix-constraint-not-same-prefix"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:moduleRef"
           "\x{a}" ~
           "	                 "
           sch:report [
             test =
               "//*[ not( generate-id(.) eq generate-id(      current() ) ) ]/@prefix = @prefix"
             "The prefix attribute\x{a}" ~
             "	    of "
             sch:name [ ]
             " should not match that of any other\x{a}" ~
             "	    element (it would defeat the purpose)"
           ]
           "\x{a}" ~
           "               "
         ]
         "\x{a}" ~
         "         "
       ],
    (
     ## supplies a list of the elements which are to be copied from the specified module into the schema being defined.
     attribute include {
       list { data.xmlName* }
     }?
     | 
       ## supplies a list of the elements which are not to be copied from the specified module into the schema being defined.
       attribute except {
         list { data.xmlName* }
       }?),
    (
     ## the name of a TEI module
     attribute key { data.xmlName }?
     | 
       ## (uniform resource locator) refers to a non-TEI module of RELAX NG code by external location 
       attribute url { data.pointer }?),
    empty
  }
moduleSpec =
  
  ## (module specification) documents the structure, content, and purpose of a single module, i.e. a named and externally visible group of declarations. [22.2. ]
  element ns2:moduleSpec {
    (model.glossLike*, model.descLike+, exemplum*, remarks?, listRef*),
    att.global.attributes,
    att.identified.attributes,
    att.typed.attributes,
    empty
  }
schemaSpec =
  
  ## (schema specification) generates a TEI-conformant schema and documentation for it. [2.3.  22.2.  23.5.1. ]
  element ns2:schemaSpec {
    ((model.glossLike | model.descLike)*,
     (model.oddRef | model.oddDecl)*,
     constraintSpec*),
    att.global.attributes,
    att.identified.attributes,
    att.namespaceable.attributes,
    att.readFrom.attributes,
    
    ## specifies entry points to the schema, i.e. which elements may be used as the root of documents conforming to it. 
    [ a:defaultValue = "TEI" ]
    attribute start {
      list { data.name+ }
    }?,
    
    ## specifies a default prefix which will be prepended to all patterns relating to TEI elements, unless otherwise stated.
    attribute prefix { "" | data.xmlName }?,
    
    ## (target language) specifies which language to use when creating the objects in a schema if names for elements or attributes are available in more than one language
    attribute targetLang { data.language }?,
    
    ## (documentation language) specifies which languages to use when creating documentation if the description for an element, attribute, class or macro is available in more than one language
    attribute docLang {
      list { data.language+ }
    }?,
    empty
  }
specGrp =
  
  ## (specification group) contains any convenient grouping of specifications for use within the current module. [22.2. ]
  element ns2:specGrp {
    (model.oddDecl | model.oddRef | model.divPart)*,
    att.global.attributes,
    empty
  }
specGrpRef =
  
  ## (reference to a specification group) indicates that the declarations contained by the specGrp referenced should be inserted at this point. [22.2. ]
  element ns2:specGrpRef {
    empty,
    att.global.attributes,
    
    ## points at the specification group which logically belongs here.
    attribute target { data.pointer },
    empty
  }
elementSpec =
  
  ## (element specification) documents the structure, content, and purpose of a single element type. [22.4.4.  22. ]
  element ns2:elementSpec {
    ((model.glossLike | model.descLike)*,
     classes?,
     content?,
     valList?,
     constraintSpec*,
     attList?,
     exemplum*,
     remarks*,
     listRef*),
    att.global.attributes,
    att.identified.attributes,
    att.namespaceable.attributes,
    
    ## specifies a default prefix which will be prepended to all patterns relating to the element, unless otherwise stated. 
    attribute prefix { "" | data.name }?,
    empty
  }
classSpec =
  
  ## (class specification) contains reference information for a TEI element class; that is a group of elements which appear together in content models, or which share some common attribute, or both. [22.3.  22.4.6. ]
  element ns2:classSpec {
    ((model.glossLike | model.descLike)*,
     classes?,
     constraintSpec*,
     attList?,
     exemplum*,
     remarks*,
     listRef*),
    att.global.attributes,
    att.identified.attributes,
    
    ## indicates whether this is a model class or an attribute class
    attribute type {
      
      ## (content model) members of this class appear in the same content models
      "model"
      | 
        ## (attributes) members of this class share common attributes
        "atts"
    },
    
    ## indicates which alternation and sequence instantiations of a model class may be referenced. By default, all variations are permitted.
    attribute generate {
      list {
        (
         ## members of the class are alternatives
         "alternation"
         | 
           ## members of the class are to be provided in sequence
           "sequence"
         | 
           ## members of the class may be provided, in sequence, but are optional
           "sequenceOptional"
         | 
           ## members of the class may be provided one or more times, in sequence, but are optional. 
           "sequenceOptionalRepeatable"
         | 
           ## members of the class may be provided one or more times, in sequence
           "sequenceRepeatable"),
        (
         ## members of the class are alternatives
         "alternation"
         | 
           ## members of the class are to be provided in sequence
           "sequence"
         | 
           ## members of the class may be provided, in sequence, but are optional
           "sequenceOptional"
         | 
           ## members of the class may be provided one or more times, in sequence, but are optional. 
           "sequenceOptionalRepeatable"
         | 
           ## members of the class may be provided one or more times, in sequence
           "sequenceRepeatable")?,
        (
         ## members of the class are alternatives
         "alternation"
         | 
           ## members of the class are to be provided in sequence
           "sequence"
         | 
           ## members of the class may be provided, in sequence, but are optional
           "sequenceOptional"
         | 
           ## members of the class may be provided one or more times, in sequence, but are optional. 
           "sequenceOptionalRepeatable"
         | 
           ## members of the class may be provided one or more times, in sequence
           "sequenceRepeatable")?,
        (
         ## members of the class are alternatives
         "alternation"
         | 
           ## members of the class are to be provided in sequence
           "sequence"
         | 
           ## members of the class may be provided, in sequence, but are optional
           "sequenceOptional"
         | 
           ## members of the class may be provided one or more times, in sequence, but are optional. 
           "sequenceOptionalRepeatable"
         | 
           ## members of the class may be provided one or more times, in sequence
           "sequenceRepeatable")?,
        (
         ## members of the class are alternatives
         "alternation"
         | 
           ## members of the class are to be provided in sequence
           "sequence"
         | 
           ## members of the class may be provided, in sequence, but are optional
           "sequenceOptional"
         | 
           ## members of the class may be provided one or more times, in sequence, but are optional. 
           "sequenceOptionalRepeatable"
         | 
           ## members of the class may be provided one or more times, in sequence
           "sequenceRepeatable")?
      }
    }?,
    empty
  }
macroSpec =
  
  ## (macro specification) documents the function and implementation of a pattern.  [22.3.  22.4.7. ]
  element ns2:macroSpec {
    ((model.glossLike | model.descLike)*,
     (content | valList)*,
     constraintSpec*,
     exemplum*,
     remarks*,
     listRef*),
    att.global.attributes,
    att.identified.attributes,
    
    ## indicates which type of entity should be generated, when an ODD processor is generating a module using XML DTD syntax.
    attribute type {
      
      ## (parameter entity) 
      "pe"
      | 
        ## (datatype entity) 
        "dt"
    }?,
    empty
  }
remarks =
  
  ## contains any commentary or discussion about the usage of an element, attribute, class, or entity not otherwise documented within the containing element. [22.4.4.  22.4.5.  22.4.6.  22.4.7. ]
  element ns2:remarks {
    model.pLike+,
    att.global.attributes,
    att.translatable.attributes,
    empty
  }
listRef =
  
  ## (list of references) supplies a list of significant references to places where this element is discussed, in the current document or elsewhere.
  element ns2:listRef { ptr+, att.global.attributes, empty }
exemplum =
  
  ## groups an example demonstrating the use of an element along with optional paragraphs of commentary. [22.4.4. ]
  element ns2:exemplum {
    (model.pLike*, (egXML | eg), model.pLike*),
    att.global.attributes,
    att.typed.attributes,
    att.translatable.attributes,
    empty
  }
classes =
  
  ## specifies all the classes of which the documented element or class is a member or subclass. [22.4.4.  22.4.6. ]
  element ns2:classes {
    memberOf*,
    att.global.attributes,
    
    ## specifies the effect of this declaration on its parent module.
    [ a:defaultValue = "replace" ]
    attribute mode {
      
      ## this declaration changes the declaration of the same name in the current definition
      "change"
      | 
        ## this declaration replaces the declaration of the same name in the current definition
        "replace"
    }?,
    empty
  }
memberOf =
  
  ## specifies class membership of the documented element or class. [22.4.3. ]
  element ns2:memberOf {
    macro.xtext,
    att.global.attributes,
    
    ## specifies the identifier for a class of which the documented element or class is a member or subclass
    attribute key { data.name }?,
    
    ## specifies the effect of this declaration on its parent module.
    [ a:defaultValue = "add" ]
    attribute mode {
      
      ## this declaration is added to the current definitions
      "add"
      | 
        ## this declaration and all of its children are removed from the current setup
        "delete"
    }?,
    
    ## supplies the maximum number of times the element can occur in elements which use this model class in their content model
    attribute max { data.numeric }?,
    
    ## supplies the minumum number of times the element must occur in elements which use this model class in their content model
    attribute min { data.numeric }?,
    empty
  }
equiv =
  
  ## (equivalent) specifies a component which is considered equivalent to the parent element, either by co-reference, or by external link. [3.3.4.  22.4.1. ]
  element ns2:equiv {
    empty,
    att.global.attributes,
    att.internetMedia.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), naming the underlying concept of which the parent is a representation.
    attribute name { data.name }?,
    
    ## (uniform resource identifier) references the underlying concept of which the parent is a representation by means of some external identifier
    attribute uri { data.pointer }?,
    
    ## references an external script which contains a method to transform instances of this element to canonical TEI 
    attribute filter { data.pointer }?,
    empty
  }
altIdent =
  
  ## (alternate identifier) supplies the recommended XML name for an element, class, attribute, etc. in some language. [3.3.4.  22.4.1. ]
  element ns2:altIdent {
    text, att.global.attributes, att.typed.attributes, empty
  }
content =
  
  ## (content model) contains the text of a declaration for the schema documented. [22.4.4. ]
  element ns2:content {
    macro.schemaPattern*,
    att.global.attributes,
    
    ## controls whether or not pattern names generated in the corresponding RELAXNG schema source are automatically prefixed to avoid potential nameclashes. 
    [ a:defaultValue = "true" ]
    attribute autoPrefix {
      
      ## Each name referenced in e.g. a rng:ref element within a content model is automatically prefixed by the value of the prefix attribute on the current schemaSpec
      "true"
      | 
        ## No prefixes are added: any prefix required by the value of the prefix attribute on the current schemaSpec must therefore be supplied explicitly, as appropriate.
        "false"
    }?,
    empty
  }
constraint =
  
  ##  (constraint rules) the formal rules of a constraint [22.4.4. ]
  element ns2:constraint {
    (text | macro.anyXML), att.global.attributes, empty
  }
constraintSpec =
  
  ##  (constraint on schema) contains a constraint, expressed in some formal syntax, which cannot be expressed in the structural content model [22.4.4. ]
  element ns2:constraintSpec {
    model.descLike*,
    model.glossLike*,
    (constraint?)
    >> sch:ns [
         prefix = "s"
         uri = "http://www.ascc.net/xml/schematron"
       ]
    >> sch:pattern [
         id = "constraintSpec-constraint-sch"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:constraintSpec"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "tei:constraint/s:* and    not(@scheme='schematron')"
             "\x{a}" ~
             "	Rules in the Schematron 1.* language must be inside\x{a}" ~
             "	a constraint with a value of 'schematron' on the scheme attribute\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:ns [
         prefix = "sch"
         uri = "http://purl.oclc.org/dsdl/schematron"
       ]
    >> sch:pattern [
         id = "constraintSpec-constraint-isosch"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:constraintSpec"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "tei:constraint/sch:* and    not(@scheme='isoschematron')"
             "\x{a}" ~
             "	Rules in the ISO Schematron language must be inside\x{a}" ~
             "	a constraint with a value of 'isoschematron' on the scheme attribute\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.identified.attributes,
    att.typed.attributes,
    
    ## supplies the name of the language in which the constraints are defined
    attribute scheme {
      
      ##  (Schematron) 
      "schematron"
      | 
        ##  (ISO Schematron) 
        "isoschematron"
      | 
        ##  (XSLT) 
        "xsl"
      | 
        ##  (private constraint language) 
        "private"
    },
    empty
  }
attList =
  
  ## contains documentation for all the attributes associated with this element, as a series of attDef elements. [22.4.4.  22.4.6. ]
  element ns2:attList {
    (attRef | attDef | attList)+,
    att.global.attributes,
    
    ## (organization) specifies whether all the attributes in the list are available (org="group") or only one of them (org="choice")
    [ a:defaultValue = "group" ]
    attribute org {
      
      ## grouped
      "group"
      | 
        ## alternated
        "choice"
    }?,
    empty
  }
attDef =
  
  ## (attribute definition) contains the definition of a single attribute. [22.4.5. ]
  element ns2:attDef {
    ((model.glossLike | model.descLike)*,
     datatype?,
     constraintSpec*,
     defaultVal?,
     (valList | valDesc+)?,
     exemplum*,
     remarks*)
    >> sch:pattern [
         id = "attDef-constraint-attDefContents"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:attDef"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "   @mode eq 'change'       or @mode eq 'delete'       or tei:datatype       or tei:valList[@type='closed']       "
             "Attribute: the definition of the @"
             sch:value-of [ select = "@ident" ]
             " attribute in the "
             sch:value-of [ select = "ancestor::*[@ident][1]/@ident" ]
             "\x{a}" ~
             "                  "
             sch:value-of [ select = "' '" ]
             "\x{a}" ~
             "                  "
             sch:value-of [
               select = "local-name(ancestor::*[@ident][1])"
             ]
             " should have a closed valList or a datatype"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.identified.attributes,
    
    ## specifies the optionality of the attribute.
    [ a:defaultValue = "opt" ]
    attribute usage {
      
      ## (required) 
      "req"
      | 
        ## (mandatory when applicable ) 
        "mwa"
      | 
        ## (recommended ) 
        "rec"
      | 
        ## (recommended when applicable ) 
        "rwa"
      | 
        ## (optional ) 
        "opt"
    }?,
    
    ## (namespace) specifies the namespace to which this attribute belongs
    [ a:defaultValue = "http://www.tei-c.org/ns/1.0" ]
    attribute ns { data.namespace }?,
    empty
  }
attRef =
  
  ## (attribute pointer) points to the definition of an attribute or group of attributes. [22.2. ]
  element ns2:attRef {
    empty,
    att.global.attributes,
    
    ## the name of the pattern defining the attribute(s)
    attribute name { data.word },
    empty
  }
datatype =
  
  ## specifies the declared value for an attribute, by referring to any datatype defined by the chosen schema language. [1.4.2.  22.4.5. ]
  element ns2:datatype {
    macro.schemaPattern*,
    att.global.attributes,
    
    ## (minimum number of occurences) indicates the minimum number of times this datatype may occur in the specification of the attribute being defined
    [ a:defaultValue = "1" ] attribute minOccurs { data.count }?,
    
    ## (maximum number of occurences) indicates the maximum number of times this datatype may occur in the specification of the attribute being defined
    [ a:defaultValue = "1" ]
    attribute maxOccurs { data.count | "unbounded" }?,
    empty
  }
defaultVal =
  
  ## (default value) specifies the default declared value for an attribute. [22.4.5. ]
  element ns2:defaultVal { text, att.global.attributes, empty }
valDesc =
  
  ## (value description) specifies any semantic or syntactic constraint on the value that an attribute may take, additional to the information carried by the datatype element. [22.4.5. ]
  element ns2:valDesc {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.translatable.attributes,
    att.combinable.attributes,
    empty
  }
valItem =
  
  ## documents a single value in a predefined list of values. [22.4.5. ]
  element ns2:valItem {
    (model.descLike | model.glossLike)*,
    att.global.attributes,
    att.combinable.attributes,
    
    ## specifies the value concerned.
    attribute ident { data.text },
    empty
  }
valList =
  
  ## (value list) contains one or more valItem elements defining possible values. [22.4.5. ]
  element ns2:valList {
    valItem*,
    att.global.attributes,
    att.combinable.attributes,
    
    ## specifies the extensibility of the list of values specified. 
    [ a:defaultValue = "open" ]
    attribute type {
      
      ## only the values specified are permitted.
      "closed"
      | 
        ## (semi-open) all the values specified should be supported, but other values are legal and software should have appropriate fallback processing for them. 
        "semi"
      | 
        ## the values specified are sample values only.
        "open"
    }?,
    empty
  }
att.combinable.attributes =
  att.deprecated.attributes, att.combinable.attribute.mode
att.combinable.attribute.mode =
  
  ## specifies the effect of this declaration on its parent object.
  [ a:defaultValue = "add" ]
  attribute mode {
    
    ## this declaration is added to the current definitions
    "add"
    | 
      ## if present already, the whole of the declaration for this object is removed from the current setup
      "delete"
    | 
      ## this declaration changes the declaration of the same name in the current definition
      "change"
    | 
      ## this declaration replaces the declaration of the same name in the current definition
      "replace"
  }?
att.identified.attributes =
  att.combinable.attributes,
  att.identified.attribute.ident,
  att.identified.attribute.predeclare,
  att.identified.attribute.module,
  att.identified.attribute.status
att.identified.attribute.ident =
  
  ## supplies the identifier by which this element may be referenced.
  attribute ident { data.name }
att.identified.attribute.predeclare =
  
  ## says whether this object should be predeclared in the tei infrastructure module.
  [ a:defaultValue = "false" ] attribute predeclare { data.truthValue }?
att.identified.attribute.module =
  
  ## supplies a name for the module in which this object is to be declared.
  attribute module { data.xmlName }?
att.identified.attribute.status =
  
  ## indicates the current status of the object identified with respect to the current version of the TEI Guidelines.
  [ a:defaultValue = "stable" ]
  attribute status {
    
    ## the item is not recommended for use, and may be withdrawn at a future release.
    "deprecated"
    | 
      ## the item is new and still under review.
      "unstable"
    | 
      ## the item has changed significantly since the preceding version.
      "changed"
    | 
      ## the item has not recently changed and is not expected to do so except for correction of any errors.
      "stable"
  }?
att.deprecated.attributes = att.deprecated.attribute.validUntil
att.deprecated.attribute.validUntil =
  
  ## provides a date before which the construct being defined will not be removed.
  attribute validUntil { xsd:date }?
sch:pattern [
  id = "validUntil-constraint-deprecated"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@validUntil]"
    "\x{a}" ~
    "	        "
    sch:assert [
      test = "@validUntil cast as xs:date ge current-date()"
      "\x{a}" ~
      "            "
      sch:value-of [
        select =
          "if (@ident) then concat('The ',@ident) else concat('This ',local-name(.),' of ',ancestor::tei:*[@ident][1]/@ident)"
      ]
      " construct is outdated (as of "
      sch:value-of [ select = "@validUntil" ]
      "); ODD processors may ignore it, and it should probably be removed"
    ]
    "\x{a}" ~
    "	        "
    sch:report [
      test = "@validUntil cast as xs:date eq current-date()"
      "\x{a}" ~
      "            "
      sch:value-of [
        select =
          "if (@ident) then concat('The ',@ident) else concat('This ',local-name(.),' of ',ancestor::tei:*[@ident][1]/@ident)"
      ]
      " construct will be outdated as of tomorrow; ODD processors may then ignore it, and thus it should probably be removed soon"
    ]
    "\x{a}" ~
    "	     "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "validUntil-constraint-deprecated"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@validUntil]"
    "\x{a}" ~
    "            "
    sch:assert [
      test =
        "(@validUntil cast as xs:date - current-date()) lt (30*xs:dayTimeDuration('P1D'))"
      "\x{a}" ~
      "            "
      sch:value-of [
        select =
          "if (@ident) then concat('The ',@ident) else concat('This ',local-name(.),' of ',ancestor::tei:*[@ident][1]/@ident)"
      ]
      " construct is outdated (as of "
      sch:value-of [ select = "@validUntil" ]
      "); ODD processors may ignore it, and it should probably be removed"
    ]
    "\x{a}" ~
    "            "
    sch:report [
      test = "@validUntil cast as xs:date eq current-date()"
      "\x{a}" ~
      "            "
      sch:value-of [
        select =
          "if (@ident) then concat('The ',@ident) else concat('This ',local-name(.),' of ',ancestor::tei:*[@ident][1]/@ident)"
      ]
      " construct will be outdated as of tomorrow; ODD processors may then ignore it, and thus it should probably be removed soon"
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.namespaceable.attributes = att.namespaceable.attribute.ns
att.namespaceable.attribute.ns =
  
  ## (namespace) specifies the namespace to which this element belongs
  [ a:defaultValue = "http://www.tei-c.org/ns/1.0" ]
  attribute ns { data.namespace }?
mei_att.accidental.attributes = mei_att.accidental.attribute.accid
mei_att.accidental.attribute.accid =
  
  ## captures a written accidental.
  attribute accid { data.ACCIDENTAL.EXPLICIT }?
mei_att.accidental.performed.attributes =
  mei_att.accidental.performed.attribute.accid.ges
mei_att.accidental.performed.attribute.accid.ges =
  
  ## records the performed pitch inflection when it differs from the written accidental.
  attribute accid.ges { data.ACCIDENTAL.IMPLICIT }?
mei_att.altsym.attributes = mei_att.altsym.attribute.altsym
mei_att.altsym.attribute.altsym =
  
  ## provides a way of pointing to a user-defined symbol. It must contain an ID of a <symbolDef> element elsewhere in the document.
  attribute altsym { data.URI }?
mei_att.articulation.attributes = mei_att.articulation.attribute.artic
mei_att.articulation.attribute.artic =
  
  ## encodes the written articulation(s). Articulations are normally encoded in order from the note head outward; that is, away from the stem. See additional notes at att.vis.note. Only articulations should be encoded in the artic attribute; fingerings should be encoded using the <dir> element.
  attribute artic { data.ARTICULATIONS }?
mei_att.articulation.performed.attributes =
  mei_att.articulation.performed.attribute.artic.ges
mei_att.articulation.performed.attribute.artic.ges =
  
  ## records performed articulation that differs from the written value.
  attribute artic.ges { data.ARTICULATIONS }?
mei_att.augmentdots.attributes = mei_att.augmentdots.attribute.dots
mei_att.augmentdots.attribute.dots =
  
  ## records the number of augmentation dots required by a dotted duration.
  attribute dots { data.AUGMENTDOT }?
mei_att.authorized.attributes =
  mei_att.authorized.attribute.authority,
  mei_att.authorized.attribute.authURI
mei_att.authorized.attribute.authority =
  
  ## a name or label associated with the controlled vocabulary from which the value is taken.
  attribute authority { text }?
mei_att.authorized.attribute.authURI =
  
  ## the web-accessible location of the controlled vocabulary from which the value is taken.
  attribute authURI { data.URI }?
mei_att.barplacement.attributes =
  mei_att.barplacement.attribute.barplace,
  mei_att.barplacement.attribute.taktplace
mei_att.barplacement.attribute.barplace =
  
  ## records the location of a bar line.
  attribute barplace { data.BARPLACE }?
mei_att.barplacement.attribute.taktplace =
  
  ## If takt bar lines are to be used, then the taktplace attribute may be used to denote the staff location of the shortened bar line. The location may include staff lines, spaces, and the spaces directly above and below the staff. The value ranges between 0 (just below the staff) to 2 * number of staff lines (directly above the staff). For example, on a 5-line staff the lines would be numbered 1,3,5,7, and 9 while the spaces would be numbered 0,2,4,6,8,10. For example, a value of '9' puts the bar line through the top line of a 5-line staff.
  attribute taktplace { data.STAFFLOC }?
mei_att.beaming.vis.attributes =
  mei_att.beaming.vis.attribute.beam.rend,
  mei_att.beaming.vis.attribute.beam.slope
mei_att.beaming.vis.attribute.beam.rend =
  
  ## encodes whether a beam is "feathered" and in which direction.
  attribute beam.rend {
    
    ## beams lines grow farther apart from left to right.
    "acc"
    | 
      ## beam lines grow closer together from left to right.
      "rit"
    | 
      ## beam lines are equally-spaced over the entire length of the beam.
      "norm"
  }?
mei_att.beaming.vis.attribute.beam.slope =
  
  ## captures beam slope.
  attribute beam.slope { xsd:decimal }?
mei_att.bibl.attributes = mei_att.bibl.attribute.analog
mei_att.bibl.attribute.analog =
  
  ## contains a reference to a field or element in another descriptive encoding system to which this MEI element is comparable. 
  attribute analog { text }?
mei_att.calendared.attributes = mei_att.calendared.attribute.calendar
mei_att.calendared.attribute.calendar =
  
  ## indicates the calendar system to which a date belongs, for example, Gregorian, Julian, Roman, Mosaic, Revolutionary, Islamic, etc.
  attribute calendar { xsd:NMTOKEN }?
mei_att.canonical.attributes = mei_att.canonical.attribute.dbkey
mei_att.canonical.attribute.dbkey =
  
  ## used to record a value which serves as a primary key in an external database.
  attribute dbkey { xsd:NMTOKEN }?
mei_att.cleffing.log.attributes =
  mei_att.cleffing.log.attribute.clef.shape,
  mei_att.cleffing.log.attribute.clef.line,
  mei_att.cleffing.log.attribute.clef.dis,
  mei_att.cleffing.log.attribute.clef.dis.place
mei_att.cleffing.log.attribute.clef.shape =
  
  ## encodes a value for the clef symbol.
  attribute clef.shape { data.CLEFSHAPE }?
mei_att.cleffing.log.attribute.clef.line =
  
  ## contains a default value for the position of the clef. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute clef.line { data.CLEFLINE }?
mei_att.cleffing.log.attribute.clef.dis =
  
  ## records the amount of octave displacement to be applied to the clef.
  attribute clef.dis { data.OCTAVE.DIS }?
mei_att.cleffing.log.attribute.clef.dis.place =
  
  ## records the direction of octave displacement to be applied to the clef.
  attribute clef.dis.place { data.PLACE }?
mei_att.cleffing.vis.attributes =
  mei_att.cleffing.vis.attribute.clef.color,
  mei_att.cleffing.vis.attribute.clef.visible
mei_att.cleffing.vis.attribute.clef.color =
  
  ## describes the color of the clef.
  attribute clef.color { data.COLOR }?
mei_att.cleffing.vis.attribute.clef.visible =
  
  ## determines whether the clef is to be displayed.
  attribute clef.visible { data.BOOLEAN }?
mei_att.clefshape.attributes = mei_att.clefshape.attribute.shape
mei_att.clefshape.attribute.shape =
  
  ## describes a clef's shape.
  attribute shape { data.CLEFSHAPE }?
mei_att.color.attributes = mei_att.color.attribute.color
mei_att.color.attribute.color =
  
  ## used to indicate visual appearance. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute color { data.COLOR }?
mei_att.coloration.attributes = mei_att.coloration.attribute.colored
mei_att.coloration.attribute.colored =
  
  ## indicates this feature is 'colored'; that is, it is a participant in a change in rhythmic values. In mensural notation, coloration is indicated by colored notes (red, black, etc.) where void notes would otherwise occur. In CMN, coloration is indicated by an inverse color; that is, the note head is void when it would otherwise be filled and vice versa.
  attribute colored { data.BOOLEAN }?
mei_att.common.attributes =
  mei_att.id.attributes,
  mei_att.common.attribute.label,
  mei_att.common.attribute.n,
  mei_att.common.attribute.xmlbase
mei_att.common.attribute.label =
  
  ## provides a label for an element. The value may be any string.
  attribute label { text }?
mei_att.common.attribute.n =
  
  ## provides a name or number designation for an element. While the value need not be unique, it is required to be a single token.
  attribute n { xsd:NMTOKEN }?
mei_att.common.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { data.URI }?
mei_att.controlevent.attributes =
  mei_att.plist.attributes,
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes,
  mei_att.staffident.attributes,
  mei_att.layerident.attributes
mei_att.coordinated.attributes =
  mei_att.coordinated.attribute.ulx,
  mei_att.coordinated.attribute.uly,
  mei_att.coordinated.attribute.lrx,
  mei_att.coordinated.attribute.lry
mei_att.coordinated.attribute.ulx =
  
  ## indicates the upper-left corner x coordinate.
  attribute ulx { xsd:nonNegativeInteger }?
mei_att.coordinated.attribute.uly =
  
  ## indicates the upper-left corner y coordinate.
  attribute uly { xsd:nonNegativeInteger }?
mei_att.coordinated.attribute.lrx =
  
  ## indicates the lower-right corner x coordinate.
  attribute lrx { xsd:nonNegativeInteger }?
mei_att.coordinated.attribute.lry =
  
  ## indicates the lower-left corner x coordinate.
  attribute lry { xsd:nonNegativeInteger }?
mei_att.curvature.attributes =
  mei_att.curvature.attribute.bezier,
  mei_att.curvature.attribute.bulge,
  mei_att.curvature.attribute.curvedir
mei_att.curvature.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy coordinates, e.g., 19 45 -32 118.
  attribute bezier { text }?
mei_att.curvature.attribute.bulge =
  
  ## describes a curve as a set of distance values above or below an imaginary line connecting the endpoints of the curve. The bulge attribute must contain one or more decimal values expressed in inter-line units.
  attribute bulge { text }?
mei_att.curvature.attribute.curvedir =
  
  ## describes a curve with a generic term indicating the direction of curvature.
  attribute curvedir {
    
    ## upward curve.
    "above"
    | 
      ## downward curve.
      "below"
  }?
mei_att.curverend.attributes = mei_att.curverend.attribute.rend
mei_att.curverend.attribute.rend =
  
  ## describes the line style of the curve.
  attribute rend { data.CURVERENDITION }?
mei_att.datable.attributes =
  mei_att.datable.attribute.enddate,
  mei_att.datable.attribute.isodate,
  mei_att.datable.attribute.notafter,
  mei_att.datable.attribute.notbefore,
  mei_att.datable.attribute.startdate
mei_att.datable.attribute.enddate =
  
  ## contains the end point of a date range in standard ISO form.
  attribute enddate { data.ISODATE }?
mei_att.datable.attribute.isodate =
  
  ## provides the value of a textual date in standard ISO form.
  attribute isodate { data.ISODATE }?
mei_att.datable.attribute.notafter =
  
  ## contains an upper boundary for an uncertain date in standard ISO form.
  attribute notafter { data.ISODATE }?
mei_att.datable.attribute.notbefore =
  
  ## contains a lower boundary, in standard ISO form, for an uncertain date.
  attribute notbefore { data.ISODATE }?
mei_att.datable.attribute.startdate =
  
  ## contains the starting point of a date range in standard ISO form.
  attribute startdate { data.ISODATE }?
mei_att.datapointing.attributes = mei_att.datapointing.attribute.data
mei_att.datapointing.attribute.data =
  
  ## used to link metadata elements to one or more data-containing elements.
  attribute data {
    list { data.URI+ }
  }?
mei_att.declaring.attributes = mei_att.declaring.attribute.decls
mei_att.declaring.attribute.decls =
  
  ## identifies one or more metadata elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { data.URI+ }
  }?
mei_att.distances.attributes =
  mei_att.distances.attribute.dynam.dist,
  mei_att.distances.attribute.harm.dist,
  mei_att.distances.attribute.text.dist
mei_att.distances.attribute.dynam.dist =
  
  ## records the distance from the staff for dynamic marks in 1/2 inter-line units.
  attribute dynam.dist { xsd:decimal }?
mei_att.distances.attribute.harm.dist =
  
  ## records the default distance from the staff of harmonic indications, such as guitar chord grids or functional labels.
  attribute harm.dist { xsd:decimal }?
mei_att.distances.attribute.text.dist =
  
  ## determines how far from the staff to render text elements.
  attribute text.dist { xsd:decimal }?
mei_att.duration.default.attributes =
  mei_att.duration.default.attribute.dur.default
mei_att.duration.default.attribute.dur.default =
  
  ## contains a default duration in those situations when the first note, rest, chord, etc. in a measure does not have a duration specified.
  attribute dur.default { data.DURATION }?
mei_att.duration.musical.attributes =
  mei_att.duration.musical.attribute.dur
mei_att.duration.musical.attribute.dur =
  
  ## records the duration of a feature using the relative durational values provided by the data.DURATION datatype.
  attribute dur { data.DURATION }?
mei_att.duration.performed.attributes =
  mei_att.duration.performed.attribute.dur.ges
mei_att.duration.performed.attribute.dur.ges =
  
  ## records performed duration information that differs from written duration. Its value may be expressed in any convenient form, such as measures[s]+ beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML 'divisions', etc.
  attribute dur.ges { text }?
mei_att.duration.ratio.attributes =
  mei_att.duration.ratio.attribute.num,
  mei_att.duration.ratio.attribute.numbase
mei_att.duration.ratio.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute num { xsd:positiveInteger }?
mei_att.duration.ratio.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute numbase { xsd:positiveInteger }?
mei_att.duration.timestamp.attributes =
  mei_att.duration.timestamp.attribute.dur
mei_att.duration.timestamp.attribute.dur =
  
  ## records the duration of a feature using the relative durational values provided by the data.MEASUREBEAT datatype.
  attribute dur { data.MEASUREBEAT }?
mei_att.enclosingchars.attributes =
  mei_att.enclosingchars.attribute.enclose
mei_att.enclosingchars.attribute.enclose =
  
  ## records the characters often used to mark accidentals, articulations, and sometimes notes as having a cautionary or editorial function. For an example of cautionary accidentals enclosed in parentheses, see Read, p. 131, ex. 9-14.
  attribute enclose { data.ENCLOSURE }?
mei_att.event.attributes =
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes,
  mei_att.staffident.attributes,
  mei_att.layerident.attributes
mei_att.fermatapresent.attributes =
  mei_att.fermatapresent.attribute.fermata
mei_att.fermatapresent.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information about the fermata needs to be recorded, then a <fermata> element should be employed instead.
  attribute fermata { data.STAFFREL }?
mei_att.staffgroupingsym.attributes =
  mei_att.staffgroupingsym.attribute.symbol
mei_att.staffgroupingsym.attribute.symbol =
  
  ## specifies the symbol used to group a set of staves.
  attribute symbol {
    
    ## curved symbol, i.e., {.
    "brace"
    | 
      ## square symbol, i.e., [.
      "bracket"
    | 
      ## line symbol, i.e., |.
      "line"
    | 
      ## grouping symbol missing.
      "none"
  }?
mei_att.handident.attributes = mei_att.handident.attribute.hand
mei_att.handident.attribute.hand =
  
  ## signifies the hand responsible for an action. The value must be the ID of a <hand> element declared in the header.
  attribute hand { data.URI }?
mei_att.horizontalalign.attributes =
  mei_att.horizontalalign.attribute.halign
mei_att.horizontalalign.attribute.halign =
  
  ## records horizontal alignment.
  attribute halign {
    
    ## left aligned.
    "left"
    | 
      ## right aligned.
      "right"
    | 
      ## centered.
      "center"
    | 
      ## left and right aligned.
      "justify"
  }?
mei_att.id.attributes = mei_att.id.attribute.xmlid
mei_att.id.attribute.xmlid =
  
  ## regularizes the naming of an element and thus facilitates building links between it and other resources. Each id attribute within a document must have a unique value.
  attribute xml:id { xsd:ID }?
mei_att.instrumentident.attributes =
  mei_att.instrumentident.attribute.instr
mei_att.instrumentident.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the ID of an <instrDef> element elsewhere in the document.
  attribute instr { data.URI }?
mei_att.internetmedia.attributes =
  mei_att.internetmedia.attribute.mimetype
mei_att.internetmedia.attribute.mimetype =
  
  ## specifies the applicable MIME (multimedia internet mail extension) type. The value should be a valid MIME media type defined by the Internet Engineering Task Force in RFC 2046.
  attribute mimetype { text }?
mei_att.joined.attributes = mei_att.joined.attribute.join
mei_att.joined.attribute.join =
  
  ## used for linking visually separate entities that form a single logical entity, for example, multiple slurs broken across a system break that form a single musical phrase. Also used to indicate a measure which metrically completes the current one. Record the identifiers of the separately encoded components, excluding the one carrying the attribute.
  attribute join {
    list { data.URI+ }
  }?
mei_att.keySigDefault.log.attributes =
  mei_att.keySigDefault.log.attribute.key.accid,
  mei_att.keySigDefault.log.attribute.key.mode,
  mei_att.keySigDefault.log.attribute.key.pname,
  mei_att.keySigDefault.log.attribute.key.sig,
  mei_att.keySigDefault.log.attribute.key.sig.mixed
mei_att.keySigDefault.log.attribute.key.accid =
  
  ## contains an accidental for the tonic key, if one is required, e.g., if key.pname equals 'c' and key.accid equals 's', then a tonic of C# is indicated.
  attribute key.accid { data.ACCIDENTAL.IMPLICIT }?
mei_att.keySigDefault.log.attribute.key.mode =
  
  ## indicates major, minor, or other tonality.
  attribute key.mode { data.MODE }?
mei_att.keySigDefault.log.attribute.key.pname =
  
  ## holds the pitch name of the tonic key, e.g. 'c' for the key of C.
  attribute key.pname { data.PITCHNAME }?
mei_att.keySigDefault.log.attribute.key.sig =
  
  ## indicates where the key lies in the circle of fifths.
  attribute key.sig { data.KEYSIGNATURE }?
mei_att.keySigDefault.log.attribute.key.sig.mixed =
  
  ## Mixed key signatures, e.g. those consisting of a mixture of flats and sharps (Read, p. 143, ex. 9-39), and key signatures with unorthodox placement of the accidentals (Read, p. 141) must be indicated by setting the key.sig attribute to 'mixed' and providing explicit key signature information in the key.sig.mixed attribute or in the <keySig> element. It is intended that key.sig.mixed contain a series of tokens with each token containing pitch name, accidental, and octave, such as 'A4 Cs5 Ef5' that indicate what key accidentals should be rendered and where they should be placed.
  attribute key.sig.mixed {
    list {
      xsd:token {
        pattern = "[a-g][0-9](\-{1,3}|f{1,3}|#{1,3}|s{1,3}|x)"
      }+
    }
  }?
mei_att.keySigDefault.vis.attributes =
  mei_att.keySigDefault.vis.attribute.key.sig.show,
  mei_att.keySigDefault.vis.attribute.key.sig.showchange
mei_att.keySigDefault.vis.attribute.key.sig.show =
  
  ## indicates whether the key signature should be displayed.
  attribute key.sig.show { data.BOOLEAN }?
mei_att.keySigDefault.vis.attribute.key.sig.showchange =
  
  ## determines whether cautionary accidentals should be displayed at a key change.
  attribute key.sig.showchange { data.BOOLEAN }?
mei_att.labels.addl.attributes =
  mei_att.labels.addl.attribute.label.abbr
mei_att.labels.addl.attribute.label.abbr =
  
  ## provides a label for a group of staves on pages after the first page. Usually, this label takes an abbreviated form.
  attribute label.abbr { text }?
mei_att.lang.attributes = mei_att.lang.attribute.xmllang
mei_att.lang.attribute.xmllang =
  
  ## identifies the language of the element's content. The values for this attribute are language 'tags' as defined in BCP 47. All language tags that make use of private use sub-tags must be documented in a corresponding language element in the MEI header whose id attribute is the same as the language tag's value.
  attribute xml:lang { xsd:language }?
mei_att.layerident.attributes = mei_att.layerident.attribute.layer
mei_att.layerident.attribute.layer =
  
  ## identifies the layer to which a feature applies.
  attribute layer {
    list { xsd:positiveInteger+ }
  }?
mei_att.lineloc.attributes = mei_att.lineloc.attribute.line
mei_att.lineloc.attribute.line =
  
  ## indicates the line upon which a feature stands. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute line { data.CLEFLINE }?
mei_att.linerend.attributes = mei_att.linerend.attribute.rend
mei_att.linerend.attribute.rend =
  
  ## records the appearance of a line.
  attribute rend { data.LINERENDITION }?
mei_att.pointing.attributes =
  mei_att.pointing.attribute.xlinkactuate,
  mei_att.pointing.attribute.xlinkrole,
  mei_att.pointing.attribute.xlinkshow,
  mei_att.pointing.attribute.target,
  mei_att.pointing.attribute.targettype,
  mei_att.pointing.attribute.xlinktitle
mei_att.pointing.attribute.xlinkactuate =
  
  ## defines whether a link occurs automatically or must be requested by the user.
  attribute xlink:actuate {
    
    ## load the target resource immediately.
    "onLoad"
    | 
      ## load the target resource upon user request.
      "onRequest"
    | 
      ## do not permit loading of the target resource.
      "none"
    | 
      ## behavior other than allowed by the other values of this attribute.
      "other"
  }?
mei_att.pointing.attribute.xlinkrole =
  
  ## indicates a property of the entire link. The value of the role attribute must be a URI.
  attribute xlink:role { data.URI }?
mei_att.pointing.attribute.xlinkshow =
  
  ## defines how a remote resource is rendered.
  attribute xlink:show {
    
    ## open in a new window.
    "new"
    | 
      ## load the referenced resource in the same window.
      "replace"
    | 
      ## embed the referenced resource at the point of the link.
      "embed"
    | 
      ## do not permit traversal to the referenced resource.
      "none"
    | 
      ## behavior other than permitted by the other values of this attribute.
      "other"
  }?
mei_att.pointing.attribute.target =
  
  ## allows the use of one or more previously-undeclared URIs to identify an external electronic object.
  attribute target { data.URIS }?
mei_att.pointing.attribute.targettype =
  
  ## in contrast with the role attribute, allows the target resource to be characterized using any convenient classification scheme or typology.
  attribute targettype { xsd:NMTOKEN }?
mei_att.pointing.attribute.xlinktitle =
  
  ## contains a human-readable description of the entire link.
  attribute xlink:title { text }?
mei_att.lyricstyle.attributes =
  mei_att.lyricstyle.attribute.lyric.align,
  mei_att.lyricstyle.attribute.lyric.fam,
  mei_att.lyricstyle.attribute.lyric.name,
  mei_att.lyricstyle.attribute.lyric.size,
  mei_att.lyricstyle.attribute.lyric.style,
  mei_att.lyricstyle.attribute.lyric.weight
mei_att.lyricstyle.attribute.lyric.align =
  
  ## describes the alignment of lyric syllables associated with a note or chord.
  attribute lyric.align { xsd:decimal }?
mei_att.lyricstyle.attribute.lyric.fam =
  
  ## sets the font family default value for lyrics.
  attribute lyric.fam { data.FONTFAMILY }?
mei_att.lyricstyle.attribute.lyric.name =
  
  ## sets the font name default value for lyrics.
  attribute lyric.name { data.FONTNAME }?
mei_att.lyricstyle.attribute.lyric.size =
  
  ## sets the default font size value for lyrics.
  attribute lyric.size { xsd:decimal }?
mei_att.lyricstyle.attribute.lyric.style =
  
  ## sets the default font style value for lyrics.
  attribute lyric.style { data.FONTSTYLE }?
mei_att.lyricstyle.attribute.lyric.weight =
  
  ## sets the default font weight value for lyrics.
  attribute lyric.weight { data.FONTWEIGHT }?
mei_att.measurement.attributes = mei_att.measurement.attribute.unit
mei_att.measurement.attribute.unit =
  
  ## indicates the unit used for a measurement of size.
  ## Suggested values include: 1] cm; 2] mm; 3] in; 4] px; 5] pt; 6] pc
  attribute unit {
    
    ## centimeter.
    "cm"
    | 
      ## millimeter.
      "mm"
    | 
      ## inch.
      "in"
    | 
      ## pixel.
      "px"
    | 
      ## point.
      "pt"
    | 
      ## pica.
      "pc"
    | xsd:Name
  }?
mei_att.mediabounds.attributes =
  mei_att.mediabounds.attribute.begin,
  mei_att.mediabounds.attribute.end,
  mei_att.mediabounds.attribute.betype
mei_att.mediabounds.attribute.begin =
  
  ## specifies a point where the relevant content begins. A numerical value must be less and a time value must be earlier than that in the end attribute.
  attribute begin { text }?
mei_att.mediabounds.attribute.end =
  
  ## specifies a point where the relevant content ends. If not specified, the end of the content is assumed to be the end point. A numerical value must be greater and a time value must be later than that in the begin attribute.
  attribute end { text }?
mei_att.mediabounds.attribute.betype =
  
  ## type of values used in the begin/end attributes. The begin and end attributes can only be interpreted meaningfully in conjunction with this attribute.
  attribute betype {
    
    ## a modified ISO time format (HH:MM:SS.ss) where 'HH' should be interpreted as any number of hours and '.ss' should be interpreted as any number of fractional parts of a second.
    "time"
  }?
mei_att.width.attributes = mei_att.width.attribute.width
mei_att.width.attribute.width =
  
  ## measurement of the horizontal dimension of an entity. This value can only be interpreted meaningfully in combination with the units attribute. The width attribute may be used to capture measure width data for interchange with music printing systems that utilize this information for printing. On <barLine> the width attribute captures the width of the preceding measure.
  attribute width { xsd:decimal }?
mei_att.medium.attributes = mei_att.medium.attribute.medium
mei_att.medium.attribute.medium =
  
  ## describes the writing medium.
  attribute medium { text }?
mei_att.meiversion.attributes = mei_att.meiversion.attribute.meiversion
mei_att.meiversion.attribute.meiversion =
  
  ## specifies the version number of the MEI Guidelines in use.
  [ a:defaultValue = "2012" ]
  attribute meiversion {
    
    ## this version of the schema.
    "2012"
  }?
mei_att.meterconformance.attributes =
  mei_att.meterconformance.attribute.metcon
mei_att.meterconformance.attribute.metcon =
  
  ## indicates the relationship between the content of a staff or layer and the prevailing meter.
  attribute metcon {
    
    ## conformant with the prevailing meter.
    "c"
    | 
      ## incomplete; i.e., not enough beats.
      "i"
    | 
      ## overfull; i.e., too many beats.
      "o"
  }?
mei_att.meterconformance.bar.attributes =
  mei_att.meterconformance.bar.attribute.metcon,
  mei_att.meterconformance.bar.attribute.control
mei_att.meterconformance.bar.attribute.metcon =
  
  ## indicates the relationship between the content of a measure and the prevailing meter.
  attribute metcon { data.BOOLEAN }?
mei_att.meterconformance.bar.attribute.control =
  
  ## indicates whether or not a bar line is "controlling"; that is, if it indicates a point of alignment across all the parts. Bar lines within a score are usually controlling; that is, they "line up". Bar lines within parts may or may not be controlling. When applied to <measure>, this attribute indicates the nature of the right barline but not the left.
  attribute control { data.BOOLEAN }?
mei_att.meterSigDefault.log.attributes =
  mei_att.meterSigDefault.log.attribute.meter.count,
  mei_att.meterSigDefault.log.attribute.meter.unit
mei_att.meterSigDefault.log.attribute.meter.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter signature.
  attribute meter.count { xsd:decimal }?
mei_att.meterSigDefault.log.attribute.meter.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute meter.unit { xsd:decimal }?
mei_att.meterSigDefault.vis.attributes =
  mei_att.meterSigDefault.vis.attribute.meter.rend,
  mei_att.meterSigDefault.vis.attribute.meter.showchange,
  mei_att.meterSigDefault.vis.attribute.meter.sym
mei_att.meterSigDefault.vis.attribute.meter.rend =
  
  ## contains an indication of how the meter signature should be rendered.
  attribute meter.rend {
    
    ## the lower number in the meter signature is replaced by a note symbol.
    "denomsym"
    | 
      ## meter signature rendered using traditional numeric values.
      "norm"
    | 
      ## meter signature not rendered.
      "invis"
  }?
mei_att.meterSigDefault.vis.attribute.meter.showchange =
  
  ## determines whether a new meter signature should be displayed when the meter signature changes.
  attribute meter.showchange { data.BOOLEAN }?
mei_att.meterSigDefault.vis.attribute.meter.sym =
  
  ## indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute meter.sym { data.METERSIGN }?
mei_att.mmtempo.attributes = mei_att.mmtempo.attribute.mm
mei_att.mmtempo.attribute.mm =
  
  ## used to describe tempo in terms of beats (meter signature denominator) per minute, ala M.M. (Maezel's Metronome).
  attribute mm { data.TEMPOVALUE }?
mei_att.multinummeasures.attributes =
  mei_att.multinummeasures.attribute.multi.number
mei_att.multinummeasures.attribute.multi.number =
  
  ## indicates whether programmatically calculated counts of multiple measures of rest (mRest) and whole measure repeats (mRpt) in parts should be rendered.
  attribute multi.number { data.BOOLEAN }?
mei_att.name.attributes =
  mei_att.authorized.attributes,
  mei_att.canonical.attributes,
  mei_att.name.attribute.nymref,
  mei_att.name.attribute.role
mei_att.name.attribute.nymref =
  
  ## used to record a pointer to the regularized form of the name elsewhere in the document.
  attribute nymref { data.URI }?
mei_att.name.attribute.role =
  
  ## used to specify further information about the entity referenced by this name, for example, the occupation of a person or the status of a place.
  attribute role { text }?
mei_att.octave.attributes = mei_att.octave.attribute.oct
mei_att.octave.attribute.oct =
  
  ## captures written octave information.
  attribute oct { data.OCTAVE }?
mei_att.octavedefault.attributes =
  mei_att.octavedefault.attribute.octave.default
mei_att.octavedefault.attribute.octave.default =
  
  ## contains a default octave specification for use when the first note, rest, chord, etc. in a measure does not have an octave value specified.
  attribute octave.default { data.OCTAVE }?
mei_att.onelinestaff.attributes =
  mei_att.onelinestaff.attribute.ontheline
mei_att.onelinestaff.attribute.ontheline =
  
  ## determines the placement of notes on a 1-line staff. A value of 'true' places all notes on the line, while a value of 'false' places stems-up notes above the line and stems-down notes below the line.
  attribute ontheline { data.BOOLEAN }?
mei_att.octavedisplacement.attributes =
  mei_att.octavedisplacement.attribute.dis,
  mei_att.octavedisplacement.attribute.dis.place
mei_att.octavedisplacement.attribute.dis =
  
  ## records the amount of octave displacement.
  attribute dis { data.OCTAVE.DIS }?
mei_att.octavedisplacement.attribute.dis.place =
  
  ## records the direction of octave displacement.
  attribute dis.place { data.PLACE }?
mei_att.plist.attributes =
  mei_att.plist.attribute.plist, mei_att.plist.attribute.evaluate
mei_att.plist.attribute.plist =
  
  ## contains a space separated list of references that identify logical events that participate in a collection, such as notes under a phrase mark.
  attribute plist { data.URIS }?
mei_att.plist.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
mei_att.pitch.attributes = mei_att.pitch.attribute.pname
mei_att.pitch.attribute.pname =
  
  ## contains a written pitch name.
  attribute pname { data.PITCHNAME }?
mei_att.pitched.attributes =
  mei_att.pitch.attributes, mei_att.octave.attributes
mei_att.placement.attributes = mei_att.placement.attribute.place
mei_att.placement.attribute.place =
  
  ## captures the placement of the item with respect to the staff with which it is associated.
  attribute place { data.STAFFREL }?
mei_att.relativesize.attributes = mei_att.relativesize.attribute.size
mei_att.relativesize.attribute.size =
  
  ## describes the relative size of a feature.
  attribute size { data.SIZE }?
mei_att.responsibility.attributes =
  mei_att.responsibility.attribute.resp
mei_att.responsibility.attribute.resp =
  
  ## captures information regarding responsibility for some aspect of the text's creation, transcription, editing, or encoding. Its value must point to one or more identifiers declared in the document header.
  attribute resp {
    list { data.URI+ }
  }?
mei_att.scalable.attributes = mei_att.scalable.attribute.scale
mei_att.scalable.attribute.scale =
  
  ## scale factor to be applied to the feature to make it the desired display size.
  attribute scale { data.PERCENT }?
mei_att.sequence.attributes = mei_att.sequence.attribute.seq
mei_att.sequence.attribute.seq =
  
  ## used to assign a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:positiveInteger }?
mei_att.slashcount.attributes = mei_att.slashcount.attribute.slash
mei_att.slashcount.attribute.slash =
  
  ## indicates the number of slashes present.
  attribute slash { data.SLASH }?
mei_att.slurpresent.attributes = mei_att.slurpresent.attribute.slur
mei_att.slurpresent.attribute.slur =
  
  ## indicates that this element participates in a slur. If visual information about the slur needs to be recorded, then a <slur> element should be employed.
  attribute slur { data.SLURS }?
mei_att.staffident.attributes = mei_att.staffident.attribute.staff
mei_att.staffident.attribute.staff =
  
  ##
  attribute staff { text }?
mei_att.staffloc.attributes = mei_att.staffloc.attribute.loc
mei_att.staffloc.attribute.loc =
  
  ## holds the staff location of the feature.
  attribute loc { data.STAFFLOC }?
mei_att.startid.attributes = mei_att.startid.attribute.startid
mei_att.startid.attribute.startid =
  
  ## holds a reference to the first element in a sequence of events to which the feature applies.
  attribute startid { data.URI }?
mei_att.startendid.attributes =
  mei_att.startid.attributes, mei_att.startendid.attribute.endid
mei_att.startendid.attribute.endid =
  
  ## indicates the final element in a sequence of events to which the feature applies.
  attribute endid { data.URI }?
mei_att.stemmed.attributes =
  mei_att.stemmed.cmn.attributes,
  mei_att.stemmed.attribute.stem.dir,
  mei_att.stemmed.attribute.stem.len,
  mei_att.stemmed.attribute.stem.pos,
  mei_att.stemmed.attribute.stem.x,
  mei_att.stemmed.attribute.stem.y
mei_att.stemmed.attribute.stem.dir =
  
  ## describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
mei_att.stemmed.attribute.stem.len =
  
  ## encodes the stem length.
  attribute stem.len { xsd:decimal }?
mei_att.stemmed.attribute.stem.pos =
  
  ## records the position of the stem in relation to the note head(s).
  attribute stem.pos { data.STEMPOSITION }?
mei_att.stemmed.attribute.stem.x =
  
  ## records the output x coordinate of the stem's attachment point.
  attribute stem.x { xsd:decimal }?
mei_att.stemmed.attribute.stem.y =
  
  ## records the output y coordinate of the stem's attachment point.
  attribute stem.y { xsd:decimal }?
mei_att.syltext.attributes = mei_att.syltext.attribute.syl
mei_att.syltext.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
mei_att.textstyle.attributes =
  mei_att.textstyle.attribute.text.fam,
  mei_att.textstyle.attribute.text.name,
  mei_att.textstyle.attribute.text.size,
  mei_att.textstyle.attribute.text.style,
  mei_att.textstyle.attribute.text.weight
mei_att.textstyle.attribute.text.fam =
  
  ## provides a default value for the font family name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.fam { data.FONTFAMILY }?
mei_att.textstyle.attribute.text.name =
  
  ## provides a default value for the font name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.name { data.FONTNAME }?
mei_att.textstyle.attribute.text.size =
  
  ## provides a default value for the font size of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.size { xsd:decimal }?
mei_att.textstyle.attribute.text.style =
  
  ## provides a default value for the font style of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.style { data.FONTSTYLE }?
mei_att.textstyle.attribute.text.weight =
  
  ## provides a default value for the font weight for text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.weight { data.FONTWEIGHT }?
mei_att.tiepresent.attributes = mei_att.tiepresent.attribute.tie
mei_att.tiepresent.attribute.tie =
  
  ## indicates that this element participates in a tie. If visual information about the tie needs to be recorded, then a <tie> element should be employed.
  attribute tie { data.TIES }?
mei_att.timestamp.musical.attributes =
  mei_att.timestamp.musical.attribute.tstamp
mei_att.timestamp.musical.attribute.tstamp =
  
  ## encodes the onset time in terms of musical time, i.e., beats[.fractional_beat_part].
  attribute tstamp { data.BEAT }?
mei_att.timestamp.performed.attributes =
  mei_att.timestamp.performed.attribute.tstamp.ges,
  mei_att.timestamp.performed.attribute.tstamp.real
mei_att.timestamp.performed.attribute.tstamp.ges =
  
  ## used to record the onset time in pulses per quarter note (ppq, MusicXML divisions, or MIDI clicks) since the start of the file.
  attribute tstamp.ges { xsd:nonNegativeInteger }?
mei_att.timestamp.performed.attribute.tstamp.real =
  
  ## used to record the onset time in terms of ISO time since the start of the file.
  attribute tstamp.real { data.ISOTIME }?
mei_att.transposition.attributes =
  mei_att.transposition.attribute.trans.diat,
  mei_att.transposition.attribute.trans.semi
mei_att.transposition.attribute.trans.diat =
  
  ## records the amount of diatonic pitch shift, e.g., C to C♯ = 0, C to D♭ = 1, necessary to calculate the sounded pitch from the written one. 
  attribute trans.diat { xsd:decimal }?
mei_att.transposition.attribute.trans.semi =
  
  ## records the amount of pitch shift in semitones, e.g., C to C♯ = 1, C to D♭ = 1, necessary to calculate the sounded pitch from the written one. 
  attribute trans.semi { xsd:decimal }?
mei_att.tupletpresent.attributes =
  mei_att.tupletpresent.attribute.tuplet
mei_att.tupletpresent.attribute.tuplet =
  
  ## indicates that this feature participates in a tuplet. If visual information about the tuplet needs to be recorded, then a <tuplet> element should be employed.
  attribute tuplet { data.TUPLETS }?
mei_att.typed.attributes =
  mei_att.typed.attribute.type, mei_att.typed.attribute.subtype
mei_att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type { xsd:NMTOKEN }?
mei_att.typed.attribute.subtype =
  
  ## provide any sub-classification for the element, additional to that given by its type attribute.
  attribute subtype { xsd:NMTOKEN }?
mei_att.typography.attributes =
  mei_att.typography.attribute.fontfam,
  mei_att.typography.attribute.fontname,
  mei_att.typography.attribute.fontsize,
  mei_att.typography.attribute.fontstyle,
  mei_att.typography.attribute.fontweight
mei_att.typography.attribute.fontfam =
  
  ## contains the name of a font-family.
  attribute fontfam { data.FONTFAMILY }?
mei_att.typography.attribute.fontname =
  
  ## holds the name of a font.
  attribute fontname { data.FONTNAME }?
mei_att.typography.attribute.fontsize =
  
  ## indicates the size of a font in printers' points, i.e., 1/72nd of an inch.
  attribute fontsize { xsd:decimal }?
mei_att.typography.attribute.fontstyle =
  
  ## records the style of a font, i.e, italic, oblique, or normal.
  attribute fontstyle { data.FONTSTYLE }?
mei_att.typography.attribute.fontweight =
  
  ## used to indicate bold type.
  attribute fontweight { data.FONTWEIGHT }?
mei_att.visibility.attributes = mei_att.visibility.attribute.visible
mei_att.visibility.attribute.visible =
  
  ## indicates if a feature should be rendered when the notation is presented graphically or sounded when it is presented in an aural form.
  attribute visible { data.BOOLEAN }?
mei_att.visualoffset.ho.attributes =
  mei_att.visualoffset.ho.attribute.ho
mei_att.visualoffset.ho.attribute.ho =
  
  ## records a horizontal adjustment to a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute ho { data.INTERLINE }?
mei_att.visualoffset.to.attributes =
  mei_att.visualoffset.to.attribute.to
mei_att.visualoffset.to.attribute.to =
  
  ## records a timestamp adjustment of a feature's programmatically-determined location in terms of musical time; that is, beats.
  attribute to { data.TSTAMPOFFSET }?
mei_att.visualoffset.vo.attributes =
  mei_att.visualoffset.vo.attribute.vo
mei_att.visualoffset.vo.attribute.vo =
  
  ## records the vertical adjustment of a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute vo { data.INTERLINE }?
mei_att.visualoffset.attributes =
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.visualoffset.vo.attributes
mei_att.visualoffset2.ho.attributes =
  mei_att.visualoffset2.ho.attribute.startho,
  mei_att.visualoffset2.ho.attribute.endho
mei_att.visualoffset2.ho.attribute.startho =
  
  ## records the horizontal adjustment of a feature's programmatically-determined start point.
  attribute startho { data.INTERLINE }?
mei_att.visualoffset2.ho.attribute.endho =
  
  ## records the horizontal adjustment of a feature's programmatically-determined end point.
  attribute endho { data.INTERLINE }?
mei_att.visualoffset2.to.attributes =
  mei_att.visualoffset2.to.attribute.startto,
  mei_att.visualoffset2.to.attribute.endto
mei_att.visualoffset2.to.attribute.startto =
  
  ## records a timestamp adjustment of a feature's programmatically-determined start point.
  attribute startto { data.TSTAMPOFFSET }?
mei_att.visualoffset2.to.attribute.endto =
  
  ## records a timestamp adjustment of a feature's programmatically-determined end point.
  attribute endto { data.TSTAMPOFFSET }?
mei_att.visualoffset2.vo.attributes =
  mei_att.visualoffset2.vo.attribute.startvo,
  mei_att.visualoffset2.vo.attribute.endvo
mei_att.visualoffset2.vo.attribute.startvo =
  
  ## records a vertical adjustment of a feature's programmatically-determined start point.
  attribute startvo { data.INTERLINE }?
mei_att.visualoffset2.vo.attribute.endvo =
  
  ## records a vertical adjustment of a feature's programmatically-determined end point.
  attribute endvo { data.INTERLINE }?
mei_att.visualoffset2.attributes =
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.visualoffset2.vo.attributes
mei_att.xy.attributes = mei_att.xy.attribute.x, mei_att.xy.attribute.y
mei_att.xy.attribute.x =
  
  ## encodes an x coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute x { xsd:decimal }?
mei_att.xy.attribute.y =
  
  ## encodes an y coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute y { xsd:decimal }?
mei_att.xy2.attributes =
  mei_att.xy2.attribute.x2, mei_att.xy2.attribute.y2
mei_att.xy2.attribute.x2 =
  
  ## encodes the optional 2nd x coordinate.
  attribute x2 { xsd:decimal }?
mei_att.xy2.attribute.y2 =
  
  ## encodes the optional 2nd y coordinate.
  attribute y2 { xsd:decimal }?
mei_att.accid.anl.attributes = mei_att.common.anl.attributes
mei_att.accid.ges.attributes = empty
mei_att.accid.log.attributes =
  mei_att.accidental.attributes,
  mei_att.controlevent.attributes,
  mei_att.staffloc.attributes,
  mei_att.accid.log.attribute.func
mei_att.accid.log.attribute.func =
  
  ## records the function of an accidental.
  attribute func {
    
    ## cautionary accidental.
    "caution"
    | 
      ## editorial accidental.
      "edit"
  }?
mei_att.accid.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.vo.attributes,
  mei_att.xy.attributes,
  mei_att.enclosingchars.attributes
mei_att.annot.anl.attributes = mei_att.common.anl.attributes
mei_att.annot.ges.attributes = mei_att.duration.performed.attributes
mei_att.annot.log.attributes =
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes,
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes,
  mei_att.staffident.attributes,
  mei_att.layerident.attributes
mei_att.annot.vis.attributes = empty
mei_att.artic.anl.attributes = mei_att.common.anl.attributes
mei_att.artic.ges.attributes = empty
mei_att.artic.log.attributes =
  mei_att.articulation.attributes,
  mei_att.controlevent.attributes,
  mei_att.staffloc.attributes
mei_att.artic.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.enclosingchars.attributes
mei_att.barLine.anl.attributes = mei_att.common.anl.attributes
mei_att.barLine.ges.attributes = mei_att.timestamp.musical.attributes
mei_att.barLine.log.attributes =
  mei_att.meterconformance.bar.attributes,
  mei_att.barLine.log.attribute.rend
mei_att.barLine.log.attribute.rend =
  
  ## records the appearance and usually the function of the bar line.
  attribute rend { data.BARRENDITION }?
mei_att.barLine.vis.attributes =
  mei_att.barplacement.attributes,
  mei_att.color.attributes,
  mei_att.measurement.attributes,
  mei_att.width.attributes
mei_att.chord.anl.attributes =
  mei_att.common.anl.attributes, mei_att.melodicfunction.attributes
mei_att.chord.ges.attributes =
  mei_att.articulation.performed.attributes,
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes,
  mei_att.chord.ges.cmn.attributes
mei_att.chord.log.attributes =
  mei_att.event.attributes,
  mei_att.articulation.attributes,
  mei_att.augmentdots.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.syltext.attributes,
  mei_att.slurpresent.attributes,
  mei_att.tiepresent.attributes,
  mei_att.tupletpresent.attributes,
  mei_att.chord.log.cmn.attributes
mei_att.chord.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.stemmed.attributes,
  mei_att.visibility.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.xy.attributes,
  mei_att.chord.vis.cmn.attributes,
  mei_att.chord.vis.attribute.cluster
mei_att.chord.vis.attribute.cluster =
  
  ## indicates a single alternative note head should be displayed instead of individual note heads. See Read, p. 320-321, re: tone clusters.
  attribute cluster { data.CLUSTER }?
mei_att.clef.anl.attributes = mei_att.common.anl.attributes
mei_att.clef.ges.attributes = empty
mei_att.clef.log.attributes =
  mei_att.clefshape.attributes,
  mei_att.lineloc.attributes,
  mei_att.octave.attributes,
  mei_att.octavedisplacement.attributes,
  mei_att.clef.log.attribute.cautionary
mei_att.clef.log.attribute.cautionary =
  
  ## records the function of the clef. A "cautionary" clef does not change the following pitches.
  attribute cautionary { data.BOOLEAN }?
mei_att.clef.vis.attributes =
  mei_att.altsym.attributes, mei_att.color.attributes
mei_att.clefGrp.anl.attributes = mei_att.common.anl.attributes
mei_att.clefGrp.ges.attributes = empty
mei_att.clefGrp.log.attributes = empty
mei_att.clefGrp.vis.attributes = empty
mei_att.custos.anl.attributes = mei_att.common.anl.attributes
mei_att.custos.ges.attributes = empty
mei_att.custos.log.attributes =
  mei_att.pitched.attributes, mei_att.custos.log.attribute.target
mei_att.custos.log.attribute.target =
  
  ## encodes the target note when its pitch differs from the pitch at which the custos appears.
  attribute target { data.URI }?
mei_att.custos.vis.attributes =
  mei_att.altsym.attributes, mei_att.color.attributes
mei_att.dir.anl.attributes = mei_att.common.anl.attributes
mei_att.dir.ges.attributes = mei_att.duration.performed.attributes
mei_att.dir.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.dir.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.dot.anl.attributes = mei_att.common.anl.attributes
mei_att.dot.ges.attributes = empty
mei_att.dot.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.staffloc.attributes,
  mei_att.dot.log.attribute.form
mei_att.dot.log.attribute.form =
  
  ## records the function of the dot.
  attribute form {
    
    ## augmentation dot.
    "aug"
    | 
      ## dot of division.
      "div"
  }?
mei_att.dot.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.vo.attributes,
  mei_att.xy.attributes
mei_att.dynam.anl.attributes = mei_att.common.anl.attributes
mei_att.dynam.ges.attributes =
  mei_att.duration.performed.attributes, mei_att.midivalue.attributes
mei_att.dynam.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.dynam.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.ending.anl.attributes = mei_att.common.anl.attributes
mei_att.ending.ges.attributes = empty
mei_att.ending.log.attributes = empty
mei_att.ending.vis.attributes = empty
mei_att.grpSym.anl.attributes = mei_att.common.anl.attributes
mei_att.grpSym.ges.attributes = empty
mei_att.grpSym.log.attributes = mei_att.staffgroupingsym.attributes
mei_att.grpSym.vis.attributes =
  mei_att.visualoffset.attributes, mei_att.xy.attributes
mei_att.keySig.anl.attributes = mei_att.common.anl.attributes
mei_att.keySig.ges.attributes = empty
mei_att.keySig.log.attributes =
  mei_att.accidental.attributes,
  mei_att.pitch.attributes,
  mei_att.keySig.log.attribute.mode
mei_att.keySig.log.attribute.mode =
  
  ## indicates major, minor, or other tonality.
  attribute mode { data.MODE }?
mei_att.keySig.vis.attributes = empty
mei_att.layer.anl.attributes = mei_att.common.anl.attributes
mei_att.layer.ges.attributes = empty
mei_att.layer.log.attributes =
  mei_att.meterconformance.attributes, mei_att.layer.log.attribute.def
mei_att.layer.log.attribute.def =
  
  ## provides a mechanism for linking the layer to a layerDef element.
  attribute def { data.URI }?
mei_att.layer.vis.attributes = mei_att.visibility.attributes
mei_att.layerDef.anl.attributes = empty
mei_att.layerDef.ges.attributes = mei_att.instrumentident.attributes
mei_att.layerDef.log.attributes =
  mei_att.duration.default.attributes,
  mei_att.octavedefault.attributes,
  mei_att.layerDef.log.cmn.attributes
mei_att.layerDef.vis.attributes =
  mei_att.labels.addl.attributes,
  mei_att.beaming.vis.attributes,
  mei_att.textstyle.attributes,
  mei_att.visibility.attributes
mei_att.measure.anl.attributes =
  mei_att.common.anl.attributes, mei_att.joined.attributes
mei_att.measure.ges.attributes = mei_att.timestamp.performed.attributes
mei_att.measure.log.attributes =
  mei_att.meterconformance.bar.attributes,
  mei_att.measure.log.attribute.left,
  mei_att.measure.log.attribute.right
mei_att.measure.log.attribute.left =
  
  ## indicates the visual rendition of the left bar line. It is present here only for facilitation of translation from legacy encodings which use it. Usually, it can be safely ignored.
  attribute left { data.BARRENDITION }?
mei_att.measure.log.attribute.right =
  
  ## indicates the function of the right bar line and is structurally important.
  attribute right { data.BARRENDITION }?
mei_att.meterSig.anl.attributes = mei_att.common.anl.attributes
mei_att.meterSig.ges.attributes = empty
mei_att.meterSig.log.attributes =
  mei_att.meterSig.log.attribute.count,
  mei_att.meterSig.log.attribute.sym,
  mei_att.meterSig.log.attribute.unit
mei_att.meterSig.log.attribute.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter signature.
  attribute count { xsd:decimal }?
mei_att.meterSig.log.attribute.sym =
  
  ## indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute sym { data.METERSIGN }?
mei_att.meterSig.log.attribute.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute unit { xsd:decimal }?
mei_att.meterSig.vis.attributes = mei_att.meterSig.vis.attribute.rend
mei_att.meterSig.vis.attribute.rend =
  
  ## contains an indication of how the meter signature should be rendered.
  attribute rend {
    
    ## the lower number in the meter signature is replaced by a note symbol.
    "denomsym"
    | 
      ## meter signature rendered using traditional numeric values.
      "norm"
    | 
      ## meter signature not rendered.
      "invis"
  }?
mei_att.note.anl.attributes =
  mei_att.common.anl.attributes,
  mei_att.harmonicfunction.attributes,
  mei_att.intervallicdesc.attributes,
  mei_att.melodicfunction.attributes,
  mei_att.pitchclass.attributes,
  mei_att.solfa.attributes
mei_att.note.ges.attributes =
  mei_att.accidental.performed.attributes,
  mei_att.articulation.performed.attributes,
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes,
  mei_att.note.ges.cmn.attributes,
  mei_att.note.ges.mensural.attributes,
  mei_att.note.ges.tablature.attributes,
  mei_att.note.ges.attribute.oct.ges,
  mei_att.note.ges.attribute.pname.ges,
  mei_att.note.ges.attribute.pnum
mei_att.note.ges.attribute.oct.ges =
  
  ## records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
mei_att.note.ges.attribute.pname.ges =
  
  ## contains a performed pitch name that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
mei_att.note.ges.attribute.pnum =
  
  ## holds a pitch-to-number mapping, a base-40 or MIDI note number, for example.
  attribute pnum { data.PITCHNUMBER }?
mei_att.note.log.attributes =
  mei_att.event.attributes,
  mei_att.accidental.attributes,
  mei_att.articulation.attributes,
  mei_att.augmentdots.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.pitched.attributes,
  mei_att.syltext.attributes,
  mei_att.slurpresent.attributes,
  mei_att.tiepresent.attributes,
  mei_att.tupletpresent.attributes,
  mei_att.note.log.cmn.attributes,
  mei_att.note.log.mensural.attributes
mei_att.note.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.coloration.attributes,
  mei_att.enclosingchars.attributes,
  mei_att.relativesize.attributes,
  mei_att.stemmed.attributes,
  mei_att.visibility.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.xy.attributes,
  mei_att.note.vis.cmn.attributes,
  mei_att.note.vis.attribute.headshape
mei_att.note.vis.attribute.headshape =
  
  ## used to override the head shape normally used for the given duration.
  attribute headshape { data.HEADSHAPE }?
mei_att.pad.anl.attributes = empty
mei_att.pad.ges.attributes = empty
mei_att.pad.log.attributes =
  mei_att.event.attributes, mei_att.pad.log.attribute.num
mei_att.pad.log.attribute.num =
  
  ## amount of "padding" to be added, in interline units; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute num { xsd:decimal }
mei_att.pad.vis.attributes = empty
mei_att.part.anl.attributes = mei_att.common.anl.attributes
mei_att.part.ges.attributes = empty
mei_att.part.log.attributes = empty
mei_att.part.vis.attributes = empty
mei_att.parts.anl.attributes = mei_att.common.anl.attributes
mei_att.parts.ges.attributes = empty
mei_att.parts.log.attributes = empty
mei_att.parts.vis.attributes = empty
mei_att.pb.anl.attributes = mei_att.common.anl.attributes
mei_att.pb.ges.attributes = empty
mei_att.pb.log.attributes = empty
mei_att.pb.vis.attributes = mei_att.pb.vis.attribute.func
mei_att.pb.vis.attribute.func =
  
  ## states the side of a leaf (as in a manuscript) on which the content following the <pb> element occurs.
  attribute func {
    
    ##
    "verso"
    | 
      ##
      "recto"
  }?
mei_att.phrase.anl.attributes =
  mei_att.common.anl.attributes, mei_att.joined.attributes
mei_att.phrase.ges.attributes = mei_att.duration.performed.attributes
mei_att.phrase.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.phrase.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes,
  mei_att.phrase.vis.cmn.attributes
mei_att.rest.anl.attributes = mei_att.common.anl.attributes
mei_att.rest.ges.attributes =
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes,
  mei_att.rest.ges.mensural.attributes
mei_att.rest.log.attributes =
  mei_att.augmentdots.attributes,
  mei_att.event.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.tupletpresent.attributes,
  mei_att.rest.log.cmn.attributes
mei_att.rest.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.rest.vis.cmn.attributes,
  mei_att.rest.vis.mensural.attributes
mei_att.sb.anl.attributes = mei_att.common.anl.attributes
mei_att.sb.ges.attributes = empty
mei_att.sb.log.attributes = empty
mei_att.sb.vis.attributes = mei_att.sb.vis.attribute.rend
mei_att.sb.vis.attribute.rend =
  
  ## indicates whether hash marks should be rendered between systems. See Read, p. 436, ex. 26-3.
  attribute rend {
    
    ## display hash marks between systems.
    "hash"
  }?
mei_att.score.anl.attributes = mei_att.common.anl.attributes
mei_att.score.ges.attributes = empty
mei_att.score.log.attributes = empty
mei_att.score.vis.attributes = empty
mei_att.scoreDef.anl.attributes = empty
mei_att.scoreDef.ges.attributes =
  mei_att.channelized.attributes,
  mei_att.timebase.attributes,
  mei_att.miditempo.attributes,
  mei_att.mmtempo.attributes,
  mei_att.scoreDef.ges.attribute.tune.pname,
  mei_att.scoreDef.ges.attribute.tune.Hz,
  mei_att.scoreDef.ges.attribute.tune.temper
mei_att.scoreDef.ges.attribute.tune.pname =
  
  ## holds the pitch name of a tuning reference pitch.
  attribute tune.pname { data.PITCHNAME }?
mei_att.scoreDef.ges.attribute.tune.Hz =
  
  ## holds a value for cycles per second, i.e., Hertz, for a tuning reference pitch.
  attribute tune.Hz { xsd:decimal }?
mei_att.scoreDef.ges.attribute.tune.temper =
  
  ## provides an indication of the tuning system, 'just', for example.
  attribute tune.temper { data.TEMPERAMENT }?
mei_att.scoreDef.log.attributes =
  mei_att.cleffing.log.attributes,
  mei_att.duration.default.attributes,
  mei_att.keySigDefault.log.attributes,
  mei_att.meterSigDefault.log.attributes,
  mei_att.octavedefault.attributes,
  mei_att.transposition.attributes,
  mei_att.scoreDef.log.cmn.attributes,
  mei_att.scoreDef.log.mensural.attributes
mei_att.scoreDef.vis.attributes =
  mei_att.barplacement.attributes,
  mei_att.cleffing.vis.attributes,
  mei_att.distances.attributes,
  mei_att.keySigDefault.vis.attributes,
  mei_att.lyricstyle.attributes,
  mei_att.meterSigDefault.vis.attributes,
  mei_att.multinummeasures.attributes,
  mei_att.onelinestaff.attributes,
  mei_att.textstyle.attributes,
  mei_att.scoreDef.vis.cmn.attributes,
  mei_att.scoreDef.vis.mensural.attributes,
  mei_att.scoreDef.vis.attribute.ending.rend,
  mei_att.scoreDef.vis.attribute.mnum.visible,
  mei_att.scoreDef.vis.attribute.music.name,
  mei_att.scoreDef.vis.attribute.music.size,
  mei_att.scoreDef.vis.attribute.optimize,
  mei_att.scoreDef.vis.attribute.page.height,
  mei_att.scoreDef.vis.attribute.page.width,
  mei_att.scoreDef.vis.attribute.page.units,
  mei_att.scoreDef.vis.attribute.page.topmar,
  mei_att.scoreDef.vis.attribute.page.botmar,
  mei_att.scoreDef.vis.attribute.page.leftmar,
  mei_att.scoreDef.vis.attribute.page.rightmar,
  mei_att.scoreDef.vis.attribute.page.panels,
  mei_att.scoreDef.vis.attribute.page.scale,
  mei_att.scoreDef.vis.attribute.spacing.packexp,
  mei_att.scoreDef.vis.attribute.spacing.packfact,
  mei_att.scoreDef.vis.attribute.spacing.staff,
  mei_att.scoreDef.vis.attribute.spacing.system,
  mei_att.scoreDef.vis.attribute.system.leftmar,
  mei_att.scoreDef.vis.attribute.system.rightmar,
  mei_att.scoreDef.vis.attribute.system.topmar
mei_att.scoreDef.vis.attribute.ending.rend =
  
  ## describes where ending marks should be displayed.
  attribute ending.rend {
    
    ## ending rendered only above top staff.
    "top"
    | 
      ## ending rendered above staves that have bar lines drawn across them.
      "barred"
    | 
      ## endings rendered above staff groups.
      "grouped"
  }?
mei_att.scoreDef.vis.attribute.mnum.visible =
  
  ## indicates whether measure numbers should be displayed.
  attribute mnum.visible { data.BOOLEAN }?
mei_att.scoreDef.vis.attribute.music.name =
  
  ## sets the default music font name.
  attribute music.name { data.MUSICFONT }?
mei_att.scoreDef.vis.attribute.music.size =
  
  ## sets the default music font size.
  attribute music.size { xsd:decimal }?
mei_att.scoreDef.vis.attribute.optimize =
  
  ## indicates whether staves without notes, rests, etc. should be displayed. When the value is 'true', empty staves are displayed.
  attribute optimize { data.BOOLEAN }?
mei_att.scoreDef.vis.attribute.page.height =
  
  ## describes the physical height of the rendered output page.
  attribute page.height { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.width =
  
  ## describes the physical width of the rendered output page.
  attribute page.width { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.units =
  
  ## contains the real-world measurement units (inches, centimeters, millimeters) used to describe the rendered page height, width, and margins.
  attribute page.units { data.PGUNITS }?
mei_att.scoreDef.vis.attribute.page.topmar =
  
  ## indicates the amount of whitespace at the top of a rendered score page.
  attribute page.topmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.botmar =
  
  ## indicates the amount of whitespace at the bottom of a rendered score page.
  attribute page.botmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.leftmar =
  
  ## indicates the amount of whitespace at the left side of a rendered score page.
  attribute page.leftmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.rightmar =
  
  ## indicates the amount of whitespace at the right side of a rendered score page.
  attribute page.rightmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.panels =
  
  ## indicates the number of logical pages to be rendered on a single physical page.
  attribute page.panels { data.PAGE.PANELS }?
mei_att.scoreDef.vis.attribute.page.scale =
  
  ## indicates how the page should be scaled when rendered.
  attribute page.scale { data.PGSCALE }?
mei_att.scoreDef.vis.attribute.spacing.packexp =
  
  ## describes a note's spacing relative to its time value.
  attribute spacing.packexp { xsd:decimal }?
mei_att.scoreDef.vis.attribute.spacing.packfact =
  
  ## describes the note spacing of output.
  attribute spacing.packfact { xsd:decimal }?
mei_att.scoreDef.vis.attribute.spacing.staff =
  
  ## sets the minimum amount of space between staves in the same system.
  attribute spacing.staff { xsd:decimal }?
mei_att.scoreDef.vis.attribute.spacing.system =
  
  ## contains a space-separated pair of numbers describing the minimum and maximum amount of space between systems.
  attribute spacing.system { text }?
mei_att.scoreDef.vis.attribute.system.leftmar =
  
  ## describes the amount of whitespace at the left system margin relative to page.leftmar.
  attribute system.leftmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.system.rightmar =
  
  ## describes the amount of whitespace at the right system margin relative to page.rightmar.
  attribute system.rightmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.system.topmar =
  
  ## describes the distance from page's top edge to the first system; used for first page only.
  attribute system.topmar { xsd:decimal }?
mei_att.section.anl.attributes = mei_att.common.anl.attributes
mei_att.section.ges.attributes = empty
mei_att.section.log.attributes = empty
mei_att.section.vis.attributes = mei_att.section.vis.attribute.restart
mei_att.section.vis.attribute.restart =
  
  ## indicates that staves begin again with this section.
  attribute restart { data.BOOLEAN }?
mei_att.space.anl.attributes = mei_att.common.anl.attributes
mei_att.space.ges.attributes = mei_att.duration.performed.attributes
mei_att.space.log.attributes =
  mei_att.augmentdots.attributes,
  mei_att.event.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.tupletpresent.attributes,
  mei_att.space.log.cmn.attributes
mei_att.space.vis.attributes = mei_att.space.vis.attribute.compressable
mei_att.space.vis.attribute.compressable =
  
  ## indicates whether a space is 'compressible', i.e., if it may be removed at the discretion of processing software.
  attribute compressable { data.BOOLEAN }?
mei_att.staff.anl.attributes = mei_att.common.anl.attributes
mei_att.staff.ges.attributes = empty
mei_att.staff.log.attributes =
  mei_att.meterconformance.attributes, mei_att.staff.log.attribute.def
mei_att.staff.log.attribute.def =
  
  ## provides a mechanism for linking the staff to a staffDef element.
  attribute def { data.URI }?
mei_att.staff.vis.attributes = mei_att.visibility.attributes
mei_att.staffDef.anl.attributes = empty
mei_att.staffDef.ges.attributes =
  mei_att.instrumentident.attributes,
  mei_att.timebase.attributes,
  mei_att.staffDef.ges.tablature.attributes
mei_att.staffDef.log.attributes =
  mei_att.cleffing.log.attributes,
  mei_att.duration.default.attributes,
  mei_att.keySigDefault.log.attributes,
  mei_att.meterSigDefault.log.attributes,
  mei_att.octavedefault.attributes,
  mei_att.transposition.attributes,
  mei_att.staffDef.log.cmn.attributes,
  mei_att.staffDef.log.mensural.attributes
mei_att.staffDef.vis.attributes =
  mei_att.cleffing.vis.attributes,
  mei_att.distances.attributes,
  mei_att.keySigDefault.vis.attributes,
  mei_att.labels.addl.attributes,
  mei_att.lyricstyle.attributes,
  mei_att.meterSigDefault.vis.attributes,
  mei_att.multinummeasures.attributes,
  mei_att.onelinestaff.attributes,
  mei_att.scalable.attributes,
  mei_att.textstyle.attributes,
  mei_att.visibility.attributes,
  mei_att.staffDef.vis.cmn.attributes,
  mei_att.staffDef.vis.mensural.attributes,
  mei_att.staffDef.vis.attribute.grid.show,
  mei_att.staffDef.vis.attribute.layerscheme,
  mei_att.staffDef.vis.attribute.lines,
  mei_att.staffDef.vis.attribute.lines.color,
  mei_att.staffDef.vis.attribute.lines.visible,
  mei_att.staffDef.vis.attribute.spacing
mei_att.staffDef.vis.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
mei_att.staffDef.vis.attribute.layerscheme =
  
  ## indicates the number of layers and their stem directions.
  attribute layerscheme { data.LAYERSCHEME }?
mei_att.staffDef.vis.attribute.lines =
  
  ## indicates the number of staff lines.
  attribute lines { xsd:positiveInteger }?
mei_att.staffDef.vis.attribute.lines.color =
  
  ## captures the colors of the staff lines. The value is structured; that is, it should have the same number of space-separated RGB values as the number of lines indicated by the lines attribute. A line can be made invisible by assigning it the same RGB value as the background, usually white.
  attribute lines.color { data.COLORS }?
mei_att.staffDef.vis.attribute.lines.visible =
  
  ## records whether all staff lines are visible.
  attribute lines.visible { data.BOOLEAN }?
mei_att.staffDef.vis.attribute.spacing =
  
  ## records the absolute distance (as opposed to the relative distances recorded in <scoreDef> elements) between this staff and the preceding one in the same system. This value is meaningless for the first staff in a system since the spacing.system attribute indicates the spacing between systems.
  attribute spacing { xsd:decimal }?
mei_att.staffGrp.anl.attributes = empty
mei_att.staffGrp.ges.attributes = mei_att.instrumentident.attributes
mei_att.staffGrp.log.attributes = empty
mei_att.staffGrp.vis.attributes =
  mei_att.labels.addl.attributes,
  mei_att.staffgroupingsym.attributes,
  mei_att.visibility.attributes,
  mei_att.staffGrp.vis.attribute.barthru
mei_att.staffGrp.vis.attribute.barthru =
  
  ## indicates whether bar lines go across the space between staves (true) or are only drawn across the lines of each staff (false).
  attribute barthru { data.BOOLEAN }?
mei_att.syl.anl.attributes = mei_att.common.anl.attributes
mei_att.syl.ges.attributes = empty
mei_att.syl.log.attributes =
  mei_att.syl.log.attribute.con, mei_att.syl.log.attribute.wordpos
mei_att.syl.log.attribute.con =
  
  ## describes the symbols typically used to indicate breaks between syllables and their functions.
  attribute con {
    
    ## space (word separator).
    "s"
    | 
      ## dash (syllable separator).
      "d"
    | 
      ## underscore (syllable extension).
      "u"
    | 
      ## tilde (syllable elision).
      "t"
  }?
mei_att.syl.log.attribute.wordpos =
  
  ## records the position of a syllable within a word.
  attribute wordpos {
    
    ## (initial) first syllable.
    "i"
    | 
      ## (medial) neither first nor last syllable.
      "m"
    | 
      ## (terminal) last syllable.
      "t"
  }?
mei_att.syl.vis.attributes =
  mei_att.typography.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.horizontalalign.attributes
mei_att.tempo.anl.attributes = mei_att.common.anl.attributes
mei_att.tempo.ges.attributes =
  mei_att.miditempo.attributes, mei_att.mmtempo.attributes
mei_att.tempo.log.attributes =
  mei_att.controlevent.attributes, mei_att.startid.attributes
mei_att.tempo.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.mensur.log.attributes =
  mei_att.duration.ratio.attributes,
  mei_att.slashcount.attributes,
  mei_att.staffloc.attributes,
  mei_att.mensur.log.attribute.dot,
  mei_att.mensur.log.attribute.modusmaior,
  mei_att.mensur.log.attribute.modusminor,
  mei_att.mensur.log.attribute.prolatio,
  mei_att.mensur.log.attribute.sign,
  mei_att.mensur.log.attribute.tempus
mei_att.mensur.log.attribute.dot =
  
  ## specifies whether a dot is to be added to the base symbol.
  attribute dot { data.BOOLEAN }?
mei_att.mensur.log.attribute.modusmaior =
  
  ## describes the maxima-long relationship.
  attribute modusmaior { data.MODUSMAIOR }?
mei_att.mensur.log.attribute.modusminor =
  
  ## describes the long-breve relationship.
  attribute modusminor { data.MODUSMINOR }?
mei_att.mensur.log.attribute.prolatio =
  
  ## describes the semibreve-minim relationship.
  attribute prolatio { data.PROLATIO }?
mei_att.mensur.log.attribute.sign =
  
  ## the base symbol in the mensuration sign/time signature of mensural notation.
  attribute sign { data.MENSURATIONSIGN }?
mei_att.mensur.log.attribute.tempus =
  
  ## describes the breve-semibreve relationship.
  attribute tempus { data.TEMPUS }?
mei_model.addressLike = mei_address
mei_model.addressLike_alternation = mei_address
mei_model.addressLike_sequence = mei_address
mei_model.addressLike_sequenceOptional = mei_address?
mei_model.addressLike_sequenceOptionalRepeatable = mei_address*
mei_model.addressLike_sequenceRepeatable = mei_address+
mei_model.annotLike = annot
mei_model.annotLike_alternation = annot
mei_model.annotLike_sequence = annot
mei_model.annotLike_sequenceOptional = annot?
mei_model.annotLike_sequenceOptionalRepeatable = annot*
mei_model.annotLike_sequenceRepeatable = annot+
mei_model.biblLike = mei_bibl
mei_model.biblLike_alternation = mei_bibl
mei_model.biblLike_sequence = mei_bibl
mei_model.biblLike_sequenceOptional = mei_bibl?
mei_model.biblLike_sequenceOptionalRepeatable = mei_bibl*
mei_model.biblLike_sequenceRepeatable = mei_bibl+
mei_model.biblPart = mei_model.editionLike
mei_model.captionLike = mei_caption
mei_model.controleventLike =
  dir
  | dynam
  | phrase
  | tempo
  | mei_model.controleventLike.cmn
  | bend
  | gliss
  | mei_model.controleventLike.harmony
mei_model.controleventLike_alternation =
  dir
  | dynam
  | phrase
  | tempo
  | mei_model.controleventLike.cmn_alternation
  | bend
  | gliss
  | mei_model.controleventLike.harmony_alternation
mei_model.controleventLike_sequence =
  dir,
  dynam,
  phrase,
  tempo,
  mei_model.controleventLike.cmn_sequence,
  bend,
  gliss,
  mei_model.controleventLike.harmony_sequence
mei_model.controleventLike_sequenceOptional =
  dir?,
  dynam?,
  phrase?,
  tempo?,
  mei_model.controleventLike.cmn_sequenceOptional?,
  bend?,
  gliss?,
  mei_model.controleventLike.harmony_sequenceOptional?
mei_model.controleventLike_sequenceOptionalRepeatable =
  dir*,
  dynam*,
  phrase*,
  tempo*,
  mei_model.controleventLike.cmn_sequenceOptionalRepeatable*,
  bend*,
  gliss*,
  mei_model.controleventLike.harmony_sequenceOptionalRepeatable*
mei_model.controleventLike_sequenceRepeatable =
  dir+,
  dynam+,
  phrase+,
  tempo+,
  mei_model.controleventLike.cmn_sequenceRepeatable+,
  bend+,
  gliss+,
  mei_model.controleventLike.harmony_sequenceRepeatable+
mei_model.dateLike = mei_date
mei_model.dateLike_alternation = mei_date
mei_model.dateLike_sequence = mei_date
mei_model.dateLike_sequenceOptional = mei_date?
mei_model.dateLike_sequenceOptionalRepeatable = mei_date*
mei_model.dateLike_sequenceRepeatable = mei_date+
mei_model.editionLike = mei_edition
mei_model.editorialLike = mei_abbr | mei_expan
mei_model.editorialLike_alternation = mei_abbr | mei_expan
mei_model.editorialLike_sequence = mei_abbr, mei_expan
mei_model.editorialLike_sequenceOptional = mei_abbr?, mei_expan?
mei_model.editorialLike_sequenceOptionalRepeatable =
  mei_abbr*, mei_expan*
mei_model.editorialLike_sequenceRepeatable = mei_abbr+, mei_expan+
mei_model.endingLike = ending
mei_model.endingLike_alternation = ending
mei_model.endingLike_sequence = ending
mei_model.endingLike_sequenceOptional = ending?
mei_model.endingLike_sequenceOptionalRepeatable = ending*
mei_model.endingLike_sequenceRepeatable = ending+
mei_model.eventLike =
  mei_model.keySigLike
  | mei_model.meterSigLike
  | barLine
  | chord
  | clef
  | clefGrp
  | custos
  | mei_note
  | pad
  | rest
  | mei_space
  | mei_model.eventLike.cmn
  | mei_model.eventLike.mensural
mei_model.identifierLike = identifier
mei_model.identifierLike_alternation = identifier
mei_model.identifierLike_sequence = identifier
mei_model.identifierLike_sequenceOptional = identifier?
mei_model.identifierLike_sequenceOptionalRepeatable = identifier*
mei_model.identifierLike_sequenceRepeatable = identifier+
mei_model.incipLike = incip
mei_model.instrDefLike = instrDef
mei_model.keyAccidLike = keyAccid
mei_model.keySigLike = keySig
mei_model.keySigLike_alternation = keySig
mei_model.keySigLike_sequence = keySig
mei_model.keySigLike_sequenceOptional = keySig?
mei_model.keySigLike_sequenceOptionalRepeatable = keySig*
mei_model.keySigLike_sequenceRepeatable = keySig+
mei_model.labelLike = mei_label
mei_model.layerDefLike = layerDef
mei_model.layerLike = layer
mei_model.lbLike = mei_lb
mei_model.lbLike_alternation = mei_lb
mei_model.lbLike_sequence = mei_lb
mei_model.lbLike_sequenceOptional = mei_lb?
mei_model.lbLike_sequenceOptionalRepeatable = mei_lb*
mei_model.lbLike_sequenceRepeatable = mei_lb+
mei_model.layerPart =
  mei_model.eventLike
  | mei_model.layerPart.mensuralAndNeumes
  | mei_model.layerPart.cmn
mei_model.mdivLike = mdiv
mei_model.metaLike.score_sequenceOptional =
  pgHead?, pgHead2?, pgFoot?, pgFoot2?
mei_model.measurementLike = mei_model.numLike
mei_model.measurementLike_alternation = mei_model.numLike_alternation
mei_model.measurementLike_sequence = mei_model.numLike_sequence
mei_model.measurementLike_sequenceOptional =
  mei_model.numLike_sequenceOptional?
mei_model.measurementLike_sequenceOptionalRepeatable =
  mei_model.numLike_sequenceOptionalRepeatable*
mei_model.measurementLike_sequenceRepeatable =
  mei_model.numLike_sequenceRepeatable+
mei_model.meterSigLike = meterSig
mei_model.meterSigLike_alternation = meterSig
mei_model.meterSigLike_sequence = meterSig
mei_model.meterSigLike_sequenceOptional = meterSig?
mei_model.meterSigLike_sequenceOptionalRepeatable = meterSig*
mei_model.meterSigLike_sequenceRepeatable = meterSig+
mei_model.milestoneLike.music = mei_model.pbLike | sb
mei_model.milestoneLike.text = mei_model.lbLike | mei_model.pbLike
mei_model.milestoneLike.text_alternation =
  mei_model.lbLike_alternation | mei_model.pbLike_alternation
mei_model.milestoneLike.text_sequence =
  mei_model.lbLike_sequence, mei_model.pbLike_sequence
mei_model.milestoneLike.text_sequenceOptional =
  mei_model.lbLike_sequenceOptional?, mei_model.pbLike_sequenceOptional?
mei_model.milestoneLike.text_sequenceOptionalRepeatable =
  mei_model.lbLike_sequenceOptionalRepeatable*,
  mei_model.pbLike_sequenceOptionalRepeatable*
mei_model.milestoneLike.text_sequenceRepeatable =
  mei_model.lbLike_sequenceRepeatable+,
  mei_model.pbLike_sequenceRepeatable+
mei_model.nameLike = mei_name
mei_model.nameLike_alternation = mei_name
mei_model.nameLike_sequence = mei_name
mei_model.nameLike_sequenceOptional = mei_name?
mei_model.nameLike_sequenceOptionalRepeatable = mei_name*
mei_model.nameLike_sequenceRepeatable = mei_name+
mei_model.noteModifierLike = accid | artic | dot
mei_model.noteModifierLike_alternation = accid | artic | dot
mei_model.noteModifierLike_sequence = accid, artic, dot
mei_model.noteModifierLike_sequenceOptional = accid?, artic?, dot?
mei_model.noteModifierLike_sequenceOptionalRepeatable =
  accid*, artic*, dot*
mei_model.noteModifierLike_sequenceRepeatable = accid+, artic+, dot+
mei_model.numLike = mei_num
mei_model.numLike_alternation = mei_num
mei_model.numLike_sequence = mei_num
mei_model.numLike_sequenceOptional = mei_num?
mei_model.numLike_sequenceOptionalRepeatable = mei_num*
mei_model.numLike_sequenceRepeatable = mei_num+
mei_model.paracontentPart =
  mei_model.textphraseLike
  | mei_model.editLike
  | mei_model.transcriptionLike
  | mei_model.tableLike
  | mei_model.listLike
  | mei_model.quoteLike
mei_model.pLike = mei_p
mei_model.pLike_alternation = mei_p
mei_model.pLike_sequence = mei_p
mei_model.pLike_sequenceOptional = mei_p?
mei_model.pLike_sequenceOptionalRepeatable = mei_p*
mei_model.pLike_sequenceRepeatable = mei_p+
mei_model.partLike = part
mei_model.partsLike = parts
mei_model.pbLike = mei_pb
mei_model.pbLike_alternation = mei_pb
mei_model.pbLike_sequence = mei_pb
mei_model.pbLike_sequenceOptional = mei_pb?
mei_model.pbLike_sequenceOptionalRepeatable = mei_pb*
mei_model.pbLike_sequenceRepeatable = mei_pb+
mei_model.rendLike = rend | stack
mei_model.rendLike_alternation = rend | stack
mei_model.rendLike_sequence = rend, stack
mei_model.rendLike_sequenceOptional = rend?, stack?
mei_model.rendLike_sequenceOptionalRepeatable = rend*, stack*
mei_model.rendLike_sequenceRepeatable = rend+, stack+
mei_model.repositoryLike = mei_repository
mei_model.repositoryLike_alternation = mei_repository
mei_model.repositoryLike_sequence = mei_repository
mei_model.repositoryLike_sequenceOptional = mei_repository?
mei_model.repositoryLike_sequenceOptionalRepeatable = mei_repository*
mei_model.repositoryLike_sequenceRepeatable = mei_repository+
mei_model.resourceLike = mei_facsimile | mei_performance
mei_model.scoreDefLike = scoreDef
mei_model.scoreDefLike_alternation = scoreDef
mei_model.scoreDefLike_sequence = scoreDef
mei_model.scoreDefLike_sequenceOptional = scoreDef?
mei_model.scoreDefLike_sequenceOptionalRepeatable = scoreDef*
mei_model.scoreDefLike_sequenceRepeatable = scoreDef+
mei_model.scoreLike = score
mei_model.scorePart =
  mei_model.endingLike
  | mei_model.scoreDefLike
  | mei_model.sectionLike
  | mei_model.staffDefLike
mei_model.sectionLike = section
mei_model.sectionLike_alternation = section
mei_model.sectionLike_sequence = section
mei_model.sectionLike_sequenceOptional = section?
mei_model.sectionLike_sequenceOptionalRepeatable = section*
mei_model.sectionLike_sequenceRepeatable = section+
mei_model.sectionPart =
  mei_model.endingLike
  | mei_model.scoreDefLike
  | mei_model.sectionLike
  | mei_model.sectionPart.mensuralAndNeumes
  | mei_model.staffDefLike
  | mei_model.sectionPart.cmn
mei_model.sectionPart.mensuralAndNeumes = mei_model.staffLike
mei_model.sectionPart.mensuralAndNeumes_alternation =
  mei_model.staffLike_alternation
mei_model.sectionPart.mensuralAndNeumes_sequence =
  mei_model.staffLike_sequence
mei_model.sectionPart.mensuralAndNeumes_sequenceOptional =
  mei_model.staffLike_sequenceOptional?
mei_model.sectionPart.mensuralAndNeumes_sequenceOptionalRepeatable =
  mei_model.staffLike_sequenceOptionalRepeatable*
mei_model.sectionPart.mensuralAndNeumes_sequenceRepeatable =
  mei_model.staffLike_sequenceRepeatable+
mei_model.staffDefLike = staffDef
mei_model.staffDefLike_alternation = staffDef
mei_model.staffDefLike_sequence = staffDef
mei_model.staffDefLike_sequenceOptional = staffDef?
mei_model.staffDefLike_sequenceOptionalRepeatable = staffDef*
mei_model.staffDefLike_sequenceRepeatable = staffDef+
mei_model.staffDefPart =
  mei_model.keySigLike
  | mei_model.meterSigLike
  | clef
  | clefGrp
  | mei_model.staffDefPart.mensural
mei_model.staffGrpLike = staffGrp
mei_model.staffLike = staff
mei_model.staffLike_alternation = staff
mei_model.staffLike_sequence = staff
mei_model.staffLike_sequenceOptional = staff?
mei_model.staffLike_sequenceOptionalRepeatable = staff*
mei_model.staffLike_sequenceRepeatable = staff+
mei_model.staffPart.mensuralAndNeumes =
  mei_model.scoreDefLike | mei_model.staffDefLike
mei_model.staffPart =
  mei_model.layerLike
  | mei_model.staffPart.mensuralAndNeumes
  | mei_model.ossiaLike
mei_model.textcomponentLike =
  mei_model.pLike
  | mei_model.tableLike
  | mei_model.listLike
  | mei_model.quoteLike
  | mei_model.lgLike
mei_model.textphraseLike =
  mei_model.addressLike
  | mei_model.annotLike
  | mei_model.biblLike
  | mei_model.dateLike
  | mei_model.editorialLike
  | mei_model.identifierLike
  | mei_model.measurementLike
  | mei_model.milestoneLike.text
  | mei_model.nameLike
  | mei_model.rendLike
  | mei_model.titleLike
  | mei_model.figureLike
  | mei_model.nameLike.agent
  | mei_model.nameLike.place
  | mei_model.nameLike.label
  | mei_model.locrefLike
mei_model.textphraseLike.limited =
  mei_model.addressLike
  | mei_model.biblLike
  | mei_model.dateLike
  | mei_model.editorialLike
  | mei_model.identifierLike
  | mei_model.lbLike
  | mei_model.measurementLike
  | mei_model.nameLike
  | mei_model.rendLike
  | mei_model.titleLike
  | mei_model.figureLike
  | mei_model.nameLike.agent
  | mei_model.nameLike.place
  | mei_model.nameLike.label
  | mei_model.locrefLike
mei_model.titleLike = mei_title
mei_model.titleLike_alternation = mei_title
mei_model.titleLike_sequence = mei_title
mei_model.titleLike_sequenceOptional = mei_title?
mei_model.titleLike_sequenceOptionalRepeatable = mei_title*
mei_model.titleLike_sequenceRepeatable = mei_title+
mei_model.layerPart.mensuralAndNeumes =
  mei_model.scoreDefLike
  | mei_model.staffDefLike
  | mei_model.layerPart.mensural
  | mei_model.layerPart.neumes
  | mei_model.midiLike
accid =
  
  ## (accidental) – Records a temporary alteration to the pitch of a note. 
  element mei:accid {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typography.attributes,
    mei_att.accid.log.attributes,
    mei_att.accid.vis.attributes,
    mei_att.accid.ges.attributes,
    mei_att.accid.anl.attributes,
    empty
  }
mei_actor =
  
  ## – Name of an actor appearing within a cast list.
  element mei:actor {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_address =
  
  ## – Contains a postal address, for example of a publisher, an organization, or an individual. 
  element mei:address {
    mei_addrLine+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_addrLine =
  
  ## (address line) – Single line of a postal address. 
  element mei:addrLine {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
annot =
  
  ## (annotation) – Provides a short statement explaining the text or indicating the basis for an assertion. 
  element mei:annot {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    mei_att.annot.log.attributes,
    mei_att.annot.vis.attributes,
    mei_att.annot.ges.attributes,
    mei_att.annot.anl.attributes,
    mei_att.plist.attributes,
    mei_att.responsibility.attributes,
    empty
  }
artic =
  
  ## (articulation) – An indication of how to play a note or chord. 
  element mei:artic {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typography.attributes,
    mei_att.artic.log.attributes,
    mei_att.artic.vis.attributes,
    mei_att.artic.ges.attributes,
    mei_att.artic.anl.attributes,
    empty
  }
barLine =
  
  ## – Vertical line drawn through one or more staves that divides musical notation into metrical units. 
  element mei:barLine {
    empty
    >> sch:pattern [
         id = "barLine-constraint-Check_barLinetaktplace"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:barLine[@taktplace]"
           "\x{a}" ~
           "               "
           sch:let [ name = "staff" value = "ancestor::mei:staff/@n" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "staffpos"
             value =
               "count(ancestor::mei:staff/preceding-sibling::mei:staff)               +                 1"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@taktplace) <= number(2 *               preceding::mei:staffDef[@n=$staff and @lines][1]/@lines)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.barLine.log.attributes,
    mei_att.barLine.vis.attributes,
    mei_att.barLine.ges.attributes,
    mei_att.barLine.anl.attributes,
    empty
  }
mei_bibl =
  
  ## (bibliographic reference) – Provides a citation for a published work. 
  element mei:bibl {
    (text | mei_model.biblPart | mei_model.textphraseLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_body =
  
  ## – Contains the whole of a single musical text, excluding any front or back matter. 
  element mei:body {
    mei_model.mdivLike+,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
mei_caption =
  
  ## – A label which accompanies an illustration or a table.
  element mei:caption {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_castList =
  
  ## – Contains a single cast list or dramatis personae.
  element mei:castList {
    mei_model.headLike?,
    (mei_castItem | castGrp)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_castItem =
  
  ## – Contains a single entry within a cast list, describing either a single role or a list of non-speaking roles.
  element mei:castItem {
    (text | mei_roleDesc | mei_actor | instrVoice)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
castGrp =
  
  ## (cast group) – Groups one or more individual castItem elements within a cast list.
  element mei:castGrp {
    (mei_castItem | castGrp | mei_roleDesc)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
chord =
  
  ## – A simultaneous sounding of two or more notes in the same layer *with the same duration*.
  element mei:chord {
    (mei_note
     | artic
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.chord.log.attributes,
    mei_att.chord.vis.attributes,
    mei_att.chord.ges.attributes,
    mei_att.chord.anl.attributes,
    empty
  }
clef =
  
  ## – Indication of the exact location of a particular note on the staff and, therefore, the other notes as well. 
  element mei:clef {
    empty
    >> sch:pattern [
         id = "clef-constraint-Check_clef_position_clef"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clef[ancestor::mei:staffDef[@lines]]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staffDef/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <=               number(ancestor::mei:staffDef[@n=$thisstaff and                 @lines][1]/@lines)"
             "The clef position must be less than or equal to the number of lines on the\x{a}" ~
             "              staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "clef-constraint-Check_clef_position_clef"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clef[ancestor::mei:staffDef[not(@lines)]]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staffDef/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <=               number(preceding::mei:staffDef[@n=$thisstaff and                 @lines][1]/@lines)"
             "The clef position must be less than or equal to the number of lines on the\x{a}" ~
             "              staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.clef.anl.attributes,
    mei_att.clef.ges.attributes,
    mei_att.clef.log.attributes,
    mei_att.clef.vis.attributes,
    empty
  }
clefGrp =
  
  ## (clef group) – A set of simultaneously-occurring clefs.
  element mei:clefGrp {
    clef+,
    mei_att.common.attributes,
    mei_att.event.attributes,
    mei_att.facsimile.attributes,
    mei_att.clefGrp.log.attributes,
    mei_att.clefGrp.vis.attributes,
    mei_att.clefGrp.ges.attributes,
    mei_att.clefGrp.anl.attributes,
    empty
  }
custos =
  
  ## – Symbol placed at the end of a line of music to indicate the first note of the next line. Sometimes called a "direct". 
  element mei:custos {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.custos.log.attributes,
    mei_att.custos.vis.attributes,
    mei_att.custos.ges.attributes,
    mei_att.custos.anl.attributes,
    empty
  }
mei_date =
  
  ## – A string identifying a point in time or the time period between two such points.
  element mei:date {
    (text | mei_model.textphraseLike)*,
    mei_att.bibl.attributes,
    mei_att.calendared.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
dir =
  
  ## (directive) – A text expression that is on the score (typically above, below, or between staves, but not on the staff) not encoded elsewhere in more specific elements, such as <tempo> or <dynam>. 
  element mei:dir {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "dir-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dir"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.typed.attributes,
    mei_att.dir.log.attributes,
    mei_att.dir.vis.attributes,
    mei_att.dir.ges.attributes,
    mei_att.dir.anl.attributes,
    empty
  }
dot =
  
  ## – Dot of augmentation or division. 
  element mei:dot {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.dot.log.attributes,
    mei_att.dot.vis.attributes,
    mei_att.dot.ges.attributes,
    mei_att.dot.anl.attributes,
    empty
  }
dynam =
  
  ## (dynamic) – Indication of the volume of a note, phrase, or section of music. 
  element mei:dynam {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.editLike
      | mei_model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "dynam-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dynam"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.dynam.log.attributes,
    mei_att.dynam.vis.attributes,
    mei_att.dynam.ges.attributes,
    mei_att.dynam.anl.attributes,
    empty
  }
mei_edition =
  
  ## (edition designation) – A word or text phrase that indicates a difference in either content or form between the item being described and a related item previously issued by the same publisher/distributor (e.g. 2nd edition, version 2.0, etc.), or simultaneously issued by either the same publisher/distributor or another publisher/distributor (e.g. large print edition, British edition, etc.). 
  element mei:edition {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
ending =
  
  ## – Alternative ending for a repeated passage of music; i.e., prima volta, seconda volta, etc. 
  element mei:ending {
    expansion*,
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.sectionPart)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.ending.anl.attributes,
    mei_att.ending.ges.attributes,
    mei_att.ending.log.attributes,
    mei_att.ending.vis.attributes,
    empty
  }
expansion =
  
  ## – Indicates how a section may be programmatically expanded into its 'through-composed' form. 
  element mei:expansion {
    empty,
    mei_att.common.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    mei_att.plist.attributes,
    empty
  }
mei_fw =
  
  ## (forme work) – This element is intended for capture of header/footer material that is non-repeating; that is, occuring on isolated pages. For recurring headers and footers use pgHead* and pgFoot* elements. 
  element mei:fw {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_group =
  
  ## – Contains a composite musical text, grouping together a sequence of distinct musical texts (or groups of such musical texts) which are regarded as a unit for some purpose, for example, the collected works of a composer. 
  element mei:group {
    (mei_music | mei_group),
    (mei_music | mei_group)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
grpSym =
  
  ## (group symbol) – A brace or bracket used to group two or more staves of a score or part. 
  element mei:grpSym {
    mei_model.labelLike*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.grpSym.log.attributes,
    mei_att.grpSym.vis.attributes,
    mei_att.grpSym.ges.attributes,
    mei_att.grpSym.anl.attributes,
    empty
  }
identifier =
  
  ## – An alpha-numeric string that establishes the identity of the described material. 
  element mei:identifier {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.authorized.attributes,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    empty
  }
incip =
  
  ## (incipit) – The opening music and/or words of a composition. 
  element mei:incip {
    (incipCode
     | incipText
     | mei_model.scoreLike
     | mei_model.graphicLike)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.typed.attributes,
    empty
  }
keyAccid =
  
  ## (key accidental) – Accidental in a key signature. 
  element mei:keyAccid {
    empty,
    mei_att.accidental.attributes,
    mei_att.common.attributes,
    mei_att.enclosingchars.attributes,
    mei_att.facsimile.attributes,
    mei_att.pitched.attributes,
    mei_att.staffloc.attributes,
    mei_att.xy.attributes,
    
    ## specifies whether enharmonic (written) values or implicit ("perform-able") values are allowed.
    attribute form {
      
      ## only performed values (sharp, flat, natural) allowed.
      "implicit"
      | 
        ## all enharmonic (written) values allowed.
        "explicit"
    }?,
    empty
  }
keySig =
  
  ## (key signature) – Written key signature. 
  element mei:keySig {
    mei_model.keyAccidLike*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.keySig.anl.attributes,
    mei_att.keySig.ges.attributes,
    mei_att.keySig.log.attributes,
    mei_att.keySig.vis.attributes,
    empty
  }
mei_label =
  
  ## – A text string that identifies a staff, staff group, or contentItem.
  element mei:label {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    empty
  }
layer =
  
  ## – An independent stream of events on a staff. 
  element mei:layer {
    ((mei_model.appLike
      | mei_model.divLike
      | mei_model.milestoneLike.music
      | mei_model.staffDefLike
      | mei_model.annotLike
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.layerPart)*)
    >> sch:pattern [
         id = "layer-constraint-Check_layern"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:layer[@n]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "The n attribute must be a single\x{a}" ~
             "              integer."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.layer.log.attributes,
    mei_att.layer.vis.attributes,
    mei_att.layer.ges.attributes,
    mei_att.layer.anl.attributes,
    empty
  }
layerDef =
  
  ## (layer definition) – Container for layer meta-information.
  element mei:layerDef {
    mei_model.labelLike*,
    (mei_model.instrDefLike*)
    >> sch:pattern [
         id = "layerDef-constraint-Check_layerDefn"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:layerDef"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "An n attribute with a single integer\x{a}" ~
             "              value must be present."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.layerDef.log.attributes,
    mei_att.layerDef.vis.attributes,
    mei_att.layerDef.ges.attributes,
    mei_att.layerDef.anl.attributes,
    empty
  }
mei_lb =
  
  ## (line break) – An empty formatting element that forces text to begin on a new line. 
  element mei:lb {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    
    ## states whether the line break follows a single line or a line group.
    attribute func {
      
      ##
      "line"
      | 
        ##
        "group"
    }?,
    empty
  }
mdiv =
  
  ## (musical division) – contains a subdivision of the body of a musical text. 
  element mei:mdiv {
    ((mei_model.scoreLike?, mei_model.partsLike?)
     | mei_model.mdivLike*),
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    empty
  }
mei =
  
  ## – Contains a single MEI-conformant document, consisting of an MEI header and a musical text, either in isolation or as part of an meiCorpus element. 
  element mei:mei {
    meiHead,
    mei_music
    >> sch:ns [
         prefix = "mei"
         uri = "http://www.music-encoding.org/ns/mei"
       ]
    >> sch:pattern [
         id = "mei-constraint-Check_staff"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:*[@staff]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "every $i in tokenize(@staff, '\s+') satisfies               $i=//mei:staffDef/@n"
             "The values in @staff must correspond to @n attribute of a\x{a}" ~
             "              staffDef element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.meiversion.attributes,
    mei_att.id.attributes,
    empty
  }
mei_music =
  
  ## – Contains a single musical text of any kind, whether unitary or composite, for example, an etude, opera, song cycle, symphony, or anthology of piano solos.
  element mei:music {
    mei_model.alignLike*,
    mei_model.resourceLike*,
    macro.musicPart,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.meiversion.attributes,
    empty
  }
mei_name =
  
  ## – Proper noun or noun phrase. 
  element mei:name {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_note =
  
  ## – A single pitched event. 
  element mei:note {
    (mei_model.noteModifierLike
     | mei_model.verseLike
     | mei_model.sylLike
     | mei_model.appLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.note.log.attributes,
    mei_att.note.vis.attributes,
    mei_att.note.ges.attributes,
    mei_att.note.anl.attributes,
    empty
  }
mei_num =
  
  ## (number) – Numeric information in any form. 
  element mei:num {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_p =
  
  ## (paragraph) – One or more text phrases that form a logical prose passage. 
  element mei:p {
    (text | mei_model.paracontentPart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
pad =
  
  ## (padding) – An indication of extra visual space between notational elements.
  element mei:pad {
    empty,
    mei_att.common.attributes,
    mei_att.pad.log.attributes,
    mei_att.pad.vis.attributes,
    mei_att.pad.ges.attributes,
    mei_att.pad.anl.attributes,
    empty
  }
parts =
  
  ## – Provides a container for performers' parts.
  element mei:parts {
    mei_model.partLike*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.typed.attributes,
    mei_att.parts.log.attributes,
    mei_att.parts.vis.attributes,
    mei_att.parts.ges.attributes,
    mei_att.parts.anl.attributes,
    empty
  }
part =
  
  ## – An alternative visual rendition of the score from a particular performer's (or group of performers') point of view. 
  element mei:part {
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.scorePart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.typed.attributes,
    mei_att.part.log.attributes,
    mei_att.part.vis.attributes,
    mei_att.part.ges.attributes,
    mei_att.part.anl.attributes,
    empty
  }
mei_pb =
  
  ## (page break) – An empty formatting element that forces text to begin on a new page. 
  element mei:pb {
    macro.metaLike.page,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.source.attributes,
    mei_att.pb.anl.attributes,
    mei_att.pb.ges.attributes,
    mei_att.pb.log.attributes,
    mei_att.pb.vis.attributes,
    empty
  }
pgDesc =
  
  ## (page description) – Contains a brief prose description of the appearance or description of the content of a physical page. 
  element mei:pgDesc {
    (text
     | mei_model.graphicprimitiveLike
     | mei_model.textcomponentLike
     | mei_model.annotLike
     | mei_model.locrefLike)*,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    empty
  }
pgHead =
  
  ## (page header) – A running header on the first page. 
  element mei:pgHead {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
pgHead2 =
  
  ## (page header 2) – A running header on the pages following the first. 
  element mei:pgHead2 {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
pgFoot =
  
  ## (page footer) – A running footer on the first page. 
  element mei:pgFoot {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
pgFoot2 =
  
  ## (page footer 2) – A running footer on the pages following the first. 
  element mei:pgFoot2 {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
phrase =
  
  ## – Indication of 1) a "unified melodic idea" or 2) performance technique. 
  element mei:phrase {
    empty
    >> sch:pattern [
         id =
           "phrase-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:phrase"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.phrase.log.attributes,
    mei_att.phrase.vis.attributes,
    mei_att.phrase.ges.attributes,
    mei_att.phrase.anl.attributes,
    empty
  }
rend =
  
  ## (render) – A formatting element indicating special visual rendering, e.g., bold or italicized, of a text word or phrase. 
  element mei:rend {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    mei_att.typography.attributes,
    mei_att.horizontalalign.attributes,
    
    ## used to extend the values of the rend attribute.
    attribute altrend { text }?,
    
    ## captures the appearance of the element's contents.
    attribute rend { data.TEXTRENDITION }?,
    
    ## A positive value for rotation rotates the text in a counter-clockwise fashion, while negative values produce clockwise rotation.
    attribute rotation { data.DEGREES }?,
    
    ## specifies the vertical position of the element content relative to the surrounding text.
    attribute valign {
      
      ## aligns the top of the content with the top of the surrounding text.
      "top"
      | 
        ## aligns the middle of the content with the middle of the surrounding text.
        "middle"
      | 
        ## aligns the bottom of the content with the bottom of the surrounding text.
        "bottom"
      | 
        ## aligns the baseline of the content with the baseline of the surrounding text.
        "baseline"
    }?,
    empty
  }
mei_repository =
  
  ## – Institution or agency which holds a bibliographic item. 
  element mei:repository {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
rest =
  
  ## – A non-sounding event found in the source being transcribed. 
  element mei:rest {
    empty
    >> sch:pattern [
         id = "rest-constraint-Check_restline"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:rest[@line]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staff/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <=               number(preceding::mei:staffDef[@n=$thisstaff and                 @lines][1]/@lines)"
             "The value of @line must be less than or equal to the number of lines on the\x{a}" ~
             "              staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.rest.log.attributes,
    mei_att.rest.vis.attributes,
    mei_att.rest.ges.attributes,
    mei_att.rest.anl.attributes,
    empty
  }
mei_roleDesc =
  
  ## (role description) – Describes a character's role in a drama.
  element mei:roleDesc {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
sb =
  
  ## (system break) – An empty formatting element that forces musical notation to begin on a new line. 
  element mei:sb {
    custos?,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.sb.log.attributes,
    mei_att.sb.vis.attributes,
    mei_att.sb.ges.attributes,
    mei_att.sb.anl.attributes,
    empty
  }
score =
  
  ## – Full score view of the musical content. 
  element mei:score {
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.scorePart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.typed.attributes,
    mei_att.score.log.attributes,
    mei_att.score.vis.attributes,
    mei_att.score.ges.attributes,
    mei_att.score.anl.attributes,
    empty
  }
scoreDef =
  
  ## (score definition) – Container for score meta-information.
  element mei:scoreDef {
    mei_model.alignLike*,
    mei_model.chordTableLike?,
    mei_model.symbolTableLike?,
    mei_model.keySigLike?,
    mei_model.meterSigLike?,
    mei_model.metaLike.score_sequenceOptional,
    instrGrp?,
    mei_model.staffGrpLike?,
    mei_att.common.attributes,
    mei_att.scoreDef.log.attributes,
    mei_att.scoreDef.vis.attributes,
    mei_att.scoreDef.ges.attributes,
    mei_att.scoreDef.anl.attributes,
    empty
  }
section =
  
  ## – Segment of music data. 
  element mei:section {
    expansion*,
    ((mei_model.appLike
      | mei_model.divLike
      | mei_model.milestoneLike.music
      | mei_model.annotLike
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.sectionPart)*)
    >> sch:pattern [
         id = "section-constraint-Check_sectionexpansion"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:section[mei:expansion]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "descendant::mei:section|descendant::mei:ending|descendant::mei:rdg"
             "Must have descendant section, ending, or rdg elements that can be pointed\x{a}" ~
             "              to."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.section.log.attributes,
    mei_att.section.vis.attributes,
    mei_att.section.ges.attributes,
    mei_att.section.anl.attributes,
    empty
  }
mei_space =
  
  ## – A placeholder used to fill an incomplete measure, layer, etc. most often so that the combined duration of the events equals the number of beats in the measure.
  element mei:space {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.space.log.attributes,
    mei_att.space.vis.attributes,
    mei_att.space.ges.attributes,
    mei_att.space.anl.attributes,
    empty
  }
stack =
  
  ## (stacked text) – An inline table with a single column.
  element mei:stack {
    (text | mei_model.textphraseLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    
    ## indicates the delimiter used to mark the portions of text that are to be stacked.
    attribute delim { text }?,
    
    ## specifies how the stacked text components should be aligned.
    attribute align {
      
      ## left justified.
      "left"
      | 
        ## right justified.
        "right"
      | 
        ## centered.
        "center"
      | 
        ## aligned on right-most digit.
        "rightdigit"
    }?,
    empty
  }
staff =
  
  ## – A group of equidistant horizontal lines on which notes are placed in order to represent pitch or a grouping element for individual 'strands' of notes, rests, etc. that may or may not actually be rendered on staff lines; that is, both diastematic and non-diastematic signs. 
  element mei:staff {
    ((mei_model.appLike
      | mei_model.divLike
      | mei_model.milestoneLike.music
      | mei_model.staffDefLike
      | mei_model.annotLike
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.staffPart)*)
    >> sch:pattern [
         id = "staff-constraint-Check_staffn"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staff[@n]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "The n attribute must be a single\x{a}" ~
             "              integer."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.staff.log.attributes,
    mei_att.staff.vis.attributes,
    mei_att.staff.ges.attributes,
    mei_att.staff.anl.attributes,
    empty
  }
staffDef =
  
  ## (staff definition) – Container for staff meta-information.
  element mei:staffDef {
    mei_model.labelLike*,
    ((mei_model.instrDefLike
      | mei_model.layerDefLike
      | mei_model.staffDefPart)*)
    >> sch:pattern [
         id = "staffDef-constraint-Check_staffDefn"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@n"
             "A staffDef must have an n attribute."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@lines or preceding::mei:staffDef[@n=$thisstaff                 and               @lines]"
             "The first occurrence of a staff must declare the number of staff\x{a}" ~
             "              lines."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:clef) + count(mei:clefGrp) < 2"
             "Only one clef or clefGrp\x{a}" ~
             "              is permitted."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_ancestor_staff"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[ancestor::mei:staff]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:staff/@n eq $thisstaff"
             "If a staffDef appears in a\x{a}" ~
             "              staff, it must bear the same @n than this staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_clef_position_staffDef"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@clef.line and @lines]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@clef.line) <= number(@lines)"
             "The clef position must be\x{a}" ~
             "              less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_clef_position_staffDef_nolines"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@clef.line and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "stafflines"
             value =
               "preceding::mei:staffDef[@n=$thisstaff and               @lines][1]/@lines"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@clef.line) <= number($stafflines)"
             "The clef position must\x{a}" ~
             "              be less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_tab_strings"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@tab.strings and @lines]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The tab.strings attribute\x{a}" ~
             "              must have the same number of values as there are staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_tab_strings"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@tab.strings and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "thisStaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens =               preceding::mei:staffDef[@n=$thisStaff and                 @lines][1]/@lines"
             "The\x{a}" ~
             "              tab.strings attribute must have the same number of values as there are staff\x{a}" ~
             "              lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@lines.color and @lines]"
           "\x{a}" ~
           "              "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color),                 '\s'))"
           ]
           "\x{a}" ~
           "              "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The lines.color attribute\x{a}" ~
             "                must have either 1) a single value or 2) the same number of values as there are\x{a}" ~
             "                staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@lines.color and not(@lines)]"
           "\x{a}" ~
           "              "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color),                 '\s'))"
           ]
           "\x{a}" ~
           "              "
           sch:let [ name = "thisStaff" value = "@n" ]
           "\x{a}" ~
           "              "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens =                 preceding::mei:staffDef[@n=$thisStaff and                     @lines][1]/@lines"
             "The\x{a}" ~
             "                lines.color attribute must have either 1) a single value or 2) the same number of\x{a}" ~
             "                values as there are staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "          "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.staffDef.log.attributes,
    mei_att.staffDef.vis.attributes,
    mei_att.staffDef.ges.attributes,
    mei_att.staffDef.anl.attributes,
    empty
  }
staffGrp =
  
  ## (staff group) – A group of bracketed or braced staves. 
  element mei:staffGrp {
    grpSym*,
    mei_model.labelLike*,
    mei_model.instrDefLike*,
    (mei_model.staffGrpLike | mei_model.staffDefLike)+,
    (grpSym*)
    >> sch:pattern [
         id = "staffGrp-constraint-Check_staffGrp_unique_staff_n_values"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffGrp"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countstaves"
             value = "count(descendant::mei:staffDef)"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "countuniqstaves"
             value =
               "count(distinct-values(descendant::mei:staffDef/@n))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countstaves eq $countuniqstaves"
             "Each staffDef must have a unique\x{a}" ~
             "              value for the n attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.staffGrp.log.attributes,
    mei_att.staffGrp.vis.attributes,
    mei_att.staffGrp.ges.attributes,
    mei_att.staffGrp.anl.attributes,
    empty
  }
syl =
  
  ## (syllable) – Individual lyric syllable. 
  element mei:syl {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.syl.log.attributes,
    mei_att.syl.vis.attributes,
    mei_att.syl.ges.attributes,
    mei_att.syl.anl.attributes,
    empty
  }
tempo =
  
  ## – Text and symbols descriptive of tempo, mood, or style, e.g., "allarg.", "a tempo", "cantabile", "Moderato", "♩=60", "Moderato ♩ =60").
  element mei:tempo {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike)*)
    >> sch:pattern [
         id = "tempo-constraint-tempo_in_header_disallow_most_attrs"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tempo[ancestor::mei:meiHead]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@*[name() != 'label' and name() != 'n' and name() != 'xml:base'               and name() != 'xml:id' and name() != 'xml:lang'])"
             "Only label, n, xml:base, xml:id,\x{a}" ~
             "              and xml:lang attributes allowed when this element occurs in the header."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.tempo.log.attributes,
    mei_att.tempo.vis.attributes,
    mei_att.tempo.ges.attributes,
    mei_att.tempo.anl.attributes,
    empty
  }
mei_title =
  
  ## – Title of a bibliographic entity. 
  element mei:title {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    
    ## indicates the bibliographic level for a title.
    attribute level {
      
      ## article.
      "a"
      | 
        ## monograph.
        "m"
      | 
        ## journal.
        "j"
      | 
        ## series.
        "s"
      | 
        ## unpublished (including theses and dissertations unless published by a commercial press).
        "u"
    }?,
    empty
  }
mei_titlePage =
  
  ## – Contains a transcription of the title page of a text. 
  element mei:titlePage {
    (mei_model.textcomponentLike | mei_model.milestoneLike.text)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_att.regularmethod.attributes =
  mei_att.regularmethod.attribute.method
mei_att.regularmethod.attribute.method =
  
  ## indicates the method employed to mark corrections and normalizations.
  attribute method {
    
    ## corrections and normalizations made silently.
    "silent"
    | 
      ## corrections and normalizations indicated using elements.
      "tags"
  }?
mei_model.editorialDeclPart =
  mei_correction
  | mei_interpretation
  | mei_normalization
  | mei_segmentation
  | mei_stdVals
mei_model.encodingPart_sequenceOptional =
  mei_appInfo?, mei_editorialDecl?, mei_projectDesc?, mei_samplingDecl?
mei_model.frontPart = mei_titlePage
mei_model.headerPart_sequenceOptional = mei_encodingDesc?, workDesc?
mei_model.physDescPart =
  mei_model.repositoryLike
  | mei_model.frontPart
  | mei_condition
  | mei_dimensions
  | exhibHist
  | mei_extent
  | handList
  | inscription
  | physLoc
  | physMedium
  | plateNum
  | mei_provenance
  | treatHist
  | treatSched
  | mei_watermark
mei_model.pubStmtPart =
  mei_model.addressLike
  | mei_model.dateLike
  | mei_model.identifierLike
  | mei_availability
  | mei_respStmt
  | mei_model.nameLike.geogName
key =
  
  ## – Key captures information about tonal center and mode. 
  element mei:key {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.keySig.log.attributes,
    empty
  }
meiHead =
  
  ## (MEI header) – Supplies the descriptive and declarative metadata prefixed to every MEI-conformant text. 
  element mei:meiHead {
    altId*,
    mei_fileDesc,
    mei_model.headerPart_sequenceOptional,
    mei_revisionDesc?,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    mei_att.meiversion.attributes,
    
    ## specifies the kind of document to which the header is attached, for example whether it is a corpus or individual text.
    attribute type {
      
      ## header is attached to a music document.
      "music"
      | 
        ## header is attached to a corpus.
        "corpus"
    }?,
    empty
  }
accessRestrict =
  
  ## (access restriction) – Describes the conditions that affect the accessibility of material. 
  element mei:accessRestrict {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
acqSource =
  
  ## (acquisition source) – Post-publication source, such as a vendor or distributor, from which access to a bibliographic item may be obtained, including electronic access. 
  element mei:acqSource {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    empty
  }
altId =
  
  ## (alternative identifier) – May contain a bibliographic identifier that does not fit within the meiHead element's id attribute, for example because the id does not fit the definition of an XML id or because multiple identifiers are needed. 
  element mei:altId {
    (text | mei_model.lbLike | mei_model.rendLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_appInfo =
  
  ## (application information) – Groups information about applications which have acted upon the MEI file. 
  element mei:appInfo {
    mei_application*, mei_att.common.attributes, empty
  }
mei_application =
  
  ## – Provides information about an application which has acted upon the current document. 
  element mei:application {
    mei_model.nameLike+,
    (mei_model.locrefLike* | mei_model.pLike*),
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.typed.attributes,
    
    ## supplies a version number for an application, independent of its identifier or display name.
    attribute version { text }?,
    empty
  }
mei_availability =
  
  ## – Groups elements that describe the availability of and access to a bibliographic item, including an MEI-encoded document. 
  element mei:availability {
    macro.availabilityPart,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_change =
  
  ## – Individual change within the revision description. 
  element mei:change {
    mei_respStmt,
    changeDesc,
    mei_model.dateLike,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datable.attributes,
    mei_att.responsibility.attributes,
    empty
  }
changeDesc =
  
  ## (change description) – Description of a revision of the MEI file.
  element mei:changeDesc {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_classCode =
  
  ## (classification code) – Holds a citation to the source of controlled-vocabulary terms used in the <termList> element; for example, Library of Congress Subject Headings (LCSH), Library of Congress Classification (LCC), Library of Congress Name Authority File (LCNAF), or other thesaurus or ontology. 
  element mei:classCode {
    (text | mei_model.lbLike | mei_model.rendLike)*,
    mei_att.common.attributes,
    mei_att.authorized.attributes,
    mei_att.bibl.attributes,
    empty
  }
classification =
  
  ## – Groups information which describes the nature or topic of an entity. 
  element mei:classification {
    (mei_classCode | termList)+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_condition =
  
  ## – The physical condition of an item, particularly any variances between the physical makeup of the item and that of other copies of the same item (e.g., missing pages, plates, etc.). 
  element mei:condition {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_correction =
  
  ## – States how and under what circumstances corrections have been made in the text. 
  element mei:correction {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    mei_att.regularmethod.attributes,
    
    ## indicates the degree of correction applied to the text.
    attribute corrlevel {
      
      ## the text has been thoroughly checked and proofread.
      "high"
      | 
        ## the text has been checked at least once.
        "medium"
      | 
        ## the text has not been checked.
        "low"
      | 
        ## the correction status of the text is unknown.
        "unknown"
    }?,
    empty
  }
contents =
  
  ## – Description of the material contained within a resource.
  element mei:contents {
    mei_model.headLike?,
    (mei_model.pLike? | (mei_model.labelLike?, contentItem)+),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.pointing.attributes,
    empty
  }
contentItem =
  
  ## – Contains a single entry within a content description element.
  element mei:contentItem {
    text*, mei_att.bibl.attributes, mei_att.common.attributes, empty
  }
mei_creation =
  
  ## – Non-bibliographic details of the creation of an intellectual entity, in narrative form, such as the date, place, and circumstances of its composition. 
  element mei:creation {
    (text | mei_date | mei_geogName)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_dimensions =
  
  ## – Information about the physical size of a bibliographic source; usually includes numerical data. 
  element mei:dimensions {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_editionStmt =
  
  ## (edition statement) – Container for meta-data pertaining to a particular edition of the material being described. 
  element mei:editionStmt {
    (mei_model.editionLike, mei_respStmt*)+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_editorialDecl =
  
  ## (editorial declaration) – Used to provide details of editorial principles and practices applied during the encoding of musical text. 
  element mei:editorialDecl {
    (mei_model.pLike+
     | (mei_model.editorialDeclPart+, mei_model.pLike*)),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_encodingDesc =
  
  ## (encoding description) – Documents the relationship between an electronic file and the source or sources from which it was derived as well as applications used in the encoding/editing process. 
  element mei:encodingDesc {
    mei_model.encodingPart_sequenceOptional,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
exhibHist =
  
  ## (exhibition history) – A record of public exhibitions, including dates, venues, etc. 
  element mei:exhibHist {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_extent =
  
  ## – Used to express size in terms other than physical dimensions, such as number of pages, number of records in file, number of bytes, performance duration for music, audio recordings and visual projections, etc. 
  element mei:extent {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_fileDesc =
  
  ## (file description) – Contains a full bibliographic description of the MEI file. 
  element mei:fileDesc {
    mei_titleStmt,
    mei_editionStmt?,
    mei_extent?,
    pubStmt,
    mei_seriesStmt?,
    mei_notesStmt?,
    mei_sourceDesc?,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
mei_hand =
  
  ## – Defines a distinct scribe or handwriting style. 
  element mei:hand {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    mei_att.medium.attributes,
    mei_att.responsibility.attributes,
    
    ## marks this hand as the first one of the document.
    attribute initial { data.BOOLEAN }?,
    empty
  }
handList =
  
  ## – Container for one or more hand elements. 
  element mei:handList {
    mei_hand+, mei_att.common.attributes, mei_att.bibl.attributes, empty
  }
mei_history =
  
  ## – Provides a container for information about the creation and history of a resource.
  element mei:history {
    mei_model.headLike?,
    mei_creation?,
    (eventList | mei_p)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
incipCode =
  
  ## – Incipit coded in a non-XML, plain text format, such as Plaine & Easie Code.
  element mei:incipCode {
    text
    >> sch:pattern [
         id = "incipCode-constraint-Check_incipCode_form_mimetype"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:incipCode"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@form or @mimetype"
             "incipCode must have a form or mimetype\x{a}" ~
             "              attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.internetmedia.attributes,
    mei_att.pointing.attributes,
    
    ## identifies the language of the element's content. The values for this attribute are language 'tags' as defined in BCP 47. All language tags that make use of private use sub-tags must be documented in a corresponding language element in the MEI header whose id attribute is the same as the language tag's value.
    attribute xml:space {
      
      ## allows the application to handle white space as necessary. Not including an xml:space attribute produces the same result as using the default value.
      "default"
      | 
        ## instructs the application to maintain white space as is, suggesting that it might have meaning.
        "preserve"
    }?,
    
    ## describes the notational form of the coded text.
    ## Suggested values include: 1] plaineAndEasie; 2] humdrumKern
    attribute form {
      
      ## Plaine & Easie Code.
      "plaineAndEasie"
      | 
        ## Humdrum Kern format.
        "humdrumKern"
      | xsd:Name
    }?,
    empty
  }
incipText =
  
  ## – Opening words of a musical composition.
  element mei:incipText {
    (mei_model.pLike | mei_model.lgLike)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    mei_att.pointing.attributes,
    mei_att.internetmedia.attributes,
    empty
  }
inscription =
  
  ## – An inscription added to an item, such as a bookplate, a note designating the item as a gift, and/or the author's signature.
  element mei:inscription {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_interpretation =
  
  ## – Describes the scope of any analytic or interpretive information added to the transcription of the music. 
  element mei:interpretation {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mensuration =
  
  ## – Captures information about mensuration within bibliographic descriptions.
  element mei:mensuration {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.mensur.log.attributes,
    empty
  }
meter =
  
  ## – Captures information about the time signature within bibliographic descriptions. 
  element mei:meter {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.meterSig.log.attributes,
    empty
  }
termList =
  
  ## – Collection of text phrases which describe a resource.
  element mei:termList {
    mei_term+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    
    ## contains a reference to the controlled vocabulary from which the terms are drawn. The value must match the value of an ID attribute on a classCode element given elsewhere in the document.
    attribute classcode { data.URI }?,
    empty
  }
mei_language =
  
  ## – Description of a language used in the document. 
  element mei:language {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    empty
  }
mei_langUsage =
  
  ## (language usage) – Groups elements describing the languages, sub-languages, dialects, etc., represented within the encoded resource. 
  element mei:langUsage {
    mei_language+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_normalization =
  
  ## – Indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. 
  element mei:normalization {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    mei_att.regularmethod.attributes,
    empty
  }
mei_notesStmt =
  
  ## (notes statement)– Collects any notes providing information about a text additional to that recorded in other parts of the bibliographic description. 
  element mei:notesStmt {
    mei_model.annotLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
perfMedium =
  
  ## (performance medium) – Indicates the number and character of the performing forces used in a musical composition. 
  element mei:perfMedium {
    mei_model.headLike?,
    mei_castList?,
    instrumentation?,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    empty
  }
instrumentation =
  
  ## – Instrumental and non-dramatic vocal resources.
  element mei:instrumentation {
    mei_head?,
    (ensemble? | (instrVoice | instrVoiceGrp)*),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    empty
  }
ensemble =
  
  ## – The name of a standard instrumental or vocal grouping, such as 'orchestra' or 'marching band'. 
  element mei:ensemble {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    
    ## captures one or more coded values for the textual content of this element.
    attribute code { xsd:NMTOKEN }?,
    empty
  }
instrVoice =
  
  ## (instrument or voice) – Name of an instrument on which a performer plays or a performer's voice range.
  element mei:instrVoice {
    (text | instrVoice)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    
    ## captures one or more coded values for the textual content of this element.
    attribute code { xsd:NMTOKEN }?,
    
    ## indicates the number of performers.
    attribute count { xsd:positiveInteger }?,
    
    ## marks this instrument or vocal part as a soloist. Do not use this attribute for a solo instrument which is not accompanied.
    attribute solo { data.BOOLEAN }?,
    empty
  }
instrVoiceGrp =
  
  ## – Several instrumental or vocal resources treated as a group.
  element mei:instrVoiceGrp {
    (text | mei_model.headLike | instrVoice | instrVoiceGrp)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_physDesc =
  
  ## (physical description) – Container for information about the location, appearance, construction, or handling of physical materials, such as their dimension, quantity, color, style, and technique of creation. 
  element mei:physDesc {
    mei_model.physDescPart+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
physLoc =
  
  ## (physical location) – Location of the source within a repository, e.g., shelf mark or other locational information. 
  element mei:physLoc {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
physMedium =
  
  ## (physical medium) – Records the physical materials used in the source, such as ink and paper. 
  element mei:physMedium {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    mei_att.lang.attributes,
    empty
  }
plateNum =
  
  ## (plate number) – Designation assigned to a resource by a music publisher, usually printed at the bottom of each page, and sometimes appearing also on the title page. 
  element mei:plateNum {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.facsimile.attributes,
    empty
  }
price =
  
  ## – The cost of access to a bibliographic item.
  element mei:price {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_projectDesc =
  
  ## (project description) – Project-level meta-data describing the aim or purpose for which the electronic file was encoded, funding agencies, etc. together with any other relevant information concerning the process by which it was assembled or collected. 
  element mei:projectDesc {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_provenance =
  
  ## – The record of ownership or custodianship of an item. 
  element mei:provenance {
    (eventList? | (text | mei_model.textphraseLike.limited)*),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
pubStmt =
  
  ## (publication statement) – Container for information regarding the publication or distribution of a bibliographic item, including the publisher's name and address, the date of publication, and other relevant details. 
  element mei:pubStmt {
    (unpub? | mei_model.pubStmtPart*),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_relatedItem =
  
  ## (related item) – contains or references another bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. 
  element mei:relatedItem {
    mei_model.identifierLike*,
    mei_titleStmt?,
    macro.bibldescPart,
    mei_notesStmt?,
    macro.workPart,
    classification?,
    mei_model.incipLike?,
    contents?,
    mei_relatedItem*,
    mei_att.datapointing.attributes,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.pointing.attributes,
    
    ## describes the relationship between the <relatedItem> and the resource described in the parent element, i.e. <source> or <relatedItem>. "preceding" indicates a predecessor to the resource; "succeeding" applies to a successor to the resource; "original" indicates the original form of the resource; "host" provides info concerning an intellectual or physical constituent unit of the resource; "otherVersion" indicates a change in the intellectual content of the resource not significant enough to be a different work; "otherFormat" indicates a change in physical format of the resource; "isReferencedBy" applies to a citation or reference to published bibliographic descriptions, reviews, abstracts, or indexes of the content of the resource; "references" applies to a resource cited or referred to in the resource. These values are based on MODS version 3.4.
    attribute rel {
      
      ##
      "preceding"
      | 
        ##
        "succeeding"
      | 
        ##
        "original"
      | 
        ##
        "host"
      | 
        ##
        "constituent"
      | 
        ##
        "otherVersion"
      | 
        ##
        "otherFormat"
      | 
        ##
        "isReferencedBy"
      | 
        ##
        "references"
    },
    empty
  }
mei_resp =
  
  ## (responsibility) – A phrase describing the nature of a person's intellectual responsibility. 
  element mei:resp { text, mei_att.authorized.attributes, empty }
mei_respStmt =
  
  ## (responsibility statement) – Names one or more individuals, groups, or in rare cases, mechanical processes, responsible for creation or realization of the intellectual or artistic content. 
  element mei:respStmt {
    (mei_resp | mei_model.nameLike | mei_model.nameLike.agent)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
mei_revisionDesc =
  
  ## (revision description) – Container for information about alterations that have been made to an MEI file. 
  element mei:revisionDesc {
    mei_change+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_samplingDecl =
  
  ## (sampling declaration) – Contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. 
  element mei:samplingDecl {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_segmentation =
  
  ## – Describes the principles according to which the musical text has been segmented, for example into movements, sections, etc. 
  element mei:segmentation {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_seriesStmt =
  
  ## (series statement) – Groups information about the series, if any, to which a publication belongs. 
  element mei:seriesStmt {
    mei_model.titleLike+,
    mei_respStmt*,
    mei_model.identifierLike*,
    contents?,
    mei_seriesStmt*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_source =
  
  ## – A bibliographic description of a source used in the creation of the electronic file. 
  element mei:source {
    mei_model.identifierLike*,
    mei_titleStmt?,
    macro.bibldescPart,
    mei_notesStmt?,
    macro.workPart,
    classification?,
    mei_model.incipLike?,
    contents?,
    mei_relatedItem*,
    mei_att.datapointing.attributes,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_sourceDesc =
  
  ## (source description) – A container for the descriptions of the source(s) used in the creation of the electronic file. 
  element mei:sourceDesc {
    mei_source+, mei_att.common.attributes, empty
  }
mei_stdVals =
  
  ## (standard values) – Specifies the format used when standardized date or number values are supplied. 
  element mei:stdVals {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
sysReq =
  
  ## (system requirements) – System requirements for using the electronic item.
  element mei:sysReq {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_term =
  
  ## – Keyword or phrase which describes a resource. 
  element mei:term {
    (text | mei_term | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    
    ## contains a reference to the controlled vocabulary from which the term is drawn. The value must match the value of an ID attribute on a classCode element given elsewhere in the document.
    attribute classcode { data.URI }?,
    empty
  }
mei_titleStmt =
  
  ## (title statement) – Container for title and responsibility meta-data. 
  element mei:titleStmt {
    mei_model.titleLike+,
    mei_respStmt*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
treatHist =
  
  ## (treatment history) – A record of the treatment the item has undergone (e.g., de-acidification, restoration, etc.). 
  element mei:treatHist {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
treatSched =
  
  ## (treatment scheduled) – Scheduled treatment, e.g. de-acidification, restoration, etc., for an item. 
  element mei:treatSched {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
unpub =
  
  ## (unpublished) – Used to explicitly indicate that a bibliographic resource is unpublished. 
  element mei:unpub {
    text, mei_att.common.attributes, mei_att.bibl.attributes, empty
  }
useRestrict =
  
  ## (usage restrictions) – Container for information about the conditions that affect use of a bibliographic item after access has been granted. 
  element mei:useRestrict {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_watermark =
  
  ## – Contains a description of a watermark or similar device. 
  element mei:watermark {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.facsimile.attributes,
    empty
  }
workDesc =
  
  ## (work description) – Grouping mechanism for information describing non-bibliographic aspects of a text.
  element mei:workDesc { work+, mei_att.common.attributes, empty }
work =
  
  ## – Provides a detailed description of the non-bibliographic aspects of a text, specifically its history, language use, and high-level musical attributes: key, tempo, meter, and medium of performance.
  element mei:work {
    mei_model.identifierLike*,
    mei_titleStmt?,
    macro.workPart,
    mei_notesStmt?,
    classification?,
    mei_model.incipLike?,
    contents?,
    mei_relatedItem*,
    mei_att.datapointing.attributes,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
eventList =
  
  ## – Contains historical information given as a sequence of significant past events. 
  element mei:eventList {
    mei_model.headLike?,
    mei_event+,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_event =
  
  ## – Contains a description of an event, including the dates and locations of its occurrence and prominent participants. 
  element mei:event {
    ((text | mei_model.textphraseLike.limited)*
     | (mei_model.tableLike | mei_model.listLike)*),
    mei_att.bibl.attributes,
    mei_att.calendared.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_att.beamed.attributes = mei_att.beamed.attribute.beam
mei_att.beamed.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
mei_att.beamedwith.attributes = mei_att.beamedwith.attribute.beam.with
mei_att.beamedwith.attribute.beam.with =
  
  ## In the case of cross-staff beams, the beam.with attribute is used to indicate which staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.OTHERSTAFF }?
mei_att.beaming.log.attributes =
  mei_att.beaming.log.attribute.beam.group,
  mei_att.beaming.log.attribute.beam.rests
mei_att.beaming.log.attribute.beam.group =
  
  ## provides an example of how automated beaming (including secondary beams) is to be performed. 
  attribute beam.group { text }?
mei_att.beaming.log.attribute.beam.rests =
  
  ## indicates whether automatically-drawn beams should include rests shorter than a quarter note duration.
  attribute beam.rests { data.BOOLEAN }?
mei_att.beamrend.attributes =
  mei_att.beamrend.attribute.rend, mei_att.beamrend.attribute.slope
mei_att.beamrend.attribute.rend =
  
  ## captures whether a beam is "feathered" and in which direction.
  attribute rend {
    
    ## (accelerando) indicates that the secondary beams get progressively closer together toward the end of the beam.
    "acc"
    | 
      ## (mixed acc and rit) for beams that are "feathered" in both directions.
      "mixed"
    | 
      ## (ritardando) means that the secondary beams become progressively more distance toward the end of the beam.
      "rit"
    | 
      ## (normal) indicates that the secondary beams are equidistant along the course of the beam.
      "norm"
  }?
mei_att.beamrend.attribute.slope =
  
  ## records the slope of the beam.
  attribute slope { xsd:decimal }?
mei_att.beamsecondary.attributes =
  mei_att.beamsecondary.attribute.breaksec
mei_att.beamsecondary.attribute.breaksec =
  
  ## presence of this attribute indicates that the secondary beam should be broken following this note/chord. The value of the attribute records the number of beams which should remain unbroken.
  attribute breaksec { xsd:positiveInteger }?
mei_att.cutout.attributes = mei_att.cutout.attribute.cutout
mei_att.cutout.attribute.cutout =
  
  ## "Cut-out" style indicated for this measure.
  attribute cutout {
    
    ## the staff lines should not be drawn.
    "cutout"
  }?
mei_att.expandable.attributes = mei_att.expandable.attribute.expand
mei_att.expandable.attribute.expand =
  
  ## indicates whether to render a repeat symbol or the source material to which it refers. A value of 'true' renders the source material, while 'false' displays the repeat symbol.
  attribute expand { data.BOOLEAN }?
mei_att.graced.attributes =
  mei_att.graced.attribute.grace, mei_att.graced.attribute.grace.time
mei_att.graced.attribute.grace =
  
  ## marks a note or chord as a "grace" (without a definitive written duration) and records from which other note/chord it should "steal" time.
  attribute grace { data.GRACE }?
mei_att.graced.attribute.grace.time =
  
  ## records the amount of time to be "stolen" from a non-grace note/chord.
  attribute grace.time { data.PERCENT }?
mei_att.lvpresent.attributes = mei_att.lvpresent.attribute.lv
mei_att.lvpresent.attribute.lv =
  
  ## indicates the attachment of an l.v. (laissez vibrer) sign to this element.
  attribute lv { data.BOOLEAN }?
mei_att.measure.vis.attributes =
  mei_att.barplacement.attributes,
  mei_att.measurement.attributes,
  mei_att.width.attributes
mei_att.numbered.attributes = mei_att.numbered.attribute.num
mei_att.numbered.attribute.num =
  
  ## records a number or count accompanying a notational feature.
  attribute num { xsd:positiveInteger }?
mei_att.numberplacement.attributes =
  mei_att.numberplacement.attribute.num.place,
  mei_att.numberplacement.attribute.num.visible
mei_att.numberplacement.attribute.num.place =
  
  ## states where the tuplet number will be placed in relation to the note heads.
  attribute num.place { data.PLACE }?
mei_att.numberplacement.attribute.num.visible =
  
  ## determines if the tuplet number is visible.
  attribute num.visible { data.BOOLEAN }?
mei_att.slurrend.attributes = mei_att.slurrend.attribute.slur.rend
mei_att.slurrend.attribute.slur.rend =
  
  ## describes the line style of the slur.
  attribute slur.rend { data.CURVERENDITION }?
mei_att.stemmed.cmn.attributes =
  mei_att.stemmed.cmn.attribute.stem.mod,
  mei_att.stemmed.cmn.attribute.stem.with
mei_att.stemmed.cmn.attribute.stem.mod =
  
  ## encodes any stem "modifiers"; that is, symbols rendered on the stem, such as tremolo or Sprechstimme indicators.
  attribute stem.mod { data.STEMMODIFIER }?
mei_att.stemmed.cmn.attribute.stem.with =
  
  ## contains an indication of which staff a note or chord that logically belongs to the current staff should be visually placed on; that is, the one above or the one below.
  attribute stem.with { data.OTHERSTAFF }?
mei_att.tierend.attributes = mei_att.tierend.attribute.tie.rend
mei_att.tierend.attribute.tie.rend =
  
  ## describes the line style of the tie.
  attribute tie.rend { data.CURVERENDITION }?
mei_att.tremmeasured.attributes =
  mei_att.tremmeasured.attribute.measperf
mei_att.tremmeasured.attribute.measperf =
  
  ## the performed duration of an individual note in a measured tremolo.
  attribute measperf { data.DURATION.cmn }?
mei_att.arpeg.anl.attributes = mei_att.common.anl.attributes
mei_att.arpeg.ges.attributes = empty
mei_att.arpeg.log.attributes =
  mei_att.controlevent.attributes, mei_att.arpeg.log.attribute.order
mei_att.arpeg.log.attribute.order =
  
  ## describes the direction in which an arpeggio is to be performed.
  attribute order {
    
    ## lowest to highest pitch.
    "up"
    | 
      ## highest to lowest pitch.
      "down"
    | 
      ## non-arpeggiated style (usually rendered with a preceding bracket instead of a wavy line).
      "nonarp"
  }?
mei_att.arpeg.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.arpeg.vis.attribute.arrow
mei_att.arpeg.vis.attribute.arrow =
  
  ## indicates if an arrowhead is to be drawn as part of the arpeggiation symbol.
  attribute arrow { data.BOOLEAN }?
mei_att.beam.anl.attributes = mei_att.common.anl.attributes
mei_att.beam.ges.attributes = empty
mei_att.beam.log.attributes =
  mei_att.event.attributes, mei_att.beamedwith.attributes
mei_att.beam.vis.attributes = mei_att.beamrend.attributes
mei_att.beamSpan.anl.attributes = mei_att.common.anl.attributes
mei_att.beamSpan.ges.attributes = mei_att.duration.performed.attributes
mei_att.beamSpan.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.beamedwith.attributes,
  mei_att.duration.musical.attributes
mei_att.beamSpan.vis.attributes = mei_att.beamrend.attributes
mei_att.beatRpt.anl.attributes = mei_att.common.anl.attributes
mei_att.beatRpt.ges.attributes = empty
mei_att.beatRpt.log.attributes = mei_att.event.attributes
mei_att.beatRpt.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.expandable.attributes,
  mei_att.beatRpt.vis.attribute.rend
mei_att.beatRpt.vis.attribute.rend =
  
  ## indicates the number of slashes required to render the appropriate beat repeat symbol. When a single beat is repeated, consisting of a single note or chord, it is indicated by a single thick, slanting slash; therefore, the value '1' should be used. The following values should be used when the beat is divided into even notes: 4ths or 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5. When the beat is comprised of mixed duration values, the symbol is always rendered as 2 slashes and 2 dots.
  attribute rend { data.BEATRPT.REND }
mei_att.bend.anl.attributes = mei_att.common.anl.attributes
mei_att.bend.ges.attributes = mei_att.bend.ges.attribute.amount
mei_att.bend.ges.attribute.amount =
  
  ## records the amount of detuning. The decimal values should be rendered as a fraction (or an integer plus a fraction) along with the bend symbol.
  attribute amount { data.BEND.AMOUNT }?
mei_att.bend.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.bend.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes,
  mei_att.curvature.attributes,
  mei_att.curverend.attributes
mei_att.breath.anl.attributes = mei_att.common.anl.attributes
mei_att.breath.ges.attributes = empty
mei_att.breath.log.attributes =
  mei_att.controlevent.attributes, mei_att.startendid.attributes
mei_att.breath.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes
mei_att.bTrem.anl.attributes = mei_att.common.anl.attributes
mei_att.bTrem.ges.attributes = mei_att.tremmeasured.attributes
mei_att.bTrem.log.attributes =
  mei_att.event.attributes,
  mei_att.numbered.attributes,
  mei_att.bTrem.log.attribute.form
mei_att.bTrem.log.attribute.form =
  
  ## describes the style of the tremolo.
  attribute form {
    
    ## measured tremolo.
    "meas"
    | 
      ## unmeasured tremolo.
      "unmeas"
  }?
mei_att.bTrem.vis.attributes = mei_att.numberplacement.attributes
mei_att.chord.ges.cmn.attributes = mei_att.graced.attributes
mei_att.chord.log.cmn.attributes =
  mei_att.beamed.attributes,
  mei_att.lvpresent.attributes,
  mei_att.ornam.attributes
mei_att.chord.vis.cmn.attributes = mei_att.beamsecondary.attributes
mei_att.fermata.anl.attributes = mei_att.common.anl.attributes
mei_att.fermata.ges.attributes = mei_att.duration.performed.attributes
mei_att.fermata.log.attributes =
  mei_att.controlevent.attributes, mei_att.startendid.attributes
mei_att.fermata.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.fermata.vis.attribute.form,
  mei_att.fermata.vis.attribute.shape
mei_att.fermata.vis.attribute.form =
  
  ## describes the visual appearance of the fermata; that is, whether it occurs as upright or inverted.
  attribute form {
    
    ## inverted, i.e., curve or bracket below the dot.
    "inv"
    | 
      ## upright; i.e., curve or bracket above the dot.
      "norm"
  }?
mei_att.fermata.vis.attribute.shape =
  
  ## describes the visual appearance of the fermata; that is, whether it has a curved or square shape.
  attribute shape {
    
    ## a curve above or below the dot.
    "curved"
    | 
      ## a bracket above or below the dot.
      "square"
  }?
mei_att.fTrem.anl.attributes = mei_att.common.anl.attributes
mei_att.fTrem.ges.attributes = mei_att.tremmeasured.attributes
mei_att.fTrem.log.attributes =
  mei_att.event.attributes, mei_att.fTrem.log.attribute.form
mei_att.fTrem.log.attribute.form =
  
  ## describes the style of the tremolo.
  attribute form {
    
    ## measured tremolo.
    "meas"
    | 
      ## unmeasured tremolo.
      "unmeas"
  }?
mei_att.fTrem.vis.attributes = mei_att.slashcount.attributes
mei_att.gliss.anl.attributes = mei_att.common.anl.attributes
mei_att.gliss.ges.attributes = empty
mei_att.gliss.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.gliss.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes,
  mei_att.linerend.attributes,
  mei_att.gliss.vis.attribute.text
mei_att.gliss.vis.attribute.text =
  
  ## records a text string, such as 'gliss', that accompanies the glissando mark.
  attribute text { text }?
mei_att.hairpin.anl.attributes = mei_att.common.anl.attributes
mei_att.hairpin.ges.attributes = mei_att.duration.performed.attributes
mei_att.hairpin.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes,
  mei_att.hairpin.log.attribute.form
mei_att.hairpin.log.attribute.form =
  
  ## captures the visual rendition and function of the hairpin; that is, whether it indicates an increase or a decrease in volume.
  attribute form {
    
    ## crescendo; i.e., louder.
    "cres"
    | 
      ## diminuendo; i.e., softer.
      "dim"
  }
mei_att.hairpin.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes,
  mei_att.hairpin.vis.attribute.opening
mei_att.hairpin.vis.attribute.opening =
  
  ## specifies the distance between the points of the open end of a hairpin dynamic mark.
  attribute opening { data.INTERLINE }?
mei_att.halfmRpt.anl.attributes = mei_att.common.anl.attributes
mei_att.halfmRpt.ges.attributes = empty
mei_att.halfmRpt.log.attributes =
  mei_att.event.attributes, mei_att.duration.musical.attributes
mei_att.halfmRpt.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.expandable.attributes,
  mei_att.visualoffset.attributes
mei_att.harpPedal.anl.attributes = mei_att.common.anl.attributes
mei_att.harpPedal.ges.attributes = mei_att.duration.performed.attributes
mei_att.harpPedal.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.harpPedal.log.attribute.c,
  mei_att.harpPedal.log.attribute.d,
  mei_att.harpPedal.log.attribute.e,
  mei_att.harpPedal.log.attribute.f,
  mei_att.harpPedal.log.attribute.g,
  mei_att.harpPedal.log.attribute.a,
  mei_att.harpPedal.log.attribute.b
mei_att.harpPedal.log.attribute.c =
  
  ## indicates the pedal setting for the harp's C strings.
  [ a:defaultValue = "n" ]
  attribute c {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.log.attribute.d =
  
  ## indicates the pedal setting for the harp's D strings.
  [ a:defaultValue = "n" ]
  attribute d {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.log.attribute.e =
  
  ## indicates the pedal setting for the harp's E strings.
  [ a:defaultValue = "n" ]
  attribute e {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.log.attribute.f =
  
  ## indicates the pedal setting for the harp's F strings.
  [ a:defaultValue = "n" ]
  attribute f {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.log.attribute.g =
  
  ## indicates the pedal setting for the harp's G strings.
  [ a:defaultValue = "n" ]
  attribute g {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.log.attribute.a =
  
  ## indicates the pedal setting for the harp's A strings.
  [ a:defaultValue = "n" ]
  attribute a {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.log.attribute.b =
  
  ## indicates the pedal setting for the harp's B strings.
  [ a:defaultValue = "n" ]
  attribute b {
    
    ## flat.
    "f"
    | 
      ## natural.
      "n"
    | 
      ## sharp.
      "s"
  }?
mei_att.harpPedal.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes
mei_att.layerDef.log.cmn.attributes = mei_att.beaming.log.attributes
mei_att.mRest.anl.attributes = mei_att.common.anl.attributes
mei_att.mRest.ges.attributes =
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes
mei_att.mRest.log.attributes =
  mei_att.duration.musical.attributes,
  mei_att.event.attributes,
  mei_att.fermatapresent.attributes
mei_att.mRest.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.cutout.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visibility.attributes,
  mei_att.xy.attributes,
  mei_att.relativesize.attributes
mei_att.mRpt.anl.attributes = mei_att.common.anl.attributes
mei_att.mRpt.ges.attributes = empty
mei_att.mRpt.log.attributes = mei_att.event.attributes
mei_att.mRpt.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.expandable.attributes
mei_att.mRpt2.anl.attributes = mei_att.common.anl.attributes
mei_att.mRpt2.ges.attributes = empty
mei_att.mRpt2.log.attributes = mei_att.event.attributes
mei_att.mRpt2.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.expandable.attributes
mei_att.mSpace.anl.attributes = mei_att.common.anl.attributes
mei_att.mSpace.ges.attributes =
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes
mei_att.mSpace.log.attributes =
  mei_att.event.attributes, mei_att.fermatapresent.attributes
mei_att.mSpace.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.cutout.attributes,
  mei_att.visibility.attributes,
  mei_att.xy.attributes
mei_att.multiRest.anl.attributes = mei_att.common.anl.attributes
mei_att.multiRest.ges.attributes =
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes
mei_att.multiRest.log.attributes =
  mei_att.event.attributes, mei_att.numbered.attributes
mei_att.multiRest.vis.attributes =
  mei_att.altsym.attributes, mei_att.multiRest.vis.attribute.block
mei_att.multiRest.vis.attribute.block =
  
  ## When the block attribute is used, combinations of the 1, 2, and 4 measure rest forms (Read, p. 104) should be rendered instead of the modern form or an alternative symbol.
  attribute block { data.BOOLEAN }?
mei_att.multiRpt.anl.attributes = mei_att.common.anl.attributes
mei_att.multiRpt.ges.attributes = empty
mei_att.multiRpt.log.attributes =
  mei_att.event.attributes, mei_att.numbered.attributes
mei_att.multiRpt.vis.attributes =
  mei_att.altsym.attributes, mei_att.expandable.attributes
mei_att.note.ges.cmn.attributes =
  mei_att.graced.attributes, mei_att.note.ges.cmn.attribute.gliss
mei_att.note.ges.cmn.attribute.gliss =
  
  ## indicates that this element participates in a glissando.
  attribute gliss { data.GLISSANDO }?
mei_att.note.log.cmn.attributes =
  mei_att.beamed.attributes,
  mei_att.lvpresent.attributes,
  mei_att.ornam.attributes
mei_att.note.vis.cmn.attributes = mei_att.beamsecondary.attributes
mei_att.octave.anl.attributes = mei_att.common.anl.attributes
mei_att.octave.ges.attributes = mei_att.duration.performed.attributes
mei_att.octave.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.octavedisplacement.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes,
  mei_att.octave.log.attribute.coll
mei_att.octave.log.attribute.coll =
  
  ## indicates whether the octave displacement should be performed simultaneously with the written notes, i.e., "coll' ottava". Unlike other octave signs which are indicated by broken lines, coll' ottava typically uses an unbroken line or a series of longer broken lines, ending with a short vertical stroke. See Read, p. 47-48.
  attribute coll {
    
    ## coll' ottava (with the octave).
    "coll"
  }?
mei_att.octave.vis.attributes =
  mei_att.xy.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.linerend.attributes
mei_att.ossia.anl.attributes = mei_att.common.anl.attributes
mei_att.ossia.ges.attributes = empty
mei_att.ossia.log.attributes = empty
mei_att.ossia.vis.attributes = empty
mei_att.pedal.anl.attributes = mei_att.common.anl.attributes
mei_att.pedal.ges.attributes = empty
mei_att.pedal.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.pedal.log.attribute.dir
mei_att.pedal.log.attribute.dir =
  
  ## records the position of the piano damper pedal.
  attribute dir {
    
    ## depress the pedal.
    "down"
    | 
      ## release the pedal.
      "up"
    | 
      ## half pedal.
      "half"
    | 
      ## depress then immediately release the pedal.
      "bounce"
  }
mei_att.pedal.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.xy.attributes,
  mei_att.visualoffset.attributes,
  mei_att.pedal.vis.attribute.style
mei_att.pedal.vis.attribute.style =
  
  ## determines whether piano pedal marks should be rendered as lines or as terms.
  attribute style {
    
    ## continuous line with start and end positions rendered by vertical bars and bounces shown by upward-pointing "blips".
    "line"
    | 
      ## pedal down and half pedal rendered with "Ped.", pedal up rendered by "*", pedal "bounce" rendered with "* Ped.".
      "pedstar"
    | 
      ## pedal up and down indications same as with "pedstar", but bounce is rendered with "Ped." only.
      "altpedstar"
  }?
mei_att.phrase.vis.cmn.attributes =
  mei_att.curvature.attributes, mei_att.curverend.attributes
mei_att.pianopedals.attributes =
  mei_att.pianopedals.attribute.pedal.style
mei_att.pianopedals.attribute.pedal.style =
  
  ## determines whether piano pedal marks should be rendered as lines or as terms.
  attribute pedal.style {
    
    ## continuous line with start and end positions rendered by vertical bars and bounces shown by upward-pointing "blips".
    "line"
    | 
      ## pedal down and half pedal rendered with "Ped.", pedal up rendered by "*", pedal "bounce" rendered with "* Ped.".
      "pedstar"
    | 
      ## pedal up and down indications same as with "pedstar", but bounce is rendered with "Ped." only.
      "altpedstar"
  }?
mei_att.rehearsal.attributes = mei_att.rehearsal.attribute.reh.enclose
mei_att.rehearsal.attribute.reh.enclose =
  
  ## describes the enclosing shape for rehearsal marks.
  attribute reh.enclose {
    
    ## enclosed by box.
    "box"
    | 
      ## enclosed by circle.
      "circle"
    | 
      ## no enclosing shape.
      "none"
  }?
mei_att.reh.anl.attributes = mei_att.common.anl.attributes
mei_att.reh.ges.attributes = empty
mei_att.reh.log.attributes =
  mei_att.staffident.attributes,
  mei_att.startid.attributes,
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes
mei_att.reh.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.typography.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes
mei_att.rest.log.cmn.attributes = mei_att.beamed.attributes
mei_att.rest.vis.cmn.attributes = empty
mei_att.scoreDef.log.cmn.attributes = mei_att.beaming.log.attributes
mei_att.scoreDef.vis.cmn.attributes =
  mei_att.beaming.vis.attributes,
  mei_att.pianopedals.attributes,
  mei_att.rehearsal.attributes,
  mei_att.slurrend.attributes,
  mei_att.tierend.attributes,
  mei_att.scoreDef.vis.cmn.attribute.grid.show
mei_att.scoreDef.vis.cmn.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
mei_att.slur.anl.attributes =
  mei_att.common.anl.attributes, mei_att.joined.attributes
mei_att.slur.ges.attributes = mei_att.duration.performed.attributes
mei_att.slur.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.slur.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes,
  mei_att.curvature.attributes,
  mei_att.curverend.attributes
mei_att.space.log.cmn.attributes = mei_att.beamed.attributes
mei_att.staffDef.log.cmn.attributes = mei_att.beaming.log.attributes
mei_att.staffDef.vis.cmn.attributes =
  mei_att.beaming.vis.attributes,
  mei_att.pianopedals.attributes,
  mei_att.rehearsal.attributes,
  mei_att.slurrend.attributes,
  mei_att.tierend.attributes
mei_att.tie.anl.attributes = mei_att.common.anl.attributes
mei_att.tie.ges.attributes = empty
mei_att.tie.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.tie.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes,
  mei_att.curvature.attributes,
  mei_att.curverend.attributes
mei_att.tuplet.anl.attributes = mei_att.common.anl.attributes
mei_att.tuplet.ges.attributes = mei_att.duration.performed.attributes
mei_att.tuplet.log.attributes =
  mei_att.event.attributes,
  mei_att.beamedwith.attributes,
  mei_att.augmentdots.attributes,
  mei_att.duration.ratio.attributes,
  mei_att.startendid.attributes,
  mei_att.tuplet.log.attribute.dur
mei_att.tuplet.log.attribute.dur =
  
  ## records the duration of the tuplet using the optionally dotted, relative durational values provided by the data.DURATION datatype. When the tuplet duration is "irrational", @dur may contain multiple, space-separated values that add up to the total duration. For unmeasured music, use the attributes found in att.duration.ratio (num and numbase) to capture the tuplet's duration instead of this attribute.
  attribute dur {
    list {
      xsd:token {
        pattern = "(long|breve|1|2|4|8|16|32|64|128|256|1024|2048)(\.)*"
      }+
    }
  }?
mei_att.tuplet.vis.attributes =
  mei_att.numberplacement.attributes,
  mei_att.tuplet.vis.attribute.bracket.place,
  mei_att.tuplet.vis.attribute.bracket.visible,
  mei_att.tuplet.vis.attribute.dur.visible,
  mei_att.tuplet.vis.attribute.num.format
mei_att.tuplet.vis.attribute.bracket.place =
  
  ## used to state where a tuplet bracket will be placed in relation to the note heads.
  attribute bracket.place { data.PLACE }?
mei_att.tuplet.vis.attribute.bracket.visible =
  
  ## states whether a bracket should be rendered with a tuplet.
  attribute bracket.visible { data.BOOLEAN }?
mei_att.tuplet.vis.attribute.dur.visible =
  
  ## determines if the tuplet duration is visible.
  attribute dur.visible { data.BOOLEAN }?
mei_att.tuplet.vis.attribute.num.format =
  
  ## controls how the num:numbase ratio is to be displayed.
  attribute num.format {
    
    ## only the num attribute is displayed, e.g., '7'.
    "count"
    | 
      ## both the num and numbase attributes are displayed, e.g., '7:4'.
      "ratio"
  }?
mei_att.tupletSpan.anl.attributes = mei_att.tuplet.anl.attributes
mei_att.tupletSpan.ges.attributes = mei_att.tuplet.ges.attributes
mei_att.tupletSpan.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.beamedwith.attributes,
  mei_att.augmentdots.attributes,
  mei_att.duration.ratio.attributes,
  mei_att.startendid.attributes,
  mei_att.tupletSpan.log.attribute.dur
mei_att.tupletSpan.log.attribute.dur =
  
  ## records the duration of the tuplet using the optionally dotted, relative durational values provided by the data.DURATION datatype. When the tuplet duration is "irrational", a @dur may contain multiple, space-separated values that add up to the total duration. For unmeasured music, use the attributes found in att.duration.ratio (num and numbase) to capture the tuplet's duration instead of this attribute.
  attribute dur {
    list {
      xsd:token {
        pattern = "(long|breve|1|2|4|8|16|32|64|128|256|1024|2048)(\.)*"
      }+
    }
  }?
mei_att.tupletSpan.vis.attributes = mei_att.tuplet.vis.attributes
mei_model.controleventLike.cmn =
  arpeg
  | beamSpan
  | breath
  | fermata
  | hairpin
  | harpPedal
  | octave
  | pedal
  | reh
  | slur
  | tie
  | tupletSpan
  | mei_model.ornamentLike.cmn
mei_model.controleventLike.cmn_alternation =
  arpeg
  | beamSpan
  | breath
  | fermata
  | hairpin
  | harpPedal
  | octave
  | pedal
  | reh
  | slur
  | tie
  | tupletSpan
  | mei_model.ornamentLike.cmn_alternation
mei_model.controleventLike.cmn_sequence =
  arpeg,
  beamSpan,
  breath,
  fermata,
  hairpin,
  harpPedal,
  octave,
  pedal,
  reh,
  slur,
  tie,
  tupletSpan,
  mei_model.ornamentLike.cmn_sequence
mei_model.controleventLike.cmn_sequenceOptional =
  arpeg?,
  beamSpan?,
  breath?,
  fermata?,
  hairpin?,
  harpPedal?,
  octave?,
  pedal?,
  reh?,
  slur?,
  tie?,
  tupletSpan?,
  mei_model.ornamentLike.cmn_sequenceOptional?
mei_model.controleventLike.cmn_sequenceOptionalRepeatable =
  arpeg*,
  beamSpan*,
  breath*,
  fermata*,
  hairpin*,
  harpPedal*,
  octave*,
  pedal*,
  reh*,
  slur*,
  tie*,
  tupletSpan*,
  mei_model.ornamentLike.cmn_sequenceOptionalRepeatable*
mei_model.controleventLike.cmn_sequenceRepeatable =
  arpeg+,
  beamSpan+,
  breath+,
  fermata+,
  hairpin+,
  harpPedal+,
  octave+,
  pedal+,
  reh+,
  slur+,
  tie+,
  tupletSpan+,
  mei_model.ornamentLike.cmn_sequenceRepeatable+
mei_model.layerPart.cmn = mei_model.eventLike.measureFilling
mei_model.eventLike.cmn =
  beam | beatRpt | bTrem | fTrem | halfmRpt | tuplet
mei_model.eventLike.cmn_alternation =
  beam | beatRpt | bTrem | fTrem | halfmRpt | tuplet
mei_model.eventLike.cmn_sequence =
  beam, beatRpt, bTrem, fTrem, halfmRpt, tuplet
mei_model.eventLike.cmn_sequenceOptional =
  beam?, beatRpt?, bTrem?, fTrem?, halfmRpt?, tuplet?
mei_model.eventLike.cmn_sequenceOptionalRepeatable =
  beam*, beatRpt*, bTrem*, fTrem*, halfmRpt*, tuplet*
mei_model.eventLike.cmn_sequenceRepeatable =
  beam+, beatRpt+, bTrem+, fTrem+, halfmRpt+, tuplet+
mei_model.eventLike.measureFilling =
  mRest | mRpt | mRpt2 | mSpace | multiRest | multiRpt
mei_model.eventLike.measureFilling_alternation =
  mRest | mRpt | mRpt2 | mSpace | multiRest | multiRpt
mei_model.eventLike.measureFilling_sequence =
  mRest, mRpt, mRpt2, mSpace, multiRest, multiRpt
mei_model.eventLike.measureFilling_sequenceOptional =
  mRest?, mRpt?, mRpt2?, mSpace?, multiRest?, multiRpt?
mei_model.eventLike.measureFilling_sequenceOptionalRepeatable =
  mRest*, mRpt*, mRpt2*, mSpace*, multiRest*, multiRpt*
mei_model.eventLike.measureFilling_sequenceRepeatable =
  mRest+, mRpt+, mRpt2+, mSpace+, multiRest+, multiRpt+
mei_model.measureLike = mei_measure
mei_model.measureLike_alternation = mei_measure
mei_model.measureLike_sequence = mei_measure
mei_model.measureLike_sequenceOptional = mei_measure?
mei_model.measureLike_sequenceOptionalRepeatable = mei_measure*
mei_model.measureLike_sequenceRepeatable = mei_measure+
mei_model.measurePart =
  mei_model.controleventLike
  | mei_model.staffLike
  | mei_model.ossiaLike
  | mei_model.lyricsLike
  | mei_model.midiLike
mei_model.ossiaLike = ossia
mei_model.sectionPart.cmn = mei_model.measureLike
mei_model.sectionPart.cmn_alternation =
  mei_model.measureLike_alternation
mei_model.sectionPart.cmn_sequence = mei_model.measureLike_sequence
mei_model.sectionPart.cmn_sequenceOptional =
  mei_model.measureLike_sequenceOptional?
mei_model.sectionPart.cmn_sequenceOptionalRepeatable =
  mei_model.measureLike_sequenceOptionalRepeatable*
mei_model.sectionPart.cmn_sequenceRepeatable =
  mei_model.measureLike_sequenceRepeatable+
meterSig =
  
  ## (meter signature) – Written meter signature.
  element mei:meterSig {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.meterSig.anl.attributes,
    mei_att.meterSig.ges.attributes,
    mei_att.meterSig.log.attributes,
    mei_att.meterSig.vis.attributes,
    empty
  }
arpeg =
  
  ## (arpeggiation) – Indicates that the notes of a chord are to be performed successively rather than simultaneously, usually from lowest to highest. Sometimes called a "roll". 
  element mei:arpeg {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.arpeg.log.attributes,
    mei_att.arpeg.vis.attributes,
    mei_att.arpeg.ges.attributes,
    mei_att.arpeg.anl.attributes,
    empty
  }
beam =
  
  ## – A container for a series of explicitly beamed events that begins and ends entirely within a measure. 
  element mei:beam {
    (mei_model.eventLike
     | mei_model.appLike
     | mei_model.editLike
     | mei_model.transcriptionLike)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.beam.log.attributes,
    mei_att.beam.vis.attributes,
    mei_att.beam.ges.attributes,
    mei_att.beam.anl.attributes,
    empty
  }
beamSpan =
  
  ## (beam span) – Alternative element for explicitly encoding beams, particularly those which extend across bar lines. 
  element mei:beamSpan {
    empty
    >> sch:pattern [
         id =
           "beamSpan-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:beamSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.beamSpan.log.attributes,
    mei_att.beamSpan.vis.attributes,
    mei_att.beamSpan.ges.attributes,
    mei_att.beamSpan.anl.attributes,
    empty
  }
beatRpt =
  
  ## (beat repeat) – An indication that material on a preceding beat should be repeated. 
  element mei:beatRpt {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.beatRpt.log.attributes,
    mei_att.beatRpt.vis.attributes,
    mei_att.beatRpt.ges.attributes,
    mei_att.beatRpt.anl.attributes,
    empty
  }
bend =
  
  ## – A variation in pitch (often micro-tonal) upwards or downwards during the course of a note.
  element mei:bend {
    empty
    >> sch:pattern [
         id =
           "bend-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:bend"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.bend.log.attributes,
    mei_att.bend.vis.attributes,
    mei_att.bend.ges.attributes,
    mei_att.bend.anl.attributes,
    empty
  }
breath =
  
  ## (breath mark) – A indication of a point at which the performer on an instrument requiring breath (including the voice) may breathe. 
  element mei:breath {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.breath.log.attributes,
    mei_att.breath.vis.attributes,
    mei_att.breath.ges.attributes,
    mei_att.breath.anl.attributes,
    empty
  }
bTrem =
  
  ## (bowed tremolo) – A rapid alternation on a single pitch or chord.
  element mei:bTrem {
    (chord | mei_note),
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.bTrem.log.attributes,
    mei_att.bTrem.vis.attributes,
    mei_att.bTrem.ges.attributes,
    mei_att.bTrem.anl.attributes,
    empty
  }
fermata =
  
  ## – An indication placed over a note or rest to indicate that it should be held longer than its written value. May also occur over a bar line to indicate the end of a phrase or section. Sometimes called a 'hold' or 'pause'. 
  element mei:fermata {
    empty
    >> sch:pattern [
         id =
           "fermata-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:fermata"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.fermata.log.attributes,
    mei_att.fermata.vis.attributes,
    mei_att.fermata.ges.attributes,
    mei_att.fermata.anl.attributes,
    empty
  }
fTrem =
  
  ## (fingered tremolo) – A rapid alternation between a pair of notes (or chords or perhaps between a note and a chord) that are (usually) farther apart than a major second.
  element mei:fTrem {
    ((chord, (chord | mei_note))
     | (mei_note, (chord | mei_note))),
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.fTrem.log.attributes,
    mei_att.fTrem.vis.attributes,
    mei_att.fTrem.ges.attributes,
    mei_att.fTrem.anl.attributes,
    empty
  }
hairpin =
  
  ## – Indicates continuous dynamics expressed on the score as wedge-shaped graphics, e.g. < and >. 
  element mei:hairpin {
    empty
    >> sch:pattern [
         id =
           "hairpin-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:hairpin"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.hairpin.log.attributes,
    mei_att.hairpin.vis.attributes,
    mei_att.hairpin.ges.attributes,
    mei_att.hairpin.anl.attributes,
    empty
  }
harpPedal =
  
  ## (harp pedal) – Harp pedal diagram. 
  element mei:harpPedal {
    empty
    >> sch:pattern [
         id =
           "harpPedal-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:harpPedal"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.harpPedal.log.attributes,
    mei_att.harpPedal.vis.attributes,
    mei_att.harpPedal.ges.attributes,
    mei_att.harpPedal.anl.attributes,
    empty
  }
gliss =
  
  ## (glissando) – A continuous or sliding movement from one pitch to another, usually indicated by a straight or wavy line. 
  element mei:gliss {
    empty
    >> sch:pattern [
         id =
           "gliss-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:gliss"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.gliss.log.attributes,
    mei_att.gliss.vis.attributes,
    mei_att.gliss.ges.attributes,
    mei_att.gliss.anl.attributes,
    empty
  }
halfmRpt =
  
  ## (half-measure repeat) – A half-measure repeat in any meter.
  element mei:halfmRpt {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.halfmRpt.log.attributes,
    mei_att.halfmRpt.vis.attributes,
    mei_att.halfmRpt.ges.attributes,
    mei_att.halfmRpt.anl.attributes,
    empty
  }
mei_measure =
  
  ## – Unit of musical time consisting of a fixed number of note-values of a given type, as determined by the prevailing meter, and delimited in musical notation by two bar lines. 
  element mei:measure {
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.staffDefLike
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.measurePart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.measure.log.attributes,
    mei_att.measure.vis.attributes,
    mei_att.measure.ges.attributes,
    mei_att.measure.anl.attributes,
    empty
  }
mRest =
  
  ## (measure rest) – Complete measure rest in any meter. 
  element mei:mRest {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mRest.log.attributes,
    mei_att.mRest.vis.attributes,
    mei_att.mRest.ges.attributes,
    mei_att.mRest.anl.attributes,
    empty
  }
mRpt =
  
  ## (measure repeat) – An indication that the previous measure should be repeated. 
  element mei:mRpt {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mRpt.log.attributes,
    mei_att.mRpt.vis.attributes,
    mei_att.mRpt.ges.attributes,
    mei_att.mRpt.anl.attributes,
    empty
  }
mRpt2 =
  
  ## (2-measure repeat) – An indication that the previous two measures should be repeated.
  element mei:mRpt2 {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mRpt2.log.attributes,
    mei_att.mRpt2.vis.attributes,
    mei_att.mRpt2.ges.attributes,
    mei_att.mRpt2.anl.attributes,
    empty
  }
mSpace =
  
  ## (measure space) – A measure containing only empty space in any meter. 
  element mei:mSpace {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mSpace.log.attributes,
    mei_att.mSpace.vis.attributes,
    mei_att.mSpace.ges.attributes,
    mei_att.mSpace.anl.attributes,
    empty
  }
multiRest =
  
  ## (multiple rest) – Multiple measures of rest compressed into a single symbol, frequently found in performer parts. 
  element mei:multiRest {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.multiRest.log.attributes,
    mei_att.multiRest.vis.attributes,
    mei_att.multiRest.ges.attributes,
    mei_att.multiRest.anl.attributes,
    empty
  }
multiRpt =
  
  ## (multiple repeat) – Multiple repeated measures. 
  element mei:multiRpt {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.multiRpt.log.attributes,
    mei_att.multiRpt.vis.attributes,
    mei_att.multiRpt.ges.attributes,
    mei_att.multiRpt.anl.attributes,
    empty
  }
octave =
  
  ## – An indication that a passage should be performed one or more octaves above or below its written pitch. 
  element mei:octave {
    empty
    >> sch:pattern [
         id =
           "octave-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:octave"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.octave.log.attributes,
    mei_att.octave.vis.attributes,
    mei_att.octave.ges.attributes,
    mei_att.octave.anl.attributes,
    empty
  }
ossia =
  
  ## – An alternate notational version *present in the source being transcribed*. 
  element mei:ossia {
    ((mei_model.staffLike, mei_model.staffLike+)
     | (mei_model.layerLike, mei_model.layerLike+))
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:measure/mei:ossia"
           "\x{a}" ~
           "              "
           sch:assert [
             test = "count(mei:*) = count(mei:staff)"
             "Ossia may contain only staff\x{a}" ~
             "                elements in this context."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staff/mei:ossia"
           "\x{a}" ~
           "              "
           sch:assert [
             test = "count(mei:*) = count(mei:layer)"
             "Ossia may contain only layer\x{a}" ~
             "                elements in this context."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "          "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.ossia.log.attributes,
    mei_att.ossia.vis.attributes,
    mei_att.ossia.ges.attributes,
    mei_att.ossia.anl.attributes,
    empty
  }
pedal =
  
  ## – Piano pedal mark. 
  element mei:pedal {
    empty
    >> sch:pattern [
         id =
           "pedal-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:pedal"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.pedal.log.attributes,
    mei_att.pedal.vis.attributes,
    mei_att.pedal.ges.attributes,
    mei_att.pedal.anl.attributes,
    empty
  }
reh =
  
  ## (rehearsal mark) – In an orchestral score and its corresponding parts, a mark indicating a convenient point from which to resume rehearsal after a break. 
  element mei:reh {
    (text | mei_model.lbLike | mei_model.rendLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.reh.log.attributes,
    mei_att.reh.vis.attributes,
    mei_att.reh.ges.attributes,
    mei_att.reh.anl.attributes,
    empty
  }
slur =
  
  ## – Indication of 1) a "unified melodic idea" or 2) performance technique. 
  element mei:slur {
    empty
    >> sch:pattern [
         id =
           "slur-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:slur"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.slur.log.attributes,
    mei_att.slur.vis.attributes,
    mei_att.slur.ges.attributes,
    mei_att.slur.anl.attributes,
    empty
  }
tie =
  
  ## – An indication that two notes of the same pitch form a single note with their combined rhythmic values. 
  element mei:tie {
    empty
    >> sch:pattern [
         id =
           "tie-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tie"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.tie.log.attributes,
    mei_att.tie.vis.attributes,
    mei_att.tie.ges.attributes,
    mei_att.tie.anl.attributes,
    empty
  }
tuplet =
  
  ## – A group of notes with "irregular" (sometimes called "irrational") rhythmic values, for example, three notes in the time normally occupied by two or nine in the time of five. 
  element mei:tuplet {
    (mei_model.eventLike
     | mei_model.appLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.tuplet.log.attributes,
    mei_att.tuplet.vis.attributes,
    mei_att.tuplet.ges.attributes,
    mei_att.tuplet.anl.attributes,
    empty
  }
tupletSpan =
  
  ## (tuplet span) – Alternative element for encoding tuplets, especially useful for tuplets that extend across bar lines. 
  element mei:tupletSpan {
    empty
    >> sch:pattern [
         id =
           "tupletSpan-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tupletSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.tupletSpan.log.attributes,
    mei_att.tupletSpan.vis.attributes,
    mei_att.tupletSpan.ges.attributes,
    mei_att.tupletSpan.anl.attributes,
    empty
  }
mei_att.ligature.anl.attributes = mei_att.common.anl.attributes
mei_att.ligature.ges.attributes = empty
mei_att.ligature.log.attributes = mei_att.ligature.log.attribute.form
mei_att.ligature.log.attribute.form =
  
  ## provides an indication of the function of the ligature.
  attribute form { data.LIGATUREFORM }?
mei_att.ligature.vis.attributes = empty
mei_att.mensur.anl.attributes = mei_att.common.anl.attributes
mei_att.mensur.ges.attributes = empty
mei_att.mensur.vis.attributes =
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.mensur.vis.attribute.form,
  mei_att.mensur.vis.attribute.orient
mei_att.mensur.vis.attribute.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
mei_att.mensur.vis.attribute.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute orient { data.ORIENTATION }?
mei_att.mensurDefault.log.attributes =
  mei_att.duration.ratio.attributes,
  mei_att.mensurDefault.log.attribute.mensur.dot,
  mei_att.mensurDefault.log.attribute.mensur.loc,
  mei_att.mensurDefault.log.attribute.mensur.sign,
  mei_att.mensurDefault.log.attribute.mensur.slash
mei_att.mensurDefault.log.attribute.mensur.dot =
  
  ## determines if a dot is to be added to the base symbol.
  attribute mensur.dot { data.BOOLEAN }?
mei_att.mensurDefault.log.attribute.mensur.loc =
  
  ## holds the staff location of the mensuration sign.
  attribute mensur.loc { xsd:positiveInteger }?
mei_att.mensurDefault.log.attribute.mensur.sign =
  
  ## the base symbol in the mensuration sign/time signature of mensural notation.
  attribute mensur.sign { data.MENSURATIONSIGN }?
mei_att.mensurDefault.log.attribute.mensur.slash =
  
  ## indicates the number lines added to the mensuration sign. For example, one slash is added for what we now call 'alla breve'.
  attribute mensur.slash { xsd:positiveInteger }?
mei_att.mensurDefault.vis.attributes =
  mei_att.mensurDefault.vis.attribute.mensur.color,
  mei_att.mensurDefault.vis.attribute.mensur.form,
  mei_att.mensurDefault.vis.attribute.mensur.orient,
  mei_att.mensurDefault.vis.attribute.mensur.size
mei_att.mensurDefault.vis.attribute.mensur.color =
  
  ## records the color of the mensuration sign. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute mensur.color { data.COLOR }?
mei_att.mensurDefault.vis.attribute.mensur.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute mensur.form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
mei_att.mensurDefault.vis.attribute.mensur.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute mensur.orient { data.ORIENTATION }?
mei_att.mensurDefault.vis.attribute.mensur.size =
  
  ## describes the relative size of the mensuration sign.
  attribute mensur.size { data.SIZE }?
mei_att.note.ges.mensural.attributes = mei_att.duration.ratio.attributes
mei_att.note.log.mensural.attributes =
  mei_att.note.log.mensural.attribute.lig
mei_att.note.log.mensural.attribute.lig =
  
  ## indicates this element's participation in a ligature.
  attribute lig {
    
    ##
    "recta"
    | 
      ##
      "obliqua"
  }?
mei_att.proport.anl.attributes = mei_att.common.anl.attributes
mei_att.proport.ges.attributes = empty
mei_att.proport.log.attributes = mei_att.duration.ratio.attributes
mei_att.proport.vis.attributes = empty
mei_att.rest.ges.mensural.attributes = mei_att.duration.ratio.attributes
mei_att.rest.vis.mensural.attributes =
  mei_att.lineloc.attributes, mei_att.rest.vis.mensural.attribute.spaces
mei_att.rest.vis.mensural.attribute.spaces =
  
  ## states how many spaces are covered by the rest.
  attribute spaces { xsd:positiveInteger }?
mei_att.scoreDef.log.mensural.attributes =
  mei_att.mensurDefault.log.attributes
mei_att.scoreDef.vis.mensural.attributes =
  mei_att.mensurDefault.vis.attributes
mei_att.staffDef.log.mensural.attributes =
  mei_att.mensurDefault.log.attributes,
  mei_att.staffDef.log.mensural.attribute.proport.num,
  mei_att.staffDef.log.mensural.attribute.proport.numbase
mei_att.staffDef.log.mensural.attribute.proport.num =
  
  ## Together, proport.num and proport.numbase specify a proportional change as a ratio, e.g., 1:3. Proport.num is for the first value in the ratio.
  attribute proport.num { xsd:positiveInteger }?
mei_att.staffDef.log.mensural.attribute.proport.numbase =
  
  ## Together, proport.num and proport.numbase specify a proportional change as a ratio, e.g., 1:3. Proport.numbase is for the second value in the ratio.
  attribute proport.numbase { xsd:positiveInteger }?
mei_att.staffDef.vis.mensural.attributes =
  mei_att.mensurDefault.vis.attributes
mei_model.eventLike.mensural = mensur | proport | ligature
mei_model.eventLike.mensural_alternation = mensur | proport | ligature
mei_model.eventLike.mensural_sequence = mensur, proport, ligature
mei_model.eventLike.mensural_sequenceOptional =
  mensur?, proport?, ligature?
mei_model.eventLike.mensural_sequenceOptionalRepeatable =
  mensur*, proport*, ligature*
mei_model.eventLike.mensural_sequenceRepeatable =
  mensur+, proport+, ligature+
mei_model.layerPart.mensural =
  mei_model.controleventLike
  | mei_model.noteModifierLike
  | mei_model.lyricsLike
mei_model.layerPart.mensural_alternation =
  mei_model.controleventLike_alternation
  | mei_model.noteModifierLike_alternation
  | mei_model.lyricsLike_alternation
mei_model.layerPart.mensural_sequence =
  mei_model.controleventLike_sequence,
  mei_model.noteModifierLike_sequence,
  mei_model.lyricsLike_sequence
mei_model.layerPart.mensural_sequenceOptional =
  mei_model.controleventLike_sequenceOptional?,
  mei_model.noteModifierLike_sequenceOptional?,
  mei_model.lyricsLike_sequenceOptional?
mei_model.layerPart.mensural_sequenceOptionalRepeatable =
  mei_model.controleventLike_sequenceOptionalRepeatable*,
  mei_model.noteModifierLike_sequenceOptionalRepeatable*,
  mei_model.lyricsLike_sequenceOptionalRepeatable*
mei_model.layerPart.mensural_sequenceRepeatable =
  mei_model.controleventLike_sequenceRepeatable+,
  mei_model.noteModifierLike_sequenceRepeatable+,
  mei_model.lyricsLike_sequenceRepeatable+
mei_model.staffDefPart.mensural = mensur | proport
mensur =
  
  ## (mensuration) – Collects information about the metrical relationship between a note value and the next smaller value; that is, either triple or duple. 
  element mei:mensur {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mensur.log.attributes,
    mei_att.mensur.vis.attributes,
    mei_att.mensur.ges.attributes,
    mei_att.mensur.anl.attributes,
    empty
  }
proport =
  
  ## (proportion) – Description of note duration as arithmetic ratio. 
  element mei:proport {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.proport.log.attributes,
    mei_att.proport.vis.attributes,
    mei_att.proport.ges.attributes,
    mei_att.proport.anl.attributes,
    empty
  }
ligature =
  
  ## – A mensural notation symbol that combines two or more notes into a single sign. 
  element mei:ligature {
    mei_model.layerPart*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.ligature.log.attributes,
    mei_att.ligature.vis.attributes,
    mei_att.ligature.ges.attributes,
    mei_att.ligature.anl.attributes,
    empty
  }
mei_att.ineume.anl.attributes = mei_att.common.anl.attributes
mei_att.ineume.ges.attributes = empty
mei_att.ineume.log.attributes =
  mei_att.ineume.log.attribute.form, mei_att.ineume.log.attribute.name
mei_att.ineume.log.attribute.form =
  
  ## provides a subclass or functional label for the neume.
  attribute form { data.INEUMEFORM }?
mei_att.ineume.log.attribute.name =
  
  ## records the name of the neume.
  attribute name { data.INEUMENAME }?
mei_att.ineume.vis.attributes = mei_att.color.attributes
mei_att.uneume.anl.attributes =
  mei_att.common.anl.attributes,
  mei_att.harmonicfunction.attributes,
  mei_att.melodicfunction.attributes,
  mei_att.intervallicdesc.attributes,
  mei_att.solfa.attributes
mei_att.uneume.ges.attributes = empty
mei_att.uneume.log.attributes =
  mei_att.event.attributes,
  mei_att.syltext.attributes,
  mei_att.uneume.log.attribute.form,
  mei_att.uneume.log.attribute.name
mei_att.uneume.log.attribute.form =
  
  ## provides a subclass or functional label for the neume.
  attribute form { data.UNEUMEFORM }?
mei_att.uneume.log.attribute.name =
  
  ## records the name of the neume.
  attribute name { data.UNEUMENAME }?
mei_att.uneume.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.xy.attributes,
  mei_att.visibility.attributes
mei_model.eventLike.neumes = ineume | uneume
mei_model.eventLike.neumes_alternation = ineume | uneume
mei_model.eventLike.neumes_sequence = ineume, uneume
mei_model.eventLike.neumes_sequenceOptional = ineume?, uneume?
mei_model.eventLike.neumes_sequenceOptionalRepeatable = ineume*, uneume*
mei_model.eventLike.neumes_sequenceRepeatable = ineume+, uneume+
mei_model.layerPart.neumes =
  mei_model.eventLike.neumes | mei_model.syllableLike
mei_model.layerPart.neumes_alternation =
  mei_model.eventLike.neumes_alternation
  | mei_model.syllableLike_alternation
mei_model.layerPart.neumes_sequence =
  mei_model.eventLike.neumes_sequence, mei_model.syllableLike_sequence
mei_model.layerPart.neumes_sequenceOptional =
  mei_model.eventLike.neumes_sequenceOptional?,
  mei_model.syllableLike_sequenceOptional?
mei_model.layerPart.neumes_sequenceOptionalRepeatable =
  mei_model.eventLike.neumes_sequenceOptionalRepeatable*,
  mei_model.syllableLike_sequenceOptionalRepeatable*
mei_model.layerPart.neumes_sequenceRepeatable =
  mei_model.eventLike.neumes_sequenceRepeatable+,
  mei_model.syllableLike_sequenceRepeatable+
mei_model.syllableLike = syllable
mei_model.syllableLike_alternation = syllable
mei_model.syllableLike_sequence = syllable
mei_model.syllableLike_sequenceOptional = syllable?
mei_model.syllableLike_sequenceOptionalRepeatable = syllable*
mei_model.syllableLike_sequenceRepeatable = syllable+
mei_model.syllablePart =
  mei_model.controleventLike
  | mei_model.eventLike
  | mei_model.noteModifierLike
  | mei_model.eventLike.neumes
  | mei_model.lyricsLike
  | mei_model.sylLike
  | mei_model.verseLike
  | mei_model.midiLike
ineume =
  
  ## (interrupted neume) – a graphically interrupted neume; that is, a neume which is logically a single entity but is written using multiple signs. 
  element mei:ineume {
    (mei_model.eventLike
     | mei_model.eventLike.neumes
     | macro.neumeModifierLike
     | mei_model.appLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.verseLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.ineume.log.attributes,
    mei_att.ineume.vis.attributes,
    mei_att.ineume.ges.attributes,
    mei_att.ineume.anl.attributes,
    empty
  }
syllable =
  
  ## – Neume notation can be thought of as "neumed text". Therefore, the syllable element provides high-level organization in this repertoire.
  element mei:syllable {
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.scoreDefLike
     | mei_model.staffDefLike
     | mei_model.staffGrpLike
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.syllablePart)*,
    mei_att.common.attributes,
    empty
  }
uneume =
  
  ## (uninterrupted neume) – A graphically-uninterrupted neume sign. 
  element mei:uneume {
    (mei_model.eventLike
     | macro.neumeModifierLike
     | mei_model.appLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.verseLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.uneume.log.attributes,
    mei_att.uneume.vis.attributes,
    mei_att.uneume.ges.attributes,
    mei_att.uneume.anl.attributes,
    empty
  }
mei_att.common.anl.attributes =
  mei_att.alignment.attributes,
  mei_att.common.anl.attribute.copyof,
  mei_att.common.anl.attribute.corresp,
  mei_att.common.anl.attribute.next,
  mei_att.common.anl.attribute.prev,
  mei_att.common.anl.attribute.sameas,
  mei_att.common.anl.attribute.synch
mei_att.common.anl.attribute.copyof =
  
  ## points to an element of which the current element is a copy.
  attribute copyof { data.URI }?
mei_att.common.anl.attribute.corresp =
  
  ## used to point to other elements that correspond to this one in a generic fashion.
  attribute corresp {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.next =
  
  ## used to point to the next event(s) in a user-defined collection.
  attribute next {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.prev =
  
  ## points to the previous event(s) in a user-defined collection.
  attribute prev {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.sameas =
  
  ## points to an element that is the same as the current element but is not a literal copy of the current element.
  attribute sameas {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.synch =
  
  ## points to elements that are synchronous with the current element.
  attribute synch {
    list { data.URI+ }
  }?
mei_att.harmonicfunction.attributes =
  mei_att.harmonicfunction.attribute.hfunc
mei_att.harmonicfunction.attribute.hfunc =
  
  ## describes harmonic function in any convenient typology.
  attribute hfunc { xsd:NMTOKEN }?
mei_att.intervalharmonic.attributes =
  mei_att.intervalharmonic.attribute.inth
mei_att.intervalharmonic.attribute.inth =
  
  ## encodes the harmonic interval between this note and other pitches occurring at the same time.
  attribute inth { xsd:NMTOKENS }?
mei_att.intervallicdesc.attributes =
  mei_att.intervalharmonic.attributes,
  mei_att.intervallicdesc.attribute.intm
mei_att.intervallicdesc.attribute.intm =
  
  ## encodes the melodic interval from the previous pitch. The value may be a general directional indication (u, d, s) or a precise numeric value in half steps.
  attribute intm { data.INTERVAL.AMOUNT }?
mei_att.melodicfunction.attributes =
  mei_att.melodicfunction.attribute.mfunc
mei_att.melodicfunction.attribute.mfunc =
  
  ## describes melodic function in any convenient typology.
  attribute mfunc { xsd:NMTOKEN }?
mei_att.pitchclass.attributes = mei_att.pitchclass.attribute.pclass
mei_att.pitchclass.attribute.pclass =
  
  ## holds pitch class information.
  attribute pclass { data.PITCHCLASS }?
mei_att.solfa.attributes = mei_att.solfa.attribute.psolfa
mei_att.solfa.attribute.psolfa =
  
  ## contains sol-fa designation, e.g., do, re, mi, etc., in either a fixed or movable Do system.
  attribute psolfa { text }?
mei_att.ornam.attributes = mei_att.ornam.attribute.ornam
mei_att.ornam.attribute.ornam =
  
  ## indicates that this element has an attached ornament. If visual information about the ornament is needed, then one of the elements that represents an ornament (mordent, trill, or turn) should be employed.
  attribute ornam { data.ORNAMS.cmn }?
mei_att.ornamentaccid.attributes =
  mei_att.ornamentaccid.attribute.accidupper,
  mei_att.ornamentaccid.attribute.accidlower
mei_att.ornamentaccid.attribute.accidupper =
  
  ## records the written accidental associated with an upper neighboring note.
  attribute accidupper { data.ACCIDENTAL.EXPLICIT }?
mei_att.ornamentaccid.attribute.accidlower =
  
  ## records the written accidental associated with a lower neighboring note.
  attribute accidlower { data.ACCIDENTAL.EXPLICIT }?
mei_att.mordent.anl.attributes = mei_att.common.anl.attributes
mei_att.mordent.ges.attributes = empty
mei_att.mordent.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.ornamentaccid.attributes,
  mei_att.mordent.log.attribute.form,
  mei_att.mordent.log.attribute.long
mei_att.mordent.log.attribute.form =
  
  ## Traditionally, the 'normal' mordent is written as a short wavy line with a vertical line through it and the inverted mordent is written without the vertical line. However, the meaning of these signs is sometimes reversed. See Read, p. 245-246. Another attribute in the visual domain would be necessary in order to be completely explicit about which visual symbol is actually to be rendered.
  attribute form {
    
    ## inverted mordent, e.g., performed as the principal note, followed by its upper neighbor, with a return to the principal note.
    "inv"
    | 
      ## "normal" mordent, e.g., performed as the written note, followed by its lower neighbor, with a return to the written note.
      "norm"
  }?
mei_att.mordent.log.attribute.long =
  
  ## When the long attribute is set to 'yes', a double or long mordent, consisting of 5 notes, is indicated.
  attribute long { data.BOOLEAN }?
mei_att.mordent.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes
mei_att.trill.anl.attributes = mei_att.common.anl.attributes
mei_att.trill.ges.attributes = mei_att.duration.performed.attributes
mei_att.trill.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.ornamentaccid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.trill.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.turn.anl.attributes = mei_att.common.anl.attributes
mei_att.turn.ges.attributes = empty
mei_att.turn.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.ornamentaccid.attributes,
  mei_att.startid.attributes,
  mei_att.turn.log.attribute.delayed,
  mei_att.turn.log.attribute.form
mei_att.turn.log.attribute.delayed =
  
  ## When the delayed attribute is set to 'true', the turn begins on the second half of the beat. See Read, p. 246.
  attribute delayed { data.BOOLEAN }?
mei_att.turn.log.attribute.form =
  
  ## indicates the style of the turn.
  attribute form {
    
    ## inverted turn, e.g., begins on the note below the written note.
    "inv"
    | 
      ## "normal" turn, e.g., begins on the note above the written note.
      "norm"
  }?
mei_att.turn.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes
mei_model.ornamentLike.cmn = mordent | trill | turn
mei_model.ornamentLike.cmn_alternation = mordent | trill | turn
mei_model.ornamentLike.cmn_sequence = mordent, trill, turn
mei_model.ornamentLike.cmn_sequenceOptional = mordent?, trill?, turn?
mei_model.ornamentLike.cmn_sequenceOptionalRepeatable =
  mordent*, trill*, turn*
mei_model.ornamentLike.cmn_sequenceRepeatable = mordent+, trill+, turn+
mordent =
  
  ## – An ornament indicating rapid alternation of the main note with a secondary note, usually a step below, but sometimes a step above. 
  element mei:mordent {
    empty
    >> sch:pattern [
         id =
           "mordent-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:mordent"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mordent.log.attributes,
    mei_att.mordent.vis.attributes,
    mei_att.mordent.ges.attributes,
    mei_att.mordent.anl.attributes,
    empty
  }
trill =
  
  ## – Rapid alternation of a note with one (usually at the interval of a second) above. 
  element mei:trill {
    empty
    >> sch:pattern [
         id =
           "trill-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:trill"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.trill.log.attributes,
    mei_att.trill.vis.attributes,
    mei_att.trill.ges.attributes,
    mei_att.trill.anl.attributes,
    empty
  }
turn =
  
  ## – An ornament consisting of four notes — the upper neighbor of the written note, the written note, the lower neighbor, and the written note. 
  element mei:turn {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.turn.log.attributes,
    mei_att.turn.vis.attributes,
    mei_att.turn.ges.attributes,
    mei_att.turn.anl.attributes,
    empty
  }
meiCorpus =
  
  ## (MEI corpus) – A group of related MEI documents, consisting of a header for the group, and one or more <mei> elements, each with its own complete header. 
  element mei:meiCorpus {
    meiHead,
    mei*,
    mei_att.common.attributes,
    mei_att.meiversion.attributes,
    empty
  }
mei_att.crit.attributes =
  mei_att.handident.attributes,
  mei_att.responsibility.attributes,
  mei_att.sequence.attributes,
  mei_att.source.attributes,
  mei_att.crit.attribute.cause
mei_att.crit.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  attribute cause { xsd:NMTOKEN }?
mei_att.source.attributes = mei_att.source.attribute.source
mei_att.source.attribute.source =
  
  ## contains a list of one or more pointers indicating the sources which attest to a given reading. Each value should correspond to the ID of a <source> element located in the document header.
  attribute source {
    list { data.URI+ }
  }?
mei_att.rdg.anl.attributes = mei_att.common.anl.attributes
mei_att.rdg.ges.attributes = empty
mei_att.rdg.log.attributes = empty
mei_att.rdg.vis.attributes = empty
mei_model.appLike = mei_app
mei_model.rdgPart.critapp =
  mei_model.controleventLike
  | mei_model.eventLike
  | mei_model.layerLike
  | mei_model.noteModifierLike
  | mei_model.sectionPart
  | mei_model.eventLike.measureFilling
  | mei_model.eventLike.neumes
  | mei_model.syllableLike
  | mei_model.lyricsLike
  | mei_model.sylLike
  | mei_model.verseLike
  | mei_model.midiLike
mei_app =
  
  ## (apparatus) – Contains one or more alternative encodings. 
  element mei:app {
    mei_lem?,
    mei_rdg,
    mei_rdg*,
    mei_att.common.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_lem =
  
  ## (lemma) – Contains the lemma, or base text, of a textual variation. 
  element mei:lem {
    expansion*,
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.scoreDefLike
     | mei_model.staffDefLike
     | mei_model.staffGrpLike
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.rdgPart.critapp)*,
    mei_att.common.attributes,
    mei_att.crit.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.rdg.anl.attributes,
    mei_att.rdg.ges.attributes,
    mei_att.rdg.log.attributes,
    mei_att.rdg.vis.attributes,
    empty
  }
mei_rdg =
  
  ## (reading) – Contains a single reading within a textual variation. 
  element mei:rdg {
    expansion*,
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.scoreDefLike
     | mei_model.staffDefLike
     | mei_model.staffGrpLike
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.rdgPart.critapp)*,
    mei_att.common.attributes,
    mei_att.crit.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.rdg.anl.attributes,
    mei_att.rdg.ges.attributes,
    mei_att.rdg.log.attributes,
    mei_att.rdg.vis.attributes,
    empty
  }
mei_att.edit.attributes =
  mei_att.responsibility.attributes,
  mei_att.source.attributes,
  mei_att.edit.attribute.cert,
  mei_att.edit.attribute.evidence
mei_att.edit.attribute.cert =
  
  ## signifies the degree of certainty or precision associated with a feature.
  attribute cert { data.CERTAINTY }?
mei_att.edit.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. Suggested values include: 'internal', 'external', 'conjecture'.
  attribute evidence { xsd:NMTOKEN }?
mei_att.agentident.attributes = mei_att.agentident.attribute.agent
mei_att.agentident.attribute.agent =
  
  ## signifies the causative agent of damage, illegibility, or other loss of original text.
  attribute agent { text }?
mei_att.extent.attributes = mei_att.extent.attribute.extent
mei_att.extent.attribute.extent =
  
  ## indicates the extent of damage or omission.
  attribute extent { text }?
mei_att.reasonident.attributes = mei_att.reasonident.attribute.reason
mei_att.reasonident.attribute.reason =
  
  ## holds a short phrase describing the reason for missing textual material (gap), why material is supplied (supplied), or why transcription is difficult (unclear).
  attribute reason { text }?
mei_att.trans.attributes =
  mei_att.handident.attributes, mei_att.sequence.attributes
mei_model.choicePart =
  mei_model.editorialLike
  | mei_model.editLike
  | mei_corr
  | mei_orig
  | mei_reg
  | mei_sic
  | mei_unclear
mei_model.editLike = mei_choice | mei_subst
mei_model.transcriptionLike =
  mei_add
  | mei_corr
  | mei_damage
  | mei_del
  | mei_gap
  | mei_handShift
  | mei_orig
  | mei_reg
  | mei_restore
  | mei_sic
  | mei_supplied
  | mei_unclear
mei_abbr =
  
  ## (abbreviation) – A generic element for 1) a shortened form of a word, including an acronym or 2) a shorthand notation.
  element mei:abbr {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.trans.attributes,
    mei_att.typed.attributes,
    
    ## records the expansion of a text abbreviation.
    attribute expan { text }?,
    empty
  }
mei_expan =
  
  ## (expansion) – Contains the expansion of an abbreviation.
  element mei:expan {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.trans.attributes,
    mei_att.typed.attributes,
    
    ## captures the unabbreviated form of the text.
    attribute abbr { text }?,
    empty
  }
mei_add =
  
  ## (addition) – Marks an addition to the text. 
  element mei:add {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.edit.attributes,
    mei_att.trans.attributes,
    empty
  }
mei_choice =
  
  ## – Groups a number of alternative encodings for the same point in a text. 
  element mei:choice {
    mei_model.choicePart*, mei_att.common.attributes, empty
  }
mei_corr =
  
  ## (correction) – Contains the correct form of an apparent erroneous passage. 
  element mei:corr {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.trans.attributes,
    empty
  }
mei_damage =
  
  ## – Contains an area of damage to the physical medium.
  element mei:damage {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.agentident.attributes,
    mei_att.common.attributes,
    mei_att.extent.attributes,
    mei_att.facsimile.attributes,
    mei_att.handident.attributes,
    mei_att.typed.attributes,
    
    ## records the degree of damage.
    attribute degree { text }?,
    empty
  }
mei_del =
  
  ## (deletion) – Contains information deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, annotator, or corrector. 
  element mei:del {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.trans.attributes,
    
    ## contains an indication of how the deletion should be rendered.
    attribute rend { text }?,
    empty
  }
mei_gap =
  
  ## – Indicates a point where material has been omitted in a transcription, whether as part of sampling practice or for editorial reasons described in the MEI header. 
  element mei:gap {
    empty,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.extent.attributes,
    mei_att.handident.attributes,
    mei_att.reasonident.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_handShift =
  
  ## – Marks the beginning of a passage written in a new hand, or of a change in the scribe, writing style, ink or character of the document hand. 
  element mei:handShift {
    empty,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.medium.attributes,
    
    ## describes the character of the new hand.
    attribute character { text }?,
    
    ## identifies the new hand. The value must contain the ID of a hand element given elsewhere in the document.
    attribute new { data.URI }?,
    
    ## identifies the old hand. The value must contain the ID of a hand element given elsewhere in the document.
    attribute old { data.URI }?,
    empty
  }
mei_orig =
  
  ## (original) – Contains material which is marked as following the original, rather than being normalized or corrected. 
  element mei:orig {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_reg =
  
  ## (regularization) – Contains material which has been regularized or normalized in some sense. 
  element mei:reg {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.authorized.attributes,
    mei_att.edit.attributes,
    empty
  }
mei_restore =
  
  ## – Indicates restoration of material to an earlier state by cancellation of an editorial or authorial marking or instruction. 
  element mei:restore {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.trans.attributes,
    mei_att.typed.attributes,
    
    ## provides a description of the means of restoration.
    attribute desc { text }?,
    empty
  }
mei_sic =
  
  ## – Contains apparently incorrect or inaccurate material. 
  element mei:sic {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    empty
  }
mei_subst =
  
  ## (substitution) – Groups transcriptional elements when the combination is to be regarded as a single intervention in the text. 
  element mei:subst {
    mei_model.transcriptionLike,
    mei_model.transcriptionLike+,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.trans.attributes,
    empty
  }
mei_supplied =
  
  ## – Contains material supplied by the transcriber or editor in place of text which cannot be read, either because of physical damage or loss in the original or because it is illegible for any reason. 
  element mei:supplied {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.agentident.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.reasonident.attributes,
    empty
  }
mei_unclear =
  
  ## – Contains material that cannot be transcribed with certainty because it is illegible or inaudible in the source. 
  element mei:unclear {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.eventLike.neumes
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.midiLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.eventLike.measureFilling
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.measureLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike
     | mei_model.fLike)*,
    mei_att.agentident.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.handident.attributes,
    mei_att.reasonident.attributes,
    empty
  }
mei_att.facsimile.attributes = mei_att.facsimile.attribute.facs
mei_att.facsimile.attribute.facs =
  
  ## permits the current element to reference a facsimile image or image zone which corresponds to it.
  attribute facs {
    list { data.URI+ }
  }?
mei_facsimile =
  
  ## – Contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. 
  element mei:facsimile {
    mei_surface*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
mei_surface =
  
  ## – Defines a writing surface in terms of a rectangular coordinate space, optionally grouping one or more graphic representations of that space, and rectangular zones of interest within it. 
  element mei:surface {
    mei_model.figDescLike*,
    mei_model.graphicLike*,
    mei_zone*,
    mei_att.common.attributes,
    mei_att.coordinated.attributes,
    mei_att.datapointing.attributes,
    mei_att.declaring.attributes,
    mei_att.startid.attributes,
    empty
  }
mei_zone =
  
  ## – Defines an area of interest within a surface or graphic file. 
  element mei:zone {
    mei_model.figDescLike*,
    mei_model.graphicLike*,
    mei_att.common.attributes,
    mei_att.coordinated.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_att.tabular.attributes =
  mei_att.tabular.attribute.colspan, mei_att.tabular.attribute.rowspan
mei_att.tabular.attribute.colspan =
  
  ## the number of columns spanned by this cell.
  attribute colspan { xsd:positiveInteger }?
mei_att.tabular.attribute.rowspan =
  
  ## the number of rows spanned by this cell.
  attribute rowspan { xsd:positiveInteger }?
mei_model.figureLike = mei_fig
mei_model.figureLike_alternation = mei_fig
mei_model.figureLike_sequence = mei_fig
mei_model.figureLike_sequenceOptional = mei_fig?
mei_model.figureLike_sequenceOptionalRepeatable = mei_fig*
mei_model.figureLike_sequenceRepeatable = mei_fig+
mei_model.graphicLike = mei_graphic
mei_model.figDescLike = mei_figDesc
mei_model.tableLike = mei_table
mei_model.tableLike_alternation = mei_table
mei_model.tableLike_sequence = mei_table
mei_model.tableLike_sequenceOptional = mei_table?
mei_model.tableLike_sequenceOptionalRepeatable = mei_table*
mei_model.tableLike_sequenceRepeatable = mei_table+
mei_graphic =
  
  ## – Indicates the location of an inline graphic, illustration, or figure. 
  element mei:graphic {
    (mei_zone*)
    >> sch:pattern [
         id = "graphic-constraint-graphic_child_of_zone"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:zone/mei:graphic"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:*) = 0"
             "graphic child of zone cannot have\x{a}" ~
             "              children"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.internetmedia.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.measurement.attributes,
    mei_att.typed.attributes,
    mei_att.width.attributes,
    
    ## measurement of the vertical dimension of an image.
    attribute height { xsd:positiveInteger }?,
    empty
  }
mei_fig =
  
  ## (figure) – groups elements representing or containing graphic information such as an illustration or figure. 
  element mei:fig {
    (mei_model.captionLike | mei_figDesc | mei_model.graphicLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_figDesc =
  
  ## (figure description) – Contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. 
  element mei:figDesc {
    (text
     | mei_model.graphicprimitiveLike
     | mei_model.textcomponentLike
     | mei_model.annotLike)*,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_table =
  
  ## – Contains text displayed in tabular form. 
  element mei:table {
    mei_model.captionLike?,
    tr+,
    mei_model.captionLike?,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
td =
  
  ## (table data) – Designates a table cell that contains data as opposed to a cell that contains column or row heading information. 
  element mei:td {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    mei_att.tabular.attributes,
    empty
  }
th =
  
  ## (table header) – Designates a table cell containing column or row heading information as opposed to one containing data. 
  element mei:th {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    mei_att.tabular.attributes,
    empty
  }
tr =
  
  ## (table row) – A formatting element that contains one or more cells (intersection of a row and a column) in a <table>. 
  element mei:tr {
    (th | td)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_att.fretlocation.attributes = mei_att.fretlocation.attribute.fret
mei_att.fretlocation.attribute.fret =
  
  ## records the location at which a string should be stopped against a fret.
  attribute fret { data.FRET }?
mei_att.harm.anl.attributes = mei_att.common.anl.attributes
mei_att.harm.ges.attributes = mei_att.duration.performed.attributes
mei_att.harm.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes,
  mei_att.harm.log.attribute.chordref
mei_att.harm.log.attribute.chordref =
  
  ## contains a reference to a <chordDef> element elsewhere in the document.
  attribute chordref { data.URI }?
mei_att.harm.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes,
  mei_att.harm.vis.attribute.extender,
  mei_att.harm.vis.attribute.rendgrid
mei_att.harm.vis.attribute.extender =
  
  ## indicates the presence of an extension symbol, typically a dash or underscore, drawn from the end of the harmonic indication to the point indicated by the dur attribute.
  attribute extender { data.BOOLEAN }?
mei_att.harm.vis.attribute.rendgrid =
  
  ## describes how the harmonic indication should be rendered.
  attribute rendgrid {
    
    ## chord tablature grid.
    "grid"
    | 
      ## chord tablature grid and the element's textual content.
      "gridtext"
    | 
      ## textual content of the element.
      "text"
  }?
mei_model.figbassLike = fb
mei_model.fLike = mei_f
mei_model.chordTableLike = chordTable
mei_model.harmLike = harm
mei_model.harmLike_alternation = harm
mei_model.harmLike_sequence = harm
mei_model.harmLike_sequenceOptional = harm?
mei_model.harmLike_sequenceOptionalRepeatable = harm*
mei_model.harmLike_sequenceRepeatable = harm+
mei_model.controleventLike.harmony = mei_model.harmLike
mei_model.controleventLike.harmony_alternation =
  mei_model.harmLike_alternation
mei_model.controleventLike.harmony_sequence =
  mei_model.harmLike_sequence
mei_model.controleventLike.harmony_sequenceOptional =
  mei_model.harmLike_sequenceOptional?
mei_model.controleventLike.harmony_sequenceOptionalRepeatable =
  mei_model.harmLike_sequenceOptionalRepeatable*
mei_model.controleventLike.harmony_sequenceRepeatable =
  mei_model.harmLike_sequenceRepeatable+
barre =
  
  ## – An indication of fingering in a chord tablature grid. 
  element mei:barre {
    empty,
    mei_att.common.attributes,
    mei_att.fretlocation.attributes,
    mei_att.startendid.attributes,
    empty
  }
chordDef =
  
  ## (chord definition) – Chord tablature definition. 
  element mei:chordDef {
    chordMember*,
    barre*,
    mei_att.common.attributes,
    
    ## records the fret position at which the chord tablature is to be played.
    attribute pos { xsd:positiveInteger }?,
    empty
  }
chordMember =
  
  ## – An individual pitch in a chord defined by a <chordDef> element. 
  element mei:chordMember {
    empty,
    mei_att.common.attributes,
    mei_att.accidental.performed.attributes,
    mei_att.fretlocation.attributes,
    mei_att.intervalharmonic.attributes,
    mei_att.pitched.attributes,
    
    ## indicates which finger, if any, should be used to play an individual string. The values 'x' and 'o' indicated muffled and open strings, respectively.
    attribute fing { data.FINGER.FRET }?,
    empty
  }
chordTable =
  
  ## – Chord/tablature look-up table. 
  element mei:chordTable { chordDef+, mei_att.common.attributes, empty }
mei_f =
  
  ## (figure) – Single element of a figured bass indication.
  element mei:f {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.common.anl.attributes,
    mei_att.altsym.attributes,
    mei_att.facsimile.attributes,
    
    ## indicates the presence of an extension symbol, typically a dash or underscore, drawn from the end of the harmonic indication to the point indicated by the dur attribute.
    attribute extender { data.BOOLEAN }?,
    empty
  }
fb =
  
  ## (figured bass) – Symbols added to a bass line that indicate harmony. Used to improvise a chordal accompaniment. Sometimes called Generalbass, thoroughbass, or basso continuo.
  element mei:fb {
    (mei_model.fLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.common.anl.attributes,
    mei_att.facsimile.attributes,
    empty
  }
harm =
  
  ## (harmony) – An indication of harmony, e.g., chord names, tablature grids, harmonic analysis, figured bass.
  element mei:harm {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.figbassLike)*)
    >> sch:pattern [
         id =
           "harm-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:harm"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.harm.log.attributes,
    mei_att.harm.vis.attributes,
    mei_att.harm.ges.attributes,
    mei_att.harm.anl.attributes,
    empty
  }
mei_att.alignment.attributes = mei_att.alignment.attribute.when
mei_att.alignment.attribute.when =
  
  ## indicates the point of occurrence of this feature along a time line. Its value must be the ID of a <when> element.
  attribute when { data.URI }?
mei_model.alignLike = mei_timeline
mei_timeline =
  
  ## – Provides a set of ordered points in time to which musical elements can be linked in order to create a temporal alignment of those elements. 
  element mei:timeline {
    mei_when*,
    mei_att.common.attributes,
    
    ## holds the identifier of an <avFile> element that references an external digital media file.
    attribute avref { data.URI }?,
    
    ## designates the origin of the timeline, i.e. the <when> element associated with the beginning of the timeline.
    attribute origin { data.URI },
    empty
  }
mei_when =
  
  ## – Indicates a point in time either absolutely (using the absolute attribute), or relative to other elements in the same timeline element (using the interval and since attributes). 
  element mei:when {
    empty,
    mei_att.common.attributes,
    mei_att.datapointing.attributes,
    
    ## provides an absolute value for the time associated with a point on a timeline. This attribute is required for the element designated as the origin by the parent timeline.
    attribute absolute { data.ISOTIME }?,
    
    ## specifies the time interval between this time point and the one designated by the since attribute. This attribute can only be interpreted meaningfully in conjunction with the inttype attribute.
    attribute interval { text }?,
    
    ## specifies the kind of values used in the interval attribute.
    attribute inttype {
      
      ## byte value.
      "byte"
      | 
        ## Synchronized Multimedia Integration Language.
        "smil"
      | 
        ## MIDI time code.
        "midi"
      | 
        ## SMPTE 25 EBU.
        "smpte-25"
      | 
        ## SMPTE 24 Film Sync.
        "smpte-24"
      | 
        ## SMPTE 30 Drop.
        "smpte-df30"
      | 
        ## SMPTE 30 Non-Drop.
        "smpte-ndf30"
      | 
        ## SMPTE 29.97 Drop.
        "smpte-df29.97"
      | 
        ## SMPTE 29.97 Non-Drop.
        "smpte-ndf29.97"
      | 
        ## AES Time-code character format.
        "tcf"
      | 
        ## ISO 24-hour time format: HH:MM:SS.ss.
        "time"
    }?,
    
    ## identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point. The value should be the ID of another when element in the same timeline. If the since attribute is omitted and the absolute attribute is not specified, then the reference point is understood to be the immediately preceding when element.
    attribute since { data.URI }?,
    empty
  }
mei_att.lyrics.anl.attributes = mei_att.common.anl.attributes
mei_att.lyrics.ges.attributes = empty
mei_att.lyrics.log.attributes =
  mei_att.staffident.attributes, mei_att.layerident.attributes
mei_att.lyrics.vis.attributes =
  mei_att.placement.attributes, mei_att.typography.attributes
mei_att.verse.anl.attributes = mei_att.common.anl.attributes
mei_att.verse.ges.attributes = empty
mei_att.verse.log.attributes =
  mei_att.verse.log.attribute.refrain,
  mei_att.verse.log.attribute.rhythm
mei_att.verse.log.attribute.refrain =
  
  ## used to indicate a common, usually centered, refrain (Mup User's Guide, p. 44).
  attribute refrain { data.BOOLEAN }?
mei_att.verse.log.attribute.rhythm =
  
  ## used to specify a rhythm for the lyric syllables that differs from that of the notes on the staff, e.g. '4,4,4,4' when the rhythm of the notes is '4.,8,4.,8'.
  attribute rhythm { text }?
mei_att.verse.vis.attributes =
  mei_att.typography.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.visualoffset.vo.attributes,
  mei_att.xy.attributes
mei_model.lyricsLike = lyrics
mei_model.lyricsLike_alternation = lyrics
mei_model.lyricsLike_sequence = lyrics
mei_model.lyricsLike_sequenceOptional = lyrics?
mei_model.lyricsLike_sequenceOptionalRepeatable = lyrics*
mei_model.lyricsLike_sequenceRepeatable = lyrics+
mei_model.sylLike = syl
mei_model.verseLike = verse
lyrics =
  
  ## – Vocally performed 'text' of a musical composition, such as a song or opera. 
  element mei:lyrics {
    mei_model.verseLike+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.lyrics.log.attributes,
    mei_att.lyrics.vis.attributes,
    mei_att.lyrics.ges.attributes,
    mei_att.lyrics.anl.attributes,
    empty
  }
verse =
  
  ## – Lyric verse. 
  element mei:verse {
    (dir | dynam | tempo | mei_space)*,
    mei_model.sylLike+,
    mei_model.lbLike*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.verse.log.attributes,
    mei_att.verse.vis.attributes,
    mei_att.verse.ges.attributes,
    mei_att.verse.anl.attributes,
    empty
  }
mei_att.channelized.attributes =
  mei_att.channelized.attribute.midi.channel,
  mei_att.channelized.attribute.midi.duty,
  mei_att.channelized.attribute.midi.port,
  mei_att.channelized.attribute.midi.track
mei_att.channelized.attribute.midi.channel =
  
  ## records a MIDI channel value.
  attribute midi.channel { data.MIDICHANNEL }?
mei_att.channelized.attribute.midi.duty =
  
  ## specifies the 'on' part of the duty cycle as a percentage of a note's duration.
  attribute midi.duty { data.PERCENT }?
mei_att.channelized.attribute.midi.port =
  
  ## sets the MIDI port value.
  attribute midi.port { data.MIDIVALUE }?
mei_att.channelized.attribute.midi.track =
  
  ## sets the MIDI track.
  attribute midi.track { xsd:positiveInteger }?
mei_att.midiinstrument.attributes =
  mei_att.midiinstrument.attribute.midi.instrnum,
  mei_att.midiinstrument.attribute.midi.instrname
mei_att.midiinstrument.attribute.midi.instrnum =
  
  ## sets the MIDI instrument number.
  attribute midi.instrnum { data.MIDIVALUE }?
mei_att.midiinstrument.attribute.midi.instrname =
  
  ## provides a General MIDI label for the MIDI instrument.
  attribute midi.instrname { data.MIDINAMES }?
mei_att.midinumber.attributes = mei_att.midinumber.attribute.num
mei_att.midinumber.attribute.num =
  
  ## MIDI number in the range set by data.MIDIVALUE.
  attribute num { data.MIDIVALUE }
mei_att.miditempo.attributes = mei_att.miditempo.attribute.midi.tempo
mei_att.miditempo.attribute.midi.tempo =
  
  ## contains a MIDI value, that is, the number of quarter notes per minute in the range from 10 to 1000.
  attribute midi.tempo { data.MIDITEMPO }?
mei_att.midivalue.attributes = mei_att.midivalue.attribute.val
mei_att.midivalue.attribute.val =
  
  ## MIDI number.
  attribute val { data.MIDIVALUE }?
mei_att.midi.event.attributes =
  mei_att.staffident.attributes,
  mei_att.layerident.attributes,
  mei_att.timestamp.musical.attributes
mei_att.midi.anl.attributes = mei_att.common.anl.attributes
mei_att.midi.ges.attributes = empty
mei_att.midi.log.attributes =
  mei_att.staffident.attributes, mei_att.layerident.attributes
mei_att.midi.vis.attributes = empty
mei_att.timebase.attributes = mei_att.timebase.attribute.ppq
mei_att.timebase.attribute.ppq =
  
  ## indicates the number of pulses (sometimes referred to as ticks or divisions) per quarter note. Unlike MIDI, MEI permits different values for a score and individual staves.
  attribute ppq { xsd:positiveInteger }?
mei_model.midiLike = midi
mei_model.midiLike_alternation = midi
mei_model.midiLike_sequence = midi
mei_model.midiLike_sequenceOptional = midi?
mei_model.midiLike_sequenceOptionalRepeatable = midi*
mei_model.midiLike_sequenceRepeatable = midi+
instrGrp =
  
  ## (instrument group) – Collects MIDI instrument definitions.
  element mei:instrGrp {
    mei_model.instrDefLike+, mei_att.common.attributes, empty
  }
instrDef =
  
  ## (instrument definition) – MIDI instrument declaration. 
  element mei:instrDef {
    empty,
    mei_att.common.attributes,
    mei_att.channelized.attributes,
    mei_att.midiinstrument.attributes,
    empty
  }
cc =
  
  ## (control change) – MIDI parameter/control change. 
  element mei:cc {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    mei_att.midivalue.attributes,
    empty
  }
chan =
  
  ## (channel) – MIDI channel assignment.
  element mei:chan {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    
    ## MIDI number in the range set by data.MIDICHANNEL.
    attribute num { data.MIDICHANNEL },
    empty
  }
chanPr =
  
  ## (channel pressure) – MIDI channel pressure/after touch. 
  element mei:chanPr {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    empty
  }
cue =
  
  ## – MIDI cue point.
  element mei:cue {
    text,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    empty
  }
hex =
  
  ## – Arbitrary MIDI data in hexadecimal form. 
  element mei:hex {
    text,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    empty
  }
marker =
  
  ## – MIDI marker meta-event.
  element mei:marker {
    text,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    empty
  }
metaText =
  
  ## – MIDI text meta-event.
  element mei:metaText {
    text,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    empty
  }
midi =
  
  ## – Container for elements that contain information useful when generating MIDI output. 
  element mei:midi {
    (cc
     | chan
     | chanPr
     | cue
     | hex
     | marker
     | metaText
     | noteOff
     | noteOn
     | port
     | prog
     | seqNum
     | trkName
     | vel)*,
    mei_att.common.attributes,
    mei_att.midi.log.attributes,
    mei_att.midi.vis.attributes,
    mei_att.midi.ges.attributes,
    mei_att.midi.anl.attributes,
    empty
  }
noteOff =
  
  ## – MIDI note-off event.
  element mei:noteOff {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    empty
  }
noteOn =
  
  ## – MIDI note-on event.
  element mei:noteOn {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    empty
  }
port =
  
  ## – MIDI port. 
  element mei:port {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    empty
  }
prog =
  
  ## (program) – MIDI program change. 
  element mei:prog {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    empty
  }
seqNum =
  
  ## (sequence number) – MIDI sequence number.
  element mei:seqNum {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    
    ## number in the range 0-65535.
    attribute num {
      xsd:nonNegativeInteger { maxInclusive = "65535" }
    },
    empty
  }
trkName =
  
  ## (track name) – MIDI track/sequence name.
  element mei:trkName {
    text,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    empty
  }
vel =
  
  ## (velocity) – MIDI Note-on/off velocity. 
  element mei:vel {
    empty,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.midi.event.attributes,
    mei_att.midinumber.attributes,
    
    ## indicates whether this is note-on or note-off velocity data.
    attribute form {
      
      ##
      "on"
      | 
        ##
        "off"
    },
    empty
  }
mei_model.nameLike.agent = corpName | mei_persName
mei_model.nameLike.agent_alternation = corpName | mei_persName
mei_model.nameLike.agent_sequence = corpName, mei_persName
mei_model.nameLike.agent_sequenceOptional = corpName?, mei_persName?
mei_model.nameLike.agent_sequenceOptionalRepeatable =
  corpName*, mei_persName*
mei_model.nameLike.agent_sequenceRepeatable = corpName+, mei_persName+
mei_model.nameLike.geogName = mei_geogName
mei_model.nameLike.geogName_alternation = mei_geogName
mei_model.nameLike.geogName_sequence = mei_geogName
mei_model.nameLike.geogName_sequenceOptional = mei_geogName?
mei_model.nameLike.geogName_sequenceOptionalRepeatable = mei_geogName*
mei_model.nameLike.geogName_sequenceRepeatable = mei_geogName+
mei_model.nameLike.place =
  mei_model.repositoryLike | mei_model.nameLike.geogName
mei_model.nameLike.place_alternation =
  mei_model.repositoryLike_alternation
  | mei_model.nameLike.geogName_alternation
mei_model.nameLike.place_sequence =
  mei_model.repositoryLike_sequence,
  mei_model.nameLike.geogName_sequence
mei_model.nameLike.place_sequenceOptional =
  mei_model.repositoryLike_sequenceOptional?,
  mei_model.nameLike.geogName_sequenceOptional?
mei_model.nameLike.place_sequenceOptionalRepeatable =
  mei_model.repositoryLike_sequenceOptionalRepeatable*,
  mei_model.nameLike.geogName_sequenceOptionalRepeatable*
mei_model.nameLike.place_sequenceRepeatable =
  mei_model.repositoryLike_sequenceRepeatable+,
  mei_model.nameLike.geogName_sequenceRepeatable+
mei_model.nameLike.label = periodName | styleName
mei_model.nameLike.label_alternation = periodName | styleName
mei_model.nameLike.label_sequence = periodName, styleName
mei_model.nameLike.label_sequenceOptional = periodName?, styleName?
mei_model.nameLike.label_sequenceOptionalRepeatable =
  periodName*, styleName*
mei_model.nameLike.label_sequenceRepeatable = periodName+, styleName+
corpName =
  
  ## (corporate name) – Identifies an organization or group of people that acts as a single entity. 
  element mei:corpName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_geogName =
  
  ## (geographic name) – The proper noun designation for a place, natural feature, or political jurisdiction. 
  element mei:geogName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
periodName =
  
  ## (period name) – A label that describes a period of time, such as 'Baroque' or '3rd Style period'. 
  element mei:periodName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_persName =
  
  ## (personal name) – Designation for an individual, including any or all of that individual's forenames, surnames, honorific titles, and added names 
  element mei:persName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
styleName =
  
  ## (style name) – A label for a characteristic style of writing or performance, such as 'bebop' or 'rock-n-roll'. 
  element mei:styleName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_performance =
  
  ## – A presentation of one or more musical works. 
  element mei:performance {
    mei_recording*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
mei_recording =
  
  ## – A recorded performance. 
  element mei:recording {
    avFile*,
    clip*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.mediabounds.attributes,
    mei_att.startid.attributes,
    empty
  }
clip =
  
  ## – Defines a time segment of interest within a recording or within a digital audio or video file. 
  element mei:clip {
    avFile*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.mediabounds.attributes,
    mei_att.startid.attributes,
    empty
  }
avFile =
  
  ## (audio/video file) – References an external digital audio or video file. 
  element mei:avFile {
    (clip*)
    >> sch:pattern [
         id = "avFile-constraint-avFile_child_of_clip"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clip/mei:avFile"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:*) = 0"
             "avFile child of clip cannot have\x{a}" ~
             "              children"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.internetmedia.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_model.locrefLike = mei_ptr | mei_ref
mei_model.locrefLike_alternation = mei_ptr | mei_ref
mei_model.locrefLike_sequence = mei_ptr, mei_ref
mei_model.locrefLike_sequenceOptional = mei_ptr?, mei_ref?
mei_model.locrefLike_sequenceOptionalRepeatable = mei_ptr*, mei_ref*
mei_model.locrefLike_sequenceRepeatable = mei_ptr+, mei_ref+
mei_ptr =
  
  ## (pointer) – Defines a pointer to another location, using only attributes to describe the destination. 
  element mei:ptr {
    empty,
    mei_att.common.attributes,
    mei_att.internetmedia.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_ref =
  
  ## (reference) – Defines a reference to another location that may contain text and sub-elements to describe the destination. 
  element mei:ref {
    (text | mei_model.textphraseLike)*,
    mei_att.common.attributes,
    mei_att.internetmedia.attributes,
    mei_att.lang.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_att.staffDef.ges.tablature.attributes =
  mei_att.staffDef.ges.tablature.attribute.tab.strings
mei_att.staffDef.ges.tablature.attribute.tab.strings =
  
  ## provides a *written* pitch and octave for each open string.
  attribute tab.strings {
    list {
      xsd:token { pattern = "[a-g][\-#fs]?[0-9]" }+
    }
  }?
mei_att.note.ges.tablature.attributes =
  mei_att.note.ges.tablature.attribute.tab.fret,
  mei_att.note.ges.tablature.attribute.tab.string
mei_att.note.ges.tablature.attribute.tab.fret =
  
  ## records the fret at which a string should be stopped.
  attribute tab.fret { data.FRETNUMBER }?
mei_att.note.ges.tablature.attribute.tab.string =
  
  ## records which string is to be played.
  attribute tab.string { data.STRINGNUMBER }?
mei_model.backLike = mei_back
mei_model.divLike = mei_div
mei_model.frontLike = mei_front
mei_model.headLike = mei_head
mei_model.lLike = mei_l
mei_model.listLike = mei_list
mei_model.listLike_alternation = mei_list
mei_model.listLike_sequence = mei_list
mei_model.listLike_sequenceOptional = mei_list?
mei_model.listLike_sequenceOptionalRepeatable = mei_list*
mei_model.listLike_sequenceRepeatable = mei_list+
mei_model.quoteLike = mei_quote
mei_model.quoteLike_alternation = mei_quote
mei_model.quoteLike_sequence = mei_quote
mei_model.quoteLike_sequenceOptional = mei_quote?
mei_model.quoteLike_sequenceOptionalRepeatable = mei_quote*
mei_model.quoteLike_sequenceRepeatable = mei_quote+
mei_model.lgLike = mei_lg
mei_model.lgLike_alternation = mei_lg
mei_model.lgLike_sequence = mei_lg
mei_model.lgLike_sequenceOptional = mei_lg?
mei_model.lgLike_sequenceOptionalRepeatable = mei_lg*
mei_model.lgLike_sequenceRepeatable = mei_lg+
mei_back =
  
  ## (back matter) – Contains any appendixes, advertisements, indexes, etc. following the main body of a musical text. 
  element mei:back {
    mei_model.milestoneLike.text*,
    (mei_model.divLike | mei_model.frontPart)+,
    mei_model.milestoneLike.text*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_quote =
  
  ## (block quote) – A formatting element that designates an extended quotation; that is, a passage attributed to a source external to the text and normally set off from the text by spacing or other typographic distinction. 
  element mei:quote {
    mei_model.textcomponentLike+,
    mei_model.biblLike?,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_div =
  
  ## (division) – Major structural division of text, such as a preface, chapter or section. 
  element mei:div {
    mei_model.milestoneLike.text*,
    mei_model.headLike?,
    (mei_model.divLike | mei_model.textcomponentLike)+,
    mei_model.milestoneLike.text*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_front =
  
  ## (front matter) – Bundles prefatory text found before the start of the musical text. 
  element mei:front {
    mei_model.milestoneLike.text*,
    (mei_model.divLike | mei_model.frontPart)+,
    mei_model.milestoneLike.text*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_head =
  
  ## (heading) – Contains any heading, for example, the title of a section of text, or the heading of a list. 
  element mei:head {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_item =
  
  ## – Single item in a <list>. 
  element mei:item {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    empty
  }
mei_l =
  
  ## (line of text) – Contains a single line of text within a line group. 
  element mei:l {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_lg =
  
  ## (line group) – May be used for any section of text that is organized as a group of lines; however, it is most often used for a group of verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. 
  element mei:lg {
    mei_model.headLike?,
    (mei_model.lLike | mei_model.lgLike),
    (mei_model.lLike | mei_model.lgLike)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_list =
  
  ## – A formatting element that contains a series of items separated from one another and arranged in a linear, often vertical, sequence. 
  element mei:list {
    mei_model.headLike?,
    mei_item+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    
    ## used to identify and format a list. In a "simple" list, <item>s are not numbered or bulleted. In a "marked" list, the sequence of the list items is not critical, and a bullet, box, dash, or other character is displayed at the start of each <item>. In an "ordered" list, the sequence of the items is important, and each <item> is lettered or numbered. Style sheet functions should be used to specify the mark or numeration system for each <item>.
    attribute form {
      
      ## items are not numbered or bulleted.
      "simple"
      | 
        ## bullet, box, dash, or other character is displayed before each item.
        "marked"
      | 
        ## each item is numbered or lettered.
        "ordered"
    }?,
    empty
  }
mei_model.graphicprimitiveLike =
  anchoredText | curve | mei_line | mei_symbol
mei_model.symbolTableLike = symbolTable
anchoredText =
  
  ## – Container for text that is fixed to a particular location, regardless of changes made to the layout of the measures around it. 
  element mei:anchoredText {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.startid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.xy.attributes,
    empty
  }
curve =
  
  ## – A curved line that cannot be represented by a more specific element, such as a <slur>. 
  element mei:curve {
    empty,
    mei_att.common.anl.attributes,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.startendid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.visualoffset2.attributes,
    mei_att.xy.attributes,
    mei_att.xy2.attributes,
    mei_att.curvature.attributes,
    mei_att.curverend.attributes,
    empty
  }
mei_line =
  
  ## – A line that cannot be represented by a more specific element. 
  element mei:line {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.anl.attributes,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.startendid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.visualoffset2.attributes,
    mei_att.xy.attributes,
    mei_att.xy2.attributes,
    mei_att.linerend.attributes,
    empty
  }
mei_symbol =
  
  ## – A reference to a previously defined symbol. 
  element mei:symbol {
    empty,
    mei_att.common.anl.attributes,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.scalable.attributes,
    mei_att.startid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.xy.attributes,
    
    ## contains a reference to a previously-declared user-defined symbol.
    attribute ref { data.URI },
    empty
  }
symbolDef =
  
  ## (symbol definition) – Declaration of an individual symbol in a symbolTable.
  element mei:symbolDef {
    mei_model.graphicprimitiveLike+,
    mei_att.common.attributes,
    mei_att.coordinated.attributes,
    empty
  }
symbolTable =
  
  ## – Contains individual, user-defined symbols. 
  element mei:symbolTable {
    symbolDef+, mei_att.common.attributes, empty
  }
start = TEI | teiCorpus
