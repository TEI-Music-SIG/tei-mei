default namespace = "http://www.tei-c.org/ns/1.0"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.isocat.org/ns/dcr"
namespace ns2 = "http://www.music-encoding.org/ns/mei"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2013-08-02T14:30:23Z. 
# Edition: 2.5.0. Last updated on
#	26th July 2013.
# Edition Location: http://www.tei-c.org/Vault/P5/2.5.0/
#

# Copyright 2010 TEI Consortium. This is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This material is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. See the GNU General Public License for more details. A copy of the GNU General Public License is stored on the TEI web site along with this file; you can also contact the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA, for a copy. Copyright (c) 2010 by the Music Encoding Initiative (MEI) Council. Licensed under the Educational Community License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.osedu.org/licenses/ECL-2.0. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. This is a derivative work based on earlier versions of the schema copyright (c) 2001-2006 Perry Roland and the Rector and Visitors of the University of Virginia; licensed under the Educational Community License version 1.0.
macro.paraContent =
  (text | model.gLike | model.phrase | model.inter | model.global | lg)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq = (text | model.gLike | model.phrase | model.global)*
macro.phraseSeq.limited = (text | model.limitedPhrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
macro.xtext = (text | model.gLike)*
data.certainty = "high" | "medium" | "low" | "unknown"
data.probability = xsd:double { minInclusive = "0" maxInclusive = "1" }
data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
data.count = xsd:nonNegativeInteger
data.temporal.w3c =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
data.truthValue = xsd:boolean
data.xTruthValue = xsd:boolean | "unknown" | "inapplicable"
data.language = xsd:language | ""
data.outputMeasurement =
  xsd:token {
    pattern =
      "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
  }
data.pattern = xsd:token
data.point =
  xsd:token { pattern = "(\-?[0-9]+\.?[0-9]*,\-?[0-9]+\.?[0-9]*)" }
data.pointer = xsd:anyURI
data.version = xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
data.versionNumber =
  xsd:token { pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}" }
data.replacement = text
data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
data.text = xsd:string
data.name = xsd:Name
data.enumerated = data.name
data.BEAT = xsd:decimal { minInclusive = "0" }
data.COLOR =
  xsd:token {
    pattern =
      "(#[0-9A-Fa-f]{6,6}|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)"
  }
data.COLORS = list { data.COLOR+ }
data.DEGREES =
  xsd:decimal { maxInclusive = "360.0" minInclusive = "-360.0" }
data.INTERVAL.AMOUNT =
  xsd:decimal
  | xsd:token { pattern = "u|d|s" }
data.ISODATE =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
data.ISOTIME = xsd:time
data.MEASUREBEAT =
  xsd:token { pattern = "([0-9]+m\s*\+\s*)?[0-9]+(\.?[0-9]*)?" }
data.MODUSMAIOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.MODUSMINOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.OCTAVE.DIS = xsd:positiveInteger { pattern = "8|15|22" }
data.ORIENTATION = xsd:token { pattern = "reversed|90CW|90CCW" }
data.PAGE.PANELS =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "2" }
data.PERCENT = xsd:token { pattern = "[0-9]+(\.?[0-9]*)?%" }
data.PROLATIO =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.RATIO =
  xsd:token { pattern = "[0-9]+(\.?[0-9]*)?:[0-9]+(\.?[0-9]*)?" }
data.SLASH =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }
data.TEMPOVALUE = xsd:positiveInteger
data.TEMPUS =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.TSTAMPOFFSET = xsd:decimal
data.URI = xsd:anyURI
data.URIS = list { data.URI+ }
data.ACCIDENTAL.EXPLICIT =
  
  ## sharp
  "s"
  | 
    ## flat
    "f"
  | 
    ## double sharp (written as 2 sharps)
    "ss"
  | 
    ## double sharp (written using croix)
    "x"
  | 
    ## double flat
    "ff"
  | 
    ## triple sharp (written as croix and 2 sharps)
    "xs"
  | 
    ## triple sharp (written as 3 sharps)
    "ts"
  | 
    ## triple flat
    "tf"
  | 
    ## natural
    "n"
  | 
    ## natural + flat
    "nf"
  | 
    ## natural + sharp
    "ns"
  | 
    ## sharp note raised by quarter tone
    "su"
  | 
    ## sharp note lowered by quarter tone
    "sd"
  | 
    ## flat note raised by quarter tone
    "fu"
  | 
    ## flat note lowered by quarter tone
    "fd"
  | 
    ## natural note raised by quarter tone
    "nu"
  | 
    ## natural note lowered by quarter tone
    "nd"
data.ACCIDENTAL.IMPLICIT =
  
  ## sharp
  "s"
  | 
    ## flat
    "f"
  | 
    ## double sharp
    "ss"
  | 
    ## double flat
    "ff"
  | 
    ## natural
    "n"
data.ARTICULATION =
  
  ## accent (Unicode 1D17B)
  "acc"
  | 
    ## staccato (Unicode 1D17C)
    "stacc"
  | 
    ## tenuto (Unicode 1D17D)
    "ten"
  | 
    ## staccatissimo (Unicode 1D17E)
    "stacciss"
  | 
    ## marcato (Unicode 1D17F)
    "marc"
  | 
    ## marcato + staccato (Unicode 1D180)
    "marc-stacc"
  | 
    ## spiccato
    "spicc"
  | 
    ## main note followed by short slide to higher, indeterminate pitch (Unicode
    ##             1D185)
    "doit"
  | 
    ## main note preceded by short slide from lower, indeterminate pitch
    ##             (Unicode 1D186)
    "rip"
  | 
    ## main note preceded by "slide" from higher, indeterminate
    ##             pitch
    "plop"
  | 
    ## main note followed by long "slide" to lower, indeterminate
    ##             pitch
    "fall"
  | 
    ## "lip slur" to lower pitch, then return to written pitch
    "bend"
  | 
    ## main note followed by quick upward rise, then descent in pitch (Unicode
    ##             1D187)
    "flip"
  | 
    ## (Unicode 1D188)
    "smear"
  | 
    ## down bow (Unicode 1D1AA)
    "dnbow"
  | 
    ## up bow (Unicode 1D1AB)
    "upbow"
  | 
    ## harmonic (Unicode 1D1AC)
    "harm"
  | 
    ## snap pizzicato (Unicode 1D1AD)
    "snap"
  | 
    ## fingernail (Unicode 1D1B3)
    "fingernail"
  | 
    ## tenuto + staccato (Unicode 1D182)
    "ten-stacc"
  | 
    ## dampen harp string (Unicode 1D1B4)
    "damp"
  | 
    ## dampen all harp strings (Unicode 1D1B5)
    "dampall"
  | 
    ## full (as opposed to stopped) tone
    "open"
  | 
    ## "muffled" tone
    "stop"
  | 
    ## double tongue (Unicode 1D18A)
    "dbltongue"
  | 
    ## triple tongue (Unicode 1D18B)
    "trpltongue"
  | 
    ## use heel (organ pedal)
    "heel"
  | 
    ## use toe (organ pedal)
    "toe"
  | 
    ## percussive effect on guitar string(s)
    "tap"
  | 
    ## left-hand pizzicato
    "lhpizz"
  | 
    ## uninterpreted dot
    "dot"
  | 
    ## uninterpreted stroke
    "stroke"
data.ARTICULATIONS = list { data.ARTICULATION+ }
data.AUGMENTDOT = xsd:nonNegativeInteger { maxInclusive = "4" }
data.BARPLACE =
  
  ## between staves only
  "mensur"
  | 
    ## between and across staves as necessary
    "staff"
  | 
    ## short line above staff or through top line
    "takt"
data.BARRENDITION =
  
  ## dashed line (Unicode 1D104)
  "dashed"
  | 
    ## dotted line
    "dotted"
  | 
    ## (Unicode 1D101)
    "dbl"
  | 
    ## double dashed line
    "dbldashed"
  | 
    ## double dotted line
    "dbldotted"
  | 
    ## (Unicode 1D102)
    "end"
  | 
    ## bar line not rendered
    "invis"
  | 
    ## repeat start (Unicode 1D106)
    "rptstart"
  | 
    ## repeat start and end
    "rptboth"
  | 
    ## repeat end (Unicode 1D107)
    "rptend"
  | 
    ## (Unicode 1D100)
    "single"
data.BOOLEAN = "true" | "false"
data.CERTAINTY = "high" | "medium" | "low" | "unknown"
data.CLEFLINE = xsd:positiveInteger
data.CLEFSHAPE =
  
  ## G clef (Unicode 1D11E)
  "G"
  | 
    ## Double G clef
    "GG"
  | 
    ## F clef (Unicode 1D122)
    "F"
  | 
    ## C clef (Unicode 1D121)
    "C"
  | 
    ## Drum clef (Unicode 1D125 or Unicode 1D126)
    "perc"
  | 
    ## tablature "clef"; i.e. usually "TAB" rendered
    ##             vertically
    "TAB"
data.CLUSTER =
  
  ## unfilled box
  "whbox"
  | 
    ## filled box
    "blbox"
data.CURVERENDITION =
  
  ## default line width
  "narrow"
  | 
    ## twice as wide as normal
    "medium"
  | 
    ## twice as wide as medium
    "wide"
  | 
    ## dashed
    "dashed"
  | 
    ## dotted
    "dotted"
data.DURATION = data.DURATION.mensural
data.ENCLOSURE =
  
  ## parentheses
  "paren"
  | 
    ## square brackets
    "brack"
data.FONTFAMILY = xsd:token
data.FONTNAME = xsd:token
data.FONTSTYLE =
  
  ## text slants to right
  "ital"
  | 
    ## unadorned
    "normal"
  | 
    ## text slants to the left
    "oblique"
data.FONTWEIGHT = "bold"
data.HEADSHAPE =
  
  ## filled oval (Unicode 1D158)
  "quarter"
  | 
    ## open oval (Unicode 1D157)
    "half"
  | 
    ## open oval (Unicode 1D15D)
    "whole"
  | 
    ## modern breve (Unicode 1D15C)
    "dblwhole"
  | 
    ## filled diamond (Unicode 1D1BA)
    "filldiamond"
  | 
    ## open diamond (Unicode 1D1B9)
    "diamond"
  | 
    ## double whole diamond (Mup)
    "dwdiamond"
  | 
    ## filled isosceles triangle (Unicode 1D149)
    "fillisotriangle"
  | 
    ## open isosceles triangle (Unicode 1D148)
    "isotriangle"
  | 
    ## double whole open isosceles triangle (Unicode 1D14E)
    "dwhisotriangle"
  | 
    ## filled downward-pointing wedge (Unicode 1D155)
    "fillpiewedge"
  | 
    ## downward-pointing wedge (Unicode 1D154)
    "piewedge"
  | 
    ## double whole downward-pointing wedge (Mup)
    "dwhpiewedge"
  | 
    ## filled rectangle (Unicode 1D147)
    "fillrectangle"
  | 
    ## open rectangle (Unicode 1D146)
    "rectangle"
  | 
    ## double whole open rectangle (Mup)
    "dwhrectangle"
  | 
    ## filled right triangle (Unicode 1D14B)
    "fillrtriangle"
  | 
    ## open right triangle (Unicode 1D14A)
    "rtriangle"
  | 
    ## double whole right triangle (Mup)
    "dwrtriangle"
  | 
    ## filled upper right triangle (Unicode 1D151) 
    "fillurtriangle"
  | 
    ## open upper right triangle (Unicode 1D150)
    "urtriangle"
  | 
    ## double whole upper right triangle
    "dwurtriangle"
  | 
    ## filled semi-circle (Unicode 1D153)
    "fillsemicircle"
  | 
    ## open semi-circle (Unicode 1D152)
    "semicircle"
  | 
    ## double whole open semi-circle (Mup)
    "dwsemicircle"
  | 
    ## filled slash (Mup)
    "fillslash"
  | 
    ## open slash (Mup)
    "slash"
  | 
    ## double whole open slash (Mup)
    "dwslash"
  | 
    ## X (Unicode 1D143)
    "x"
  | 
    ## note head not rendered (Unicode 1D159)
    "blank"
  | 
    ## X within circle (Unicode 1D145)
    "circlex"
  | 
    ## plus sign (Unicode 1D144)
    "cross"
data.KEYSIGNATURE = xsd:token { pattern = "mixed|0|[1-7][f|s]" }
data.LAYERSCHEME =
  
  ## single layer
  "1"
  | 
    ## two layers with opposing stems
    "2o"
  | 
    ## two layers with 'floating' stems
    "2f"
  | 
    ##
    "3o"
  | 
    ##
    "3f"
data.LIGATUREFORM =
  
  ## notes are "squeezed" together
  "recta"
  | 
    ## individual notes are replaced by an oblique figure
    "obliqua"
data.LINERENDITION =
  
  ## default line width
  "narrow"
  | 
    ## twice as wide as narrow
    "medium"
  | 
    ## twice as wide as medium
    "wide"
  | 
    ## dashed line
    "dashed"
  | 
    ## dotted line
    "dotted"
  | 
    ## undulating line
    "wavy"
data.MENSURATIONSIGN =
  
  ## tempus imperfectum
  "C"
  | 
    ## tempus perfectum
    "O"
data.METERSIGN =
  
  ## common time; i.e. 4/4
  "common"
  | 
    ## cut time; i.e. 2/2
    "cut"
data.MODE =
  "major"
  | "minor"
  | "dorian"
  | "phrygian"
  | "lydian"
  | "mixolydian"
  | "aeolian"
  | "locrian"
data.MUSICFONT = xsd:token
data.OCTAVE = xsd:nonNegativeInteger { maxInclusive = "9" }
data.PGSCALE = data.PERCENT | data.RATIO
data.PGUNITS =
  
  ## inches
  "in"
  | 
    ## centimeters
    "cm"
  | 
    ## millimeters
    "mm"
data.PITCHCLASS = xsd:nonNegativeInteger { maxInclusive = "11" }
data.PITCHNAME = xsd:token { pattern = "[a-g]" }
data.PITCHNAME.GES = xsd:token { pattern = "[a-g]|none" }
data.PITCHNUMBER = xsd:nonNegativeInteger
data.PLACE = "above" | "below"
data.STAFFREL =
  
  ## written above staff
  "above"
  | 
    ## written below staff
    "below"
  | 
    ## written on staff
    "within"
data.SIZE =
  
  ## default size
  "normal"
  | 
    ## reduced size
    "cue"
data.SLUR = xsd:token { pattern = "[i|m|t][1-6]" }
data.SLURS = list { data.SLUR+ }
data.STAFFLOC = xsd:integer
data.STEMDIRECTION =
  
  ## stem points upward
  "up"
  | 
    ## stem points downward
    "down"
data.STEMPOSITION =
  
  ## stem attached to left side of note head
  "left"
  | 
    ## stem attached to right side of note head
    "right"
  | 
    ## stem is originates from center of note head
    "center"
data.TEMPERAMENT =
  
  ## equal or 12-tone temperament
  "equal"
  | 
    ## just intonation
    "just"
  | 
    ## meantone intonation
    "mean"
  | 
    ## pythagorean tuning
    "pythagorean"
data.TEXTRENDITION =
  
  ## enclosed in box
  "box"
  | 
    ## enclosed in circle/ellipse
    "circle"
  | 
    ## underlined twice
    "dblunderline"
  | 
    ## not rendered
    "none"
  | 
    ## quoted; context determines which quotation signs are
    ##             used
    "quote"
  | 
    ## struck through by '\'
    "bslash"
  | 
    ## struck through by '/'
    "fslash"
  | 
    ## small capitals
    "smcaps"
  | 
    ## stuck through by '-'
    "strike"
  | 
    ## subscript
    "sub"
  | 
    ## superscript
    "sup"
  | 
    ## underlined
    "underline"
data.TIE = xsd:token { pattern = "[i|m|t]" }
data.TIES = list { data.TIE+ }
data.TUPLET = xsd:token { pattern = "[i|m|t][1-6]" }
data.TUPLETS = list { data.TUPLET+ }
data.INTERLINE = xsd:decimal
macro.metaLike.page = mei_fw*, pgDesc?
macro.musicPart =
  mei_model.frontLike?, (mei_body | mei_group)?, mei_model.backLike?
macro.availabilityPart =
  (acqSource, (accessRestrict, price?)*)*,
  useRestrict?,
  sysReq?
macro.workPart =
  mei_history?,
  mei_langUsage?,
  key?,
  tempo?,
  meter?,
  mensuration?,
  perfMedium?
macro.bibldescPart =
  mei_editionStmt?, pubStmt?, mei_physDesc?, mei_seriesStmt?
data.DURATION.mensural =
  "maxima"
  | "longa"
  | "brevis"
  | "semibrevis"
  | "minima"
  | "semiminima"
  | "fusa"
  | "semifusa"
att.ascribed.attributes = att.ascribed.attribute.who
att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { data.pointer+ }
  }?
att.canonical.attributes =
  att.canonical.attribute.key, att.canonical.attribute.ref
att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { data.text }?
att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition for the entity being named by means of one or more URIs.
  attribute ref {
    list { data.pointer+ }
  }?
att.ranging.attributes =
  att.ranging.attribute.atLeast,
  att.ranging.attribute.atMost,
  att.ranging.attribute.min,
  att.ranging.attribute.max,
  att.ranging.attribute.confidence
att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast { data.numeric }?
att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost { data.numeric }?
att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation or a range, supplies the minimum value observed.
  attribute min { data.numeric }?
att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation or a range, supplies the maximum value observed.
  attribute max { data.numeric }?
att.ranging.attribute.confidence =
  
  ## specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by min and max, or the proportion of observed values that fall within that range.
  attribute confidence { data.probability }?
att.dimensions.attributes =
  att.ranging.attributes,
  att.dimensions.attribute.unit,
  att.dimensions.attribute.quantity,
  att.dimensions.attribute.extent,
  att.dimensions.attribute.precision,
  att.dimensions.attribute.scope
att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm(centimetres) ; 2] mm(millimetres) ; 3] in(inches) ; 4] lines; 5] chars(characters) 
  attribute unit {
    
    ## (centimetres) 
    "cm"
    | 
      ## (millimetres) 
      "mm"
    | 
      ## (inches) 
      "in"
    | 
      ## lines of text
      "lines"
    | 
      ## (characters) characters of text
      "chars"
    | xsd:Name
  }?
att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity { data.numeric }?
att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words. 
  attribute extent { data.text }?
att.dimensions.attribute.precision =
  
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision { data.certainty }?
att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope { data.enumerated }?
att.damaged.attributes =
  att.dimensions.attributes,
  att.damaged.attribute.hand,
  att.damaged.attribute.agent,
  att.damaged.attribute.degree,
  att.damaged.attribute.group
att.damaged.attribute.hand =
  
  ## in the case of damage (deliberate defacement, inking out, etc.) assignable to a distinct hand, signifies the hand responsible for the damage.
  attribute hand { data.pointer }?
att.damaged.attribute.agent =
  
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
  attribute agent { data.enumerated }?
att.damaged.attribute.degree =
  
  ## signifies the degree of damage according to a convenient scale. The damage tag with the degree attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as supplied.
  attribute degree { data.probability | data.certainty }?
att.damaged.attribute.group =
  
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.
  attribute group { data.count }?
att.breaking.attributes = att.breaking.attribute.break
att.breaking.attribute.break =
  
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break { data.enumerated }?
att.cReferencing.attributes = att.cReferencing.attribute.cRef
att.cReferencing.attribute.cRef =
  
  ## (canonical reference) specifies the destination of the pointer by supplying a canonical reference from a scheme defined in a refsDecl element in the TEI header
  attribute cRef { data.text }?
att.datable.w3c.attributes =
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.notBefore,
  att.datable.w3c.attribute.notAfter,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when { data.temporal.w3c }?
att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore { data.temporal.w3c }?
att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter { data.temporal.w3c }?
att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from { data.temporal.w3c }?
att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to { data.temporal.w3c }?
att.datable.attributes =
  att.datable.w3c.attributes,
  att.datable.attribute.calendar,
  att.datable.attribute.period
att.datable.attribute.calendar =
  
  ## indicates the system or calendar to which the date represented by the content of this element belongs.
  attribute calendar { data.pointer }?
sch:pattern [
  id = "calendar-constraint-calendar"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "string-length(.) gt 0"
      "\x{a}" ~
      "@calendar indicates the system or calendar to which the date represented by the content of this element\x{a}" ~
      "belongs, but this "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attribute.period =
  
  ## supplies a pointer to some location defining a named period of time within which the datable item is understood to have occurred.
  attribute period { data.pointer }?
att.datcat.attributes =
  att.datcat.attribute.datcat, att.datcat.attribute.valueDatcat
att.datcat.attribute.datcat =
  
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate Data Category (or categories) in ISOcat.
  attribute ns1:datcat {
    list { data.pointer+ }
  }?
att.datcat.attribute.valueDatcat =
  
  ## contains a PID (persistent identifier) that aligns the content of the given element or the value of the given attribute with the appropriate simple Data Category (or categories) in ISOcat.
  attribute ns1:valueDatcat {
    list { data.pointer+ }
  }?
att.declarable.attributes = att.declarable.attribute.default
att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { data.pointer+ }
  }?
att.fragmentable.attributes = att.fragmentable.attribute.part
att.fragmentable.attribute.part =
  
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ##  (yes) the element is fragmented in some (unspecified) respect
    "Y"
    | 
      ##  (no) either the element is not fragmented, or no claim is made as to its completeness.
      "N"
    | 
      ##  (initial) this is the initial part of a fragmented element
      "I"
    | 
      ##  (medial) this is a medial part of a fragmented element
      "M"
    | 
      ##  (final) this is the final part of a fragmented element
      "F"
  }?
att.divLike.attributes =
  att.fragmentable.attributes,
  att.divLike.attribute.org,
  att.divLike.attribute.sample
att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite"
    | 
      ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
att.docStatus.attributes = att.docStatus.attribute.status
att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ] attribute status { data.enumerated }?
att.responsibility.attributes =
  att.responsibility.attribute.cert, att.responsibility.attribute.resp
att.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert { data.certainty }?
att.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { data.pointer+ }
  }?
att.editLike.attributes =
  att.dimensions.attributes,
  att.responsibility.attributes,
  att.editLike.attribute.evidence,
  att.editLike.attribute.source,
  att.editLike.attribute.instant
att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name)+
    }
  }?
att.editLike.attribute.source =
  
  ## contains a list of one or more pointers indicating sources supporting the given intervention or interpretation.
  attribute source {
    list { data.pointer+ }
  }?
att.editLike.attribute.instant =
  
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ] attribute instant { data.xTruthValue }?
att.global.attributes =
  att.global.linking.attributes,
  att.global.facs.attributes,
  att.global.change.attributes,
  att.global.attribute.xmlid,
  att.global.attribute.n,
  att.global.attribute.xmllang,
  att.global.attribute.rend,
  att.global.attribute.style,
  att.global.attribute.rendition,
  att.global.attribute.xmlbase,
  att.global.attribute.xmlspace
att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { data.text }?
att.global.attribute.xmllang =
  
  ## (language) indicates the language of the element content using a tag generated according to BCP 47.
  attribute xml:lang { data.language }?
att.global.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list { data.word+ }
  }?
att.global.attribute.style =
  
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text 
  attribute style { data.text }?
att.global.attribute.rendition =
  
  ## points to a description of the rendering or presentation used for this element in the source text.
  attribute rendition {
    list { data.pointer+ }
  }?
att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { data.pointer }?
att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be managed by applications. 
  attribute xml:space {
    
    ## signals that the application's default white-space processing modes are acceptable
    "default"
    | 
      ## indicates the intent that applications preserve all white space
      "preserve"
  }?
att.handFeatures.attributes =
  att.handFeatures.attribute.scribe,
  att.handFeatures.attribute.scribeRef,
  att.handFeatures.attribute.script,
  att.handFeatures.attribute.scriptRef,
  att.handFeatures.attribute.medium,
  att.handFeatures.attribute.scope
att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe believed to be responsible for this hand.
  attribute scribe { data.name }?
att.handFeatures.attribute.scribeRef =
  
  ## points to a full description of the scribe concerned, typically supplied by a person element elsewhere in the description.
  attribute scribeRef {
    list { data.pointer+ }
  }?
att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { data.name+ }
  }?
att.handFeatures.attribute.scriptRef =
  
  ## points to a full description of the script or writing style used by this hand, typically supplied by a scriptNote element elsewhere in the description.
  attribute scriptRef {
    list { data.pointer+ }
  }?
att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other writing medium, e.g. pencil
  attribute medium { data.enumerated }?
att.handFeatures.attribute.scope =
  
  ## specifies how widely this hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
att.internetMedia.attributes = att.internetMedia.attribute.mimeType
att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list { data.word+ }
  }?
att.media.attributes =
  att.internetMedia.attributes,
  att.media.attribute.width,
  att.media.attribute.height,
  att.media.attribute.scale
att.media.attribute.width =
  
  ## Where the media are displayed, indicates the display width 
  attribute width { data.outputMeasurement }?
att.media.attribute.height =
  
  ## Where the media are displayed, indicates the display height
  attribute height { data.outputMeasurement }?
att.media.attribute.scale =
  
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale { data.numeric }?
att.resourced.attributes = att.resourced.attribute.url
att.resourced.attribute.url =
  
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { data.pointer }
att.measurement.attributes =
  att.measurement.attribute.unit,
  att.measurement.attribute.quantity,
  att.measurement.attribute.commodity
att.measurement.attribute.unit =
  
  ## indicates the units used for the measurement, usually using the standard symbol for the desired units.
  ## Suggested values include: 1] m(metre) ; 2] kg(kilogram) ; 3] s(second) ; 4] Hz(hertz) ; 5] Pa(pascal) ; 6] Ω(ohm) ; 7] L(litre) ; 8] t(tonne) ; 9] ha(hectare) ; 10] Å(ångström) ; 11] mL(millilitre) ; 12] cm(centimetre) ; 13] dB(decibel) ; 14] kbit(kilobit) ; 15] Kibit(kibibit) ; 16] kB(kilobyte) ; 17] KiB(kibibyte) ; 18] MB(megabyte) ; 19] MiB(mebibyte) 
  attribute unit {
    
    ## (metre) SI base unit of length
    "m"
    | 
      ## (kilogram) SI base unit of mass
      "kg"
    | 
      ## (second) SI base unit of time
      "s"
    | 
      ## (hertz) SI unit of frequency
      "Hz"
    | 
      ## (pascal) SI unit of pressure or stress
      "Pa"
    | 
      ## (ohm) SI unit of electric resistance
      "Ω"
    | 
      ## (litre) 1 dm³
      "L"
    | 
      ## (tonne) 10³ kg
      "t"
    | 
      ## (hectare) 1 hm²
      "ha"
    | 
      ## (ångström) 10⁻¹⁰ m
      "Å"
    | 
      ## (millilitre) 
      "mL"
    | 
      ## (centimetre) 
      "cm"
    | 
      ## (decibel) see remarks, below
      "dB"
    | 
      ## (kilobit) 10³ or 1000 bits
      "kbit"
    | 
      ## (kibibit) 2¹⁰ or 1024 bits
      "Kibit"
    | 
      ## (kilobyte) 10³ or 1000 bytes
      "kB"
    | 
      ## (kibibyte) 2¹⁰ or 1024 bytes
      "KiB"
    | 
      ## (megabyte) 10⁶ or 1 000 000 bytes
      "MB"
    | 
      ## (mebibyte) 2²⁰ or 1 048 576 bytes
      "MiB"
    | xsd:Name
  }?
att.measurement.attribute.quantity =
  
  ## specifies the number of the specified units that comprise the measurement
  attribute quantity { data.numeric }?
att.measurement.attribute.commodity =
  
  ## indicates the substance that is being measured
  attribute commodity {
    list { data.word+ }
  }?
att.naming.attributes =
  att.canonical.attributes,
  att.naming.attribute.role,
  att.naming.attribute.nymRef
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by this name, for example the occupation of a person, or the status of a place. 
  attribute role { data.enumerated }?
att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { data.pointer+ }
  }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## specifies where this item is placed
  ## Suggested values include: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ## in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name)+
    }
  }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type { data.enumerated }?
att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype { data.enumerated }?
att.pointing.attributes =
  att.pointing.attribute.targetLang,
  att.pointing.attribute.target,
  att.pointing.attribute.evaluate
att.pointing.attribute.targetLang =
  
  ## specifies the language of the content to be found at the destination referenced by target, using a language tag generated according to BCP 47.
  attribute targetLang { data.language }?
sch:pattern [
  id = "targetLang-constraint-targetLang"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "count(@target)"
      "@targetLang can only be used if @target is specified."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { data.pointer+ }
  }?
att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
att.segLike.attributes =
  att.datcat.attributes,
  att.fragmentable.attributes,
  att.segLike.attribute.function
att.segLike.attribute.function =
  
  ## characterizes the function of the segment.
  attribute function { data.enumerated }?
att.sortable.attributes = att.sortable.attribute.sortKey
att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey { data.word }?
att.edition.attributes =
  att.edition.attribute.ed, att.edition.attribute.edRef
att.edition.attribute.ed =
  
  ## (edition) supplies an arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list { data.word+ }
  }?
att.edition.attribute.edRef =
  
  ##  (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { data.pointer+ }
  }?
att.spanning.attributes = att.spanning.attribute.spanTo
att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { data.pointer }?
sch:pattern [
  id = "spanTo-constraint-spanTo-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@spanTo]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"
      "\x{a}" ~
      "The element indicated by @spanTo ("
      sch:value-of [ select = "@spanTo" ]
      ") must follow the current element "
      sch:name [ ]
      "\x{a}" ~
      "         "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.styleDef.attributes =
  att.styleDef.attribute.scheme, att.styleDef.attribute.schemeVersion
att.styleDef.attribute.scheme =
  
  ## identifies the language used to describe the rendition.
  attribute scheme {
    
    ## Cascading Stylesheet Language
    "css"
    | 
      ## Extensible Stylesheet Language Formatting Objects
      "xslfo"
    | 
      ## Informal free text description
      "free"
    | 
      ## A user-defined rendition description language
      "other"
  }?
att.styleDef.attribute.schemeVersion =
  
  ## supplies a version number for the style language provided in scheme.
  attribute schemeVersion { data.versionNumber }?
sch:pattern [
  id = "schemeVersion-constraint-schemeVersionRequiresScheme"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@schemeVersion]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "@scheme and not(@scheme = 'free')"
      "\x{a}" ~
      "              @schemeVersion can only be used if @scheme is specified.\x{a}" ~
      "            "
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
att.tableDecoration.attributes =
  att.tableDecoration.attribute.role,
  att.tableDecoration.attribute.rows,
  att.tableDecoration.attribute.cols
att.tableDecoration.attribute.role =
  
  ## indicates the kind of information held in this cell or in each cell of this row.
  ## Suggested values include: 1] label; 2] data
  [ a:defaultValue = "data" ]
  attribute role {
    
    ## labelling or descriptive information only.
    "label"
    | 
      ## data values.
      "data"
    | xsd:Name
  }?
att.tableDecoration.attribute.rows =
  
  ## indicates the number of rows occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute rows { data.count }?
att.tableDecoration.attribute.cols =
  
  ## (columns) indicates the number of columns occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute cols { data.count }?
att.timed.attributes =
  att.timed.attribute.start, att.timed.attribute.end
att.timed.attribute.start =
  
  ## indicates the location within a temporal alignment at which this element begins.
  attribute start { data.pointer }?
att.timed.attribute.end =
  
  ## indicates the location within a temporal alignment at which this element ends.
  attribute end { data.pointer }?
att.transcriptional.attributes =
  att.editLike.attributes,
  att.transcriptional.attribute.hand,
  att.transcriptional.attribute.status,
  att.transcriptional.attribute.cause,
  att.transcriptional.attribute.seq
att.transcriptional.attribute.hand =
  
  ## signifies the hand of the agent which made the intervention.
  attribute hand { data.pointer }?
att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status { data.enumerated }?
att.transcriptional.attribute.cause =
  
  ## documents the presumed cause for the intervention.
  attribute cause {
    
    ## repeated for the purpose of fixation
    "fix"
    | 
      ## repeated to clarify a previously illegible or badly written text or mark
      "unclear"
  }?
att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { data.count }?
att.translatable.attributes = att.translatable.attribute.versionDate
att.translatable.attribute.versionDate =
  
  ## specifies the date on which the source text was extracted and sent to the translator
  attribute versionDate { data.temporal.w3c }?
model.nameLike.agent = name
model.nameLike.agent_alternation = name
model.nameLike.agent_sequence = name
model.nameLike.agent_sequenceOptional = name?
model.nameLike.agent_sequenceOptionalRepeatable = name*
model.nameLike.agent_sequenceRepeatable = name+
model.segLike = seg
model.hiLike = hi
model.hiLike_alternation = hi
model.hiLike_sequence = hi
model.hiLike_sequenceOptional = hi?
model.hiLike_sequenceOptionalRepeatable = hi*
model.hiLike_sequenceRepeatable = hi+
model.emphLike =
  foreign | emph | mentioned | soCalled | gloss | term | title
model.emphLike_alternation =
  foreign | emph | mentioned | soCalled | gloss | term | title
model.emphLike_sequence =
  foreign, emph, mentioned, soCalled, gloss, term, title
model.emphLike_sequenceOptional =
  foreign?, emph?, mentioned?, soCalled?, gloss?, term?, title?
model.emphLike_sequenceOptionalRepeatable =
  foreign*, emph*, mentioned*, soCalled*, gloss*, term*, title*
model.emphLike_sequenceRepeatable =
  foreign+, emph+, mentioned+, soCalled+, gloss+, term+, title+
model.highlighted = model.hiLike | model.emphLike
model.dateLike = date | time
model.dateLike_alternation = date | time
model.dateLike_sequence = date, time
model.dateLike_sequenceOptional = date?, time?
model.dateLike_sequenceOptionalRepeatable = date*, time*
model.dateLike_sequenceRepeatable = date+, time+
model.dimLike = height | depth | width
model.measureLike = num | measureGrp | dim | height | depth | width
model.measureLike_alternation =
  num | measureGrp | dim | height | depth | width
model.measureLike_sequence = num, measureGrp, dim, height, depth, width
model.measureLike_sequenceOptional =
  num?, measureGrp?, dim?, height?, depth?, width?
model.measureLike_sequenceOptionalRepeatable =
  num*, measureGrp*, dim*, height*, depth*, width*
model.measureLike_sequenceRepeatable =
  num+, measureGrp+, dim+, height+, depth+, width+
model.egLike = notAllowed
model.egLike_alternation = notAllowed
model.egLike_sequence = empty
model.egLike_sequenceOptional = empty
model.egLike_sequenceOptionalRepeatable = empty
model.egLike_sequenceRepeatable = notAllowed
model.graphicLike = media | graphic | formula
model.pPart.msdesc =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
model.pPart.editorial = choice | abbr | expan | ex | am | subst
model.pPart.editorial_alternation =
  choice | abbr | expan | ex | am | subst
model.pPart.editorial_sequence = choice, abbr, expan, ex, am, subst
model.pPart.editorial_sequenceOptional =
  choice?, abbr?, expan?, ex?, am?, subst?
model.pPart.editorial_sequenceOptionalRepeatable =
  choice*, abbr*, expan*, ex*, am*, subst*
model.pPart.editorial_sequenceRepeatable =
  choice+, abbr+, expan+, ex+, am+, subst+
model.pPart.transcriptional =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | app
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_alternation =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | app
  | damage
  | handShift
  | restore
  | supplied
  | surplus
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_sequence =
  sic,
  corr,
  reg,
  orig,
  add,
  del,
  unclear,
  app,
  damage,
  handShift,
  restore,
  supplied,
  surplus,
  mod,
  redo,
  retrace,
  undo
model.pPart.transcriptional_sequenceOptional =
  sic?,
  corr?,
  reg?,
  orig?,
  add?,
  del?,
  unclear?,
  app?,
  damage?,
  handShift?,
  restore?,
  supplied?,
  surplus?,
  mod?,
  redo?,
  retrace?,
  undo?
model.pPart.transcriptional_sequenceOptionalRepeatable =
  sic*,
  corr*,
  reg*,
  orig*,
  add*,
  del*,
  unclear*,
  app*,
  damage*,
  handShift*,
  restore*,
  supplied*,
  surplus*,
  mod*,
  redo*,
  retrace*,
  undo*
model.pPart.transcriptional_sequenceRepeatable =
  sic+,
  corr+,
  reg+,
  orig+,
  add+,
  del+,
  unclear+,
  app+,
  damage+,
  handShift+,
  restore+,
  supplied+,
  surplus+,
  mod+,
  redo+,
  retrace+,
  undo+
model.pPart.edit = model.pPart.editorial | model.pPart.transcriptional
model.linePart =
  model.segLike
  | model.hiLike
  | model.pPart.transcriptional
  | choice
  | zone
  | line
model.ptrLike = ptr | ref
model.global.meta = index | substJoin | listTranspose
model.milestoneLike = milestone | gb | pb | lb | anchor | fw
model.gLike = g
model.biblLike = bibl | listBibl | biblFull | msDesc
model.biblLike_alternation = bibl | listBibl | biblFull | msDesc
model.biblLike_sequence = bibl, listBibl, biblFull, msDesc
model.biblLike_sequenceOptional = bibl?, listBibl?, biblFull?, msDesc?
model.biblLike_sequenceOptionalRepeatable =
  bibl*, listBibl*, biblFull*, msDesc*
model.biblLike_sequenceRepeatable = bibl+, listBibl+, biblFull+, msDesc+
model.headLike = head
model.headLike_alternation = head
model.headLike_sequence = head
model.headLike_sequenceOptional = head?
model.headLike_sequenceOptionalRepeatable = head*
model.headLike_sequenceRepeatable = head+
model.labelLike = desc | label
model.labelLike_alternation = desc | label
model.labelLike_sequence = desc, label
model.labelLike_sequenceOptional = desc?, label?
model.labelLike_sequenceOptionalRepeatable = desc*, label*
model.labelLike_sequenceRepeatable = desc+, label+
model.listLike = \list | table | listApp | listWit
model.listLike_alternation = \list | table | listApp | listWit
model.listLike_sequence = \list, table, listApp, listWit
model.listLike_sequenceOptional = \list?, table?, listApp?, listWit?
model.listLike_sequenceOptionalRepeatable =
  \list*, table*, listApp*, listWit*
model.listLike_sequenceRepeatable = \list+, table+, listApp+, listWit+
model.noteLike = note | witDetail
model.lLike = l
model.lLike_alternation = l
model.lLike_sequence = l
model.lLike_sequenceOptional = l?
model.lLike_sequenceOptionalRepeatable = l*
model.lLike_sequenceRepeatable = l+
model.pLike = p
model.pLike_alternation = p
model.pLike_sequence = p
model.pLike_sequenceOptional = p?
model.pLike_sequenceOptionalRepeatable = p*
model.pLike_sequenceRepeatable = p+
model.stageLike = stage
model.stageLike_alternation = stage
model.stageLike_sequence = stage
model.stageLike_sequenceOptional = stage?
model.stageLike_sequenceOptionalRepeatable = stage*
model.stageLike_sequenceRepeatable = stage+
model.entryPart = notAllowed
model.global.edit = gap | addSpan | damageSpan | delSpan | space
model.divPart = model.lLike | model.pLike | lg | sp
model.placeNamePart = notAllowed
model.placeNamePart_alternation = notAllowed
model.placeNamePart_sequence = empty
model.placeNamePart_sequenceOptional = empty
model.placeNamePart_sequenceOptionalRepeatable = empty
model.placeNamePart_sequenceRepeatable = notAllowed
model.placeStateLike = model.placeNamePart
model.placeStateLike_alternation = model.placeNamePart_alternation
model.placeStateLike_sequence = model.placeNamePart_sequence
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+
model.publicationStmtPart =
  address
  | date
  | publisher
  | pubPlace
  | distributor
  | authority
  | idno
  | availability
model.availabilityPart = licence
model.certLike = notAllowed
model.descLike = desc
model.glossLike = gloss
model.quoteLike = quote | cit
model.quoteLike_alternation = quote | cit
model.quoteLike_sequence = quote, cit
model.quoteLike_sequenceOptional = quote?, cit?
model.quoteLike_sequenceOptionalRepeatable = quote*, cit*
model.quoteLike_sequenceRepeatable = quote+, cit+
model.qLike = model.quoteLike | said | q
model.qLike_alternation = model.quoteLike_alternation | said | q
model.qLike_sequence = model.quoteLike_sequence, said, q
model.qLike_sequenceOptional =
  model.quoteLike_sequenceOptional?, said?, q?
model.qLike_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*, said*, q*
model.qLike_sequenceRepeatable =
  model.quoteLike_sequenceRepeatable+, said+, q+
model.respLike =
  author | editor | respStmt | sponsor | funder | principal
model.divWrapper =
  byline | dateline | argument | epigraph | salute | docAuthor | docDate
model.divTopPart = model.headLike | opener
model.divTop = model.divWrapper | model.divTopPart
model.pLike.front =
  head
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | docEdition
  | docImprint
  | docDate
model.divBottomPart = trailer | closer | signed | postscript
model.divBottom = model.divWrapper | model.divBottomPart
model.titlepagePart =
  graphic
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | docEdition
  | docImprint
  | docDate
model.msQuoteLike =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msItemPart =
  model.biblLike
  | model.quoteLike
  | model.respLike
  | model.msQuoteLike
  | textLang
  | idno
  | filiation
  | msItem
  | msItemStruct
  | decoNote
model.choicePart =
  sic | corr | reg | orig | unclear | abbr | expan | seg | ex | am
model.imprintPart = publisher | biblScope | pubPlace | distributor
model.catDescPart = notAllowed
model.physDescPart_sequenceOptional =
  objectDesc?,
  handDesc?,
  typeDesc?,
  scriptDesc?,
  musicNotation?,
  decoDesc?,
  additions?,
  bindingDesc?,
  sealDesc?,
  accMat?
model.addressLike = address
model.addressLike_alternation = address
model.addressLike_sequence = address
model.addressLike_sequenceOptional = address?
model.addressLike_sequenceOptionalRepeatable = address*
model.addressLike_sequenceRepeatable = address+
model.nameLike = model.nameLike.agent | model.placeStateLike | rs | idno
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.placeStateLike_alternation
  | rs
  | idno
model.nameLike_sequence =
  model.nameLike.agent_sequence, model.placeStateLike_sequence, rs, idno
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.placeStateLike_sequenceOptional?,
  rs?,
  idno?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*,
  rs*,
  idno*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+,
  rs+,
  idno+
model.global =
  model.global.meta
  | model.milestoneLike
  | model.noteLike
  | model.global.edit
  | notatedMusic
  | figure
  | metamark
model.biblPart =
  model.respLike
  | model.imprintPart
  | citedRange
  | bibl
  | relatedItem
  | textLang
  | edition
  | extent
  | msIdentifier
model.frontPart = divGen | titlePage
model.addrPart = model.nameLike | addrLine
model.pPart.data =
  model.dateLike
  | model.measureLike
  | model.addressLike
  | model.nameLike
model.inter =
  model.egLike
  | model.biblLike
  | model.labelLike
  | model.listLike
  | model.stageLike
  | model.qLike
model.common = model.divPart | model.inter
model.phrase =
  model.segLike
  | model.highlighted
  | model.graphicLike
  | model.pPart.msdesc
  | model.pPart.edit
  | model.ptrLike
  | model.pPart.data
model.limitedPhrase =
  model.hiLike
  | model.emphLike
  | model.pPart.msdesc
  | model.pPart.editorial
  | model.ptrLike
  | model.pPart.data
model.divLike = \div
model.divGenLike = divGen
model.div1Like = notAllowed
model.applicationLike = application
model.teiHeaderPart = encodingDesc | profileDesc
model.sourceDescPart = notAllowed
model.encodingDescPart =
  charDecl
  | projectDesc
  | samplingDecl
  | editorialDecl
  | styleDefDecl
  | refsDecl
  | listPrefixDef
  | classDecl
  | geoDecl
  | appInfo
model.editorialDeclPart = notAllowed
model.profileDescPart =
  creation
  | langUsage
  | textClass
  | calendarDesc
  | handNotes
  | listTranspose
att.source.attributes = att.source.attribute.source
att.source.attribute.source =
  
  ##  (pointer to a bibliographical source reference) provides a pointer to the bibliographical source from which a quotation or citation is drawn.
  attribute source {
    list { data.pointer+ }
  }?
model.resourceLike = facsimile | sourceDoc
att.personal.attributes =
  att.naming.attributes,
  att.personal.attribute.full,
  att.personal.attribute.sort
att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
att.personal.attribute.sort =
  
  ## specifies the sort order of the name component in relation to others within the name.
  attribute sort { data.count }?
att.milestoneUnit.attributes = att.milestoneUnit.attribute.unit
att.milestoneUnit.attribute.unit =
  
  ## provides a conventional name for the kind of section changing at this milestone.
  ## Suggested values include: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered
  attribute unit {
    
    ## physical page breaks (synonymous with the pb element).
    "page"
    | 
      ## column breaks.
      "column"
    | 
      ## line breaks (synonymous with the lb element).
      "line"
    | 
      ## any units termed book, liber, etc.
      "book"
    | 
      ## individual poems in a collection.
      "poem"
    | 
      ## cantos or other major sections of a poem.
      "canto"
    | 
      ## changes of speaker or narrator.
      "speaker"
    | 
      ## stanzas within a poem, book, or canto.
      "stanza"
    | 
      ## acts within a play.
      "act"
    | 
      ## scenes within a play or act.
      "scene"
    | 
      ## sections of any kind.
      "section"
    | 
      ## passages not present in the reference edition.
      "absent"
    | 
      ## passages present in the text, but not to be included as part of the reference.
      "unnumbered"
    | xsd:Name
  }
p =
  
  ## (paragraph) marks paragraphs in prose. [3.1.  7.2.5. ]
  element p {
    macro.paraContent,
    att.global.attributes,
    att.declaring.attributes,
    att.fragmentable.attributes,
    empty
  }
foreign =
  
  ## (foreign) identifies a word or phrase as belonging to some language other than that of the surrounding text.  [3.3.2.1. ]
  element foreign { macro.phraseSeq, att.global.attributes, empty }
emph =
  
  ## (emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2.  3.3.2. ]
  element emph { macro.paraContent, att.global.attributes, empty }
hi =
  
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made.  [3.3.2.2.  3.3.2. ]
  element hi { macro.paraContent, att.global.attributes, empty }
said =
  
  ## (speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. [3.3.3. ]
  element said {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.attributes,
    
    ## may be used to indicate whether the quoted matter is regarded as having been vocalized or signed.
    [ a:defaultValue = "unknown" ]
    attribute aloud { data.xTruthValue }?,
    
    ## may be used to indicate whether the quoted matter is regarded as direct or indirect speech.
    [ a:defaultValue = "true" ] attribute direct { data.xTruthValue }?,
    empty
  }
quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3.  4.3.1. ]
  element quote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    att.source.attributes,
    empty
  }
q =
  
  ## (quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. ]
  element q {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.attributes,
    att.source.attributes,
    
    ## may be used to indicate whether the offset passage is spoken or thought, or to characterize it more finely.
    ## Suggested values include: 1] spoken; 2] thought; 3] written; 4] soCalled; 5] foreign; 6] distinct; 7] term; 8] emph; 9] mentioned
    attribute type {
      
      ## representation of speech
      "spoken"
      | 
        ## representation of thought, e.g. internal monologue
        "thought"
      | 
        ## quotation from a written source
        "written"
      | 
        ## authorial distance
        "soCalled"
      | 
        ##
        "foreign"
      | 
        ## linguistically distinct
        "distinct"
      | 
        ## technical term
        "term"
      | 
        ## rhetorically emphasized
        "emph"
      | 
        ## refering to itself, not its normal referant
        "mentioned"
      | xsd:Name
    }?,
    empty
  }
cit =
  
  ## (cited quotation) contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example.  [3.3.3.  4.3.1.  9.3.5.1. ]
  element cit {
    (model.qLike
     | model.egLike
     | model.biblLike
     | model.ptrLike
     | model.global
     | model.entryPart)+,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
mentioned =
  
  ## marks words or phrases mentioned, not used. [3.3.3. ]
  element mentioned { macro.phraseSeq, att.global.attributes, empty }
soCalled =
  
  ## contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. [3.3.3. ]
  element soCalled { macro.phraseSeq, att.global.attributes, empty }
desc =
  
  ## (description) contains a brief description of the object documented by its parent element, including its intended usage, purpose, or application where this is appropriate. [22.4.1. ]
  element desc {
    macro.limitedContent,
    att.global.attributes,
    att.translatable.attributes,
    empty
  }
gloss =
  
  ## identifies a phrase or word used to provide a gloss or definition for some other word or phrase. [3.3.4.  22.4.1. ]
  element gloss {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.translatable.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    att.cReferencing.attributes,
    empty
  }
term =
  
  ## contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.3.4. ]
  element term {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.canonical.attributes,
    att.sortable.attributes,
    att.cReferencing.attributes,
    empty
  }
sic =
  
  ## (Latin for thus or so) contains text reproduced although apparently incorrect or inaccurate. [3.4.1. ]
  element sic {
    macro.paraContent,
    att.global.attributes,
    att.responsibility.attributes,
    empty
  }
corr =
  
  ## (correction) contains the correct form of a passage apparently erroneous in the copy text. [3.4.1. ]
  element corr {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
choice =
  
  ## groups a number of alternative encodings for the same point in a text. [3.4. ]
  element choice {
    (model.choicePart | choice)*, att.global.attributes, empty
  }
reg =
  
  ## (regularization) contains a reading which has been regularized or normalized in some sense. [3.4.2.  12. ]
  element reg {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
orig =
  
  ## (original form) contains a reading which is marked as following the original, rather than being normalized or corrected. [3.4.2.  12. ]
  element orig {
    macro.paraContent,
    att.global.attributes,
    att.responsibility.attributes,
    empty
  }
gap =
  
  ## (gap) indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. [3.4.3. ]
  element gap {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.editLike.attributes,
    
    ## gives the reason for omission. Sample values include sampling, inaudible, irrelevant, cancelled.
    attribute reason {
      list { data.word+ }
    }?,
    
    ## in the case of text omitted from the transcription because of deliberate deletion by an identifiable hand, signifies the hand which made the deletion.
    attribute hand { data.pointer }?,
    
    ## In the case of text omitted because of damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { data.enumerated }?,
    empty
  }
add =
  
  ## (addition) contains letters, words, or phrases inserted in the source text by an author, scribe, annotator, or corrector. [3.4.3. ]
  element add {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
del =
  
  ## (deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, annotator, or corrector. [3.4.3. ]
  element del {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    empty
  }
unclear =
  
  ## contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1.  3.4.3. ]
  element unclear {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indicates why the material is hard to transcribe.
    attribute reason {
      list { data.word+ }
    }?,
    
    ## Where the difficulty in transcription arises from action (partial deletion, etc.) assignable to an identifiable hand, signifies the hand responsible for the action.
    attribute hand { data.pointer }?,
    
    ## Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { data.enumerated }?,
    empty
  }
name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. [3.5.1. ]
  element name {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
rs =
  
  ## (referencing string) contains a general purpose name or referring string. [13.2.1.  3.5.1. ]
  element rs {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
address =
  
  ## contains a postal address, for example of a publisher, an organization, or an individual. [3.5.2.  2.2.4.  3.11.2.4. ]
  element address {
    (model.global*, (model.addrPart, model.global*)+),
    att.global.attributes,
    empty
  }
addrLine =
  
  ## (address line) contains one line of a postal address. [3.5.2.  2.2.4.  3.11.2.4. ]
  element addrLine { macro.phraseSeq, att.global.attributes, empty }
num =
  
  ## (number) contains a number, written in any form. [3.5.3. ]
  element num {
    macro.phraseSeq,
    att.global.attributes,
    att.ranging.attributes,
    
    ## indicates the type of numeric value.
    ## Suggested values include: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage
    attribute type {
      
      ## absolute number, e.g. 21, 21.5
      "cardinal"
      | 
        ## ordinal number, e.g. 21st
        "ordinal"
      | 
        ## fraction, e.g. one half or three-quarters
        "fraction"
      | 
        ## a percentage
        "percentage"
      | xsd:Name
    }?,
    
    ## supplies the value of the number in standard form.
    attribute value { data.numeric }?,
    empty
  }
measureGrp =
  
  ## (measure group) contains a group of dimensional specifications which relate to the same object, for example the height and width of a manuscript page. [10.3.4. ]
  element measureGrp {
    (text | model.gLike | model.measureLike)*,
    att.global.attributes,
    att.measurement.attributes,
    att.typed.attributes,
    empty
  }
date =
  
  ## contains a date in any format. [3.5.4.  2.2.4.  2.5.  3.11.2.4.  15.2.3.  13.3.6. ]
  element date {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
time =
  
  ## contains a phrase defining a time of day in any format. [3.5.4. ]
  element time {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
abbr =
  
  ## (abbreviation) contains an abbreviation of any sort. [3.5.5. ]
  element abbr {
    macro.phraseSeq,
    att.global.attributes,
    att.responsibility.attributes,
    att.typed.attribute.subtype,
    
    ## allows the encoder to classify the abbreviation according to some convenient typology.
    attribute type { data.enumerated }?,
    empty
  }
expan =
  
  ## (expansion) contains the expansion of an abbreviation. [3.5.5. ]
  element expan {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    empty
  }
ptr =
  
  ## (pointer) defines a pointer to another location. [3.6.  16.1. ]
  element ptr {
    empty
    >> sch:pattern [
         id = "ptr-constraint-ptrAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.internetMedia.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.cReferencing.attributes,
    empty
  }
ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.6.  16.1. ]
  element ref {
    macro.paraContent
    >> sch:pattern [
         id = "ref-constraint-refAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.internetMedia.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.cReferencing.attributes,
    empty
  }
\list =
  
  ## (list) contains any sequence of items organized as a list. [3.7. ]
  element list {
    ((model.divTop | model.global)*,
     ((item, model.global*)+
      | (label, model.global*, item, model.global*)+),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.sortable.attributes,
    
    ## describes the form of the list.
    ## Suggested values include: 1] ordered; 2] bulleted; 3] simple; 4] gloss
    [ a:defaultValue = "simple" ]
    attribute type {
      
      ## list items are numbered or lettered. 
      "ordered"
      | 
        ## list items are marked with a bullet or other typographic device. 
        "bulleted"
      | 
        ## list items are not numbered or bulleted. 
        "simple"
      | 
        ## each list item glosses some term or concept, which is given by a label element preceding the list item.
        "gloss"
      | xsd:Name
    }?,
    empty
  }
item =
  
  ## contains one component of a list. [3.7.  2.5. ]
  element item {
    macro.specialPara,
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
label =
  
  ## contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.7. ]
  element label {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.placement.attributes,
    empty
  }
head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. ]
  element head {
    (text
     | lg
     | model.gLike
     | model.phrase
     | model.inter
     | model.lLike
     | model.global)*,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
note =
  
  ## contains a note or annotation. [3.8.1.  2.2.6.  3.11.2.8.  9.3.5.4. ]
  element note {
    macro.specialPara,
    att.global.attributes,
    att.placement.attributes,
    att.pointing.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    
    ## indicates whether the copy text shows the exact place of reference for the note.
    [ a:defaultValue = "true" ] attribute anchored { data.truthValue }?,
    
    ## points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
    attribute targetEnd {
      list { data.pointer+ }
    }?,
    empty
  }
index =
  
  ## (index entry) marks a location to be indexed for whatever purpose. [3.8.2. ]
  element index {
    (term, index?)*,
    att.global.attributes,
    att.spanning.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), supplying a name to specify which index (of several) the index entry belongs to.
    attribute indexName { data.name }?,
    empty
  }
media =
  
  ## indicates the location of any form of external media such as an audio or video clip etc. [3.9. ]
  element media {
    model.descLike*,
    att.typed.attributes,
    att.global.attributes,
    att.media.attribute.width,
    att.media.attribute.height,
    att.media.attribute.scale,
    att.resourced.attributes,
    att.declaring.attributes,
    att.timed.attributes,
    
    ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
    attribute mimeType {
      list { data.word+ }
    },
    empty
  }
graphic =
  
  ## indicates the location of an inline graphic, illustration, or figure. [3.9. ]
  element graphic {
    model.descLike*,
    att.global.attributes,
    att.media.attributes,
    att.resourced.attributes,
    att.declaring.attributes,
    empty
  }
milestone =
  
  ## marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. [3.10.3. ]
  element milestone {
    empty,
    att.global.attributes,
    att.milestoneUnit.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
gb =
  
  ##  (gathering begins) marks the point in a transcribed codex at which a new gathering or quire begins. [3.10.3. ]
  element gb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
pb =
  
  ## (page break) marks the start of a new page in a paginated document. [3.10.3. ]
  element pb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
lb =
  
  ## (line break) marks the start of a new (typographic) line in some edition or version of a text. [3.10.3.  7.2.5. ]
  element lb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
author =
  
  ## in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority.  [3.11.2.2.  2.2.1. ]
  element author {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
editor =
  
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc.  [3.11.2.2. ]
  element editor {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
respStmt =
  
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.11.2.2.  2.2.1.  2.2.2.  2.2.5. ]
  element respStmt {
    ((resp+, model.nameLike.agent+) | (model.nameLike.agent+, resp+)),
    att.global.attributes,
    empty
  }
resp =
  
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.11.2.2.  2.2.1.  2.2.2.  2.2.5. ]
  element resp {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
title =
  
  ## contains a title for any kind of work. [3.11.2.2.  2.2.1.  2.2.5. ]
  element title {
    macro.paraContent,
    att.global.attributes,
    att.canonical.attributes,
    att.typed.attribute.subtype,
    
    ## classifies the title according to some convenient typology.
    ## Sample values include: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    attribute type { data.enumerated }?,
    
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item. 
      "a"
      | 
        ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works 
        "m"
      | 
        ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper 
        "j"
      | 
        ## (series) the title applies to a series of otherwise distinct publications such as a collection 
        "s"
      | 
        ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }
publisher =
  
  ## provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.11.2.4.  2.2.4. ]
  element publisher { macro.phraseSeq, att.global.attributes, empty }
biblScope =
  
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.11.2.4. ]
  element biblScope {
    macro.phraseSeq,
    att.global.attributes,
    
    ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume.
    ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column
    attribute unit {
      
      ## the element contains a volume number.
      "volume"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## the element contains a page number or page range.
        "page"
      | 
        ## the element contains a line number or line range.
        "line"
      | 
        ## the element contains a chapter indication (number and/or title)
        "chapter"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | 
        ## the element identifies a column.
        "column"
      | xsd:Name
    }?,
    
    ## identifies the type of information conveyed by the element, e.g. columns, pages, volume.
    ## Suggested values include: 1] vol(volume) ; 2] issue; 3] pp(pages) ; 4] ll (lines) ; 5] chap(chapter) ; 6] part
    attribute type {
      
      ## (volume) the element contains a volume number.
      "vol"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## (pages) the element contains a page number or page range.
        "pp"
      | 
        ##  (lines) the element contains a line number or line range.
        "ll"
      | 
        ## (chapter) the element contains a chapter indication (number and/or title)
        "chap"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | xsd:Name
    }?,
    
    ## specifies the starting point of the range of units indicated by the unit attribute.
    attribute from { data.word }?,
    
    ## specifies the end-point of the range of units indicated by the unit attribute.
    attribute to { data.word }?,
    empty
  }
citedRange =
  
  ##  (cited range) defines the range of cited content, often represented by pages or other units [3.11.2.4. ]
  element citedRange {
    macro.phraseSeq,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifies the type of information conveyed by the element, e.g. columns, pages, volume.
    ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column
    attribute unit {
      
      ## the element contains a volume number.
      "volume"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## the element contains a page number or page range.
        "page"
      | 
        ## the element contains a line number or line range.
        "line"
      | 
        ## the element contains a chapter indication (number and/or title)
        "chapter"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | 
        ## the element identifies a column.
        "column"
      | xsd:Name
    }?,
    
    ## specifies the starting point of the range of units indicated by the unit attribute.
    attribute from { data.word }?,
    
    ## specifies the end-point of the range of units indicated by the unit attribute.
    attribute to { data.word }?,
    empty
  }
pubPlace =
  
  ## (publication place) contains the name of the place where a bibliographic item was published. [3.11.2.4. ]
  element pubPlace {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged.  [3.11.1.  2.2.7.  15.3.2. ]
  element bibl {
    (text
     | model.gLike
     | model.highlighted
     | model.pPart.data
     | model.pPart.edit
     | model.segLike
     | model.ptrLike
     | model.biblPart
     | model.global)*,
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
listBibl =
  
  ## (citation list) contains a list of bibliographic citations of any kind.  [3.11.1.  2.2.7.  15.3.2. ]
  element listBibl {
    (model.headLike*, (model.biblLike | model.milestoneLike)+),
    att.global.attributes,
    att.sortable.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
relatedItem =
  
  ## contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. [3.11.2.7. ]
  element relatedItem {
    ((model.biblLike | model.ptrLike)?)
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and count( child::* ) > 0"
             "\x{a}" ~
             "If the @target attribute on "
             sch:name [ ]
             " is used, the\x{a}" ~
             "relatedItem element must be empty"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target or child::*"
             "A relatedItem element should have either a 'target' attribute\x{a}" ~
             "        or a child element to indicate the related bibliographic item"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    
    ## points to the related bibliographic element by means of an absolute or relative URI reference
    attribute target { data.pointer }?,
    empty
  }
l =
  
  ## (verse line) contains a single, possibly incomplete, line of verse. [3.12.1.  3.12.  7.2.5. ]
  element l {
    macro.paraContent,
    att.global.attributes,
    att.fragmentable.attributes,
    empty
  }
lg =
  
  ## (line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.12.1.  3.12.  7.2.5. ]
  element lg {
    ((model.divTop | model.global)*,
     (model.lLike | model.stageLike | model.labelLike | lg),
     (model.lLike
      | model.stageLike
      | model.labelLike
      | model.global
      | lg)*,
     (model.divBottom, model.global*)*)
    >> sch:pattern [
         id = "lg-constraint-atleast1oflggapl"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) > 0"
             "An lg element\x{a}" ~
             "        must contain at least one child l, lg or gap element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
sp =
  
  ## (speech) contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. [3.12.2.  3.12.  7.2.2. ]
  element sp {
    (model.global*,
     (speaker, model.global*)?,
     ((lg
       | model.lLike
       | model.pLike
       | model.listLike
       | model.stageLike
       | model.qLike),
      model.global*)+),
    att.global.attributes,
    att.ascribed.attributes,
    empty
  }
speaker =
  
  ## contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. [3.12.2. ]
  element speaker { macro.phraseSeq, att.global.attributes, empty }
stage =
  
  ## (stage direction) contains any kind of stage direction within a dramatic text or fragment. [3.12.2.  3.12.  7.2.4. ]
  element stage {
    macro.specialPara,
    att.ascribed.attributes,
    att.global.attributes,
    
    ## indicates the kind of stage direction.
    ## Suggested values include: 1] setting; 2] entrance; 3] exit; 4] business; 5] novelistic; 6] delivery; 7] modifier; 8] location; 9] mixed
    attribute type {
      
      ## describes a setting.
      "setting"
      | 
        ## describes an entrance.
        "entrance"
      | 
        ## describes an exit.
        "exit"
      | 
        ## describes stage business.
        "business"
      | 
        ## is a narrative, motivating stage direction.
        "novelistic"
      | 
        ## describes how a character speaks.
        "delivery"
      | 
        ## gives some detail about a character.
        "modifier"
      | 
        ## describes a location.
        "location"
      | 
        ## more than one of the above
        "mixed"
      | xsd:Name
    }?,
    empty
  }
teiCorpus =
  
  ## contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more TEI elements, each containing a single text header and a text. [4.  15.1. ]
  element teiCorpus {
    (teiHeader,
     ((model.resourceLike+, (TEI | teiCorpus)*)
      | (TEI | teiCorpus)+)),
    att.global.attributes,
    
    ## The version of the TEI scheme
    [ a:defaultValue = "5.0" ] attribute version { data.version }?,
    empty
  }
divGen =
  
  ## (automatically generated text division) indicates the location at which a textual division generated automatically by a text-processing application is to appear. [3.8.2. ]
  element divGen {
    model.headLike*,
    att.global.attributes,
    
    ## specifies what type of generated text division (e.g. index, table of contents, etc.) is to appear.
    ## Sample values include: 1] index; 2] toc; 3] figlist; 4] tablist
    attribute type { data.enumerated }?,
    empty
  }
textLang =
  
  ## (text language) describes the languages and writing systems identified within the bibliographic work being described, rather than its description.  [3.11.2.4.  10.6.6. ]
  element textLang {
    macro.phraseSeq,
    att.global.attributes,
    
    ## (main language) supplies a code which identifies the chief language used in the bibliographic work.
    attribute mainLang { data.language }?,
    
    ## (other languages) one or more codes identifying any other languages used in the bibliographic work.
    attribute otherLangs {
      list { data.language* }
    }?,
    empty
  }
table =
  
  ## contains text displayed in tabular form, in rows and columns. [14.1.1. ]
  element table {
    ((model.headLike | model.global)*,
     ((row, model.global*)+ | (model.graphicLike, model.global*)+),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    
    ## indicates the number of rows in the table.
    attribute rows { data.count }?,
    
    ## (columns) indicates the number of columns in each row of the table.
    attribute cols { data.count }?,
    empty
  }
row =
  
  ## contains one row of a table.  [14.1.1. ]
  element row {
    cell+, att.global.attributes, att.tableDecoration.attributes, empty
  }
cell =
  
  ## contains one cell of a table.  [14.1.1. ]
  element cell {
    macro.specialPara,
    att.global.attributes,
    att.tableDecoration.attributes,
    empty
  }
formula =
  
  ## contains a mathematical or other formula. [14.2. ]
  element formula {
    (text | model.graphicLike | model.hiLike)*,
    att.global.attributes,
    
    ## names the notation used for the content of the element.
    attribute notation { data.enumerated }?,
    empty
  }
notatedMusic =
  
  ## encodes the presence of music notation in a text. Some MEI elements are allowed within. [14.3. ]
  element notatedMusic {
    (model.labelLike | model.ptrLike | graphic)*,
    (mei | mei_music | mdiv | layer)?,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
figure =
  
  ## groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. ]
  element figure {
    (model.headLike
     | model.common
     | figDesc
     | model.graphicLike
     | model.global
     | model.divBottom)*,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
figDesc =
  
  ## (description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. ]
  element figDesc { macro.limitedContent, att.global.attributes, empty }
g =
  
  ## (character or glyph) represents a glyph, or a non-standard character. [5. ]
  element g {
    text,
    att.global.attributes,
    att.typed.attributes,
    
    ## points to a description of the character or glyph intended.
    attribute ref { data.pointer }?,
    empty
  }
char =
  
  ## (character) provides descriptive information about a character.  [5.2. ]
  element char {
    (charName?,
     model.descLike*,
     charProp*,
     mapping*,
     figure*,
     model.graphicLike*,
     model.noteLike*),
    att.global.attributes,
    empty
  }
charName =
  
  ## (character name) contains the name of a character, expressed following Unicode conventions.  [5.2. ]
  element charName { text, att.global.attributes, empty }
charProp =
  
  ## (character property) provides a name and value for some property of the parent character or glyph.  [5.2. ]
  element charProp {
    ((unicodeName | localName), value),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
charDecl =
  
  ## (character declarations) provides information about nonstandard characters and glyphs.  [5.2. ]
  element charDecl {
    (desc?, (char | glyph)+),
    att.global.attributes,
    empty
  }
glyph =
  
  ## (character glyph) provides descriptive information about a character glyph.  [5.2. ]
  element glyph {
    (glyphName?,
     model.descLike*,
     charProp*,
     mapping*,
     figure*,
     model.graphicLike*,
     model.noteLike*),
    att.global.attributes,
    empty
  }
glyphName =
  
  ## (character glyph name) contains the name of a glyph, expressed following Unicode conventions for character names.  [5.2. ]
  element glyphName { text, att.global.attributes, empty }
localName =
  
  ## (locally-defined property name) contains a locally defined name for some property.  [5.2.1. ]
  element localName { text, att.global.attributes, empty }
mapping =
  
  ## (character mapping) contains one or more characters which are related to the parent character or glyph in some respect, as specified by the type attribute. [5.2. ]
  element mapping {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
unicodeName =
  
  ## (unicode property name) contains the name of a registered Unicode normative or informative property.  [5.2.1. ]
  element unicodeName {
    text,
    att.global.attributes,
    
    ## specifies the version number of the Unicode Standard in which this property name is defined.
    attribute version { data.version }?,
    empty
  }
value =
  
  ## (value) contains a single value for some property, attribute, or other analysis. [5.2.1. ]
  element value { macro.xtext, att.global.attributes, empty }
teiHeader =
  
  ## (TEI header) supplies the descriptive and declarative information making up an electronic title page prefixed to every TEI-conformant text. [2.1.1.  15.1. ]
  element teiHeader {
    (fileDesc, model.teiHeaderPart*, revisionDesc?),
    att.global.attributes,
    
    ## specifies the kind of document to which the header is attached, for example whether it is a corpus or individual text.
    ## Sample values include: 1] text; 2] corpus
    [ a:defaultValue = "text" ] attribute type { data.enumerated }?,
    empty
  }
fileDesc =
  
  ## (file description) contains a full bibliographic description of an electronic file. [2.2.  2.1.1. ]
  element fileDesc {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt?,
      notesStmt?),
     sourceDesc+),
    att.global.attributes,
    empty
  }
titleStmt =
  
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1.  2.2. ]
  element titleStmt {
    (title+, model.respLike*), att.global.attributes, empty
  }
sponsor =
  
  ## specifies the name of a sponsoring organization or institution. [2.2.1. ]
  element sponsor {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
funder =
  
  ## (funding body) specifies the name of an individual, institution, or organization responsible for the funding of a project or text. [2.2.1. ]
  element funder {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
principal =
  
  ## (principal researcher) supplies the name of the principal researcher responsible for the creation of an electronic text. [2.2.1. ]
  element principal {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
editionStmt =
  
  ## (edition statement) groups information relating to one edition of a text. [2.2.2.  2.2. ]
  element editionStmt {
    (model.pLike+ | (edition, model.respLike*)),
    att.global.attributes,
    empty
  }
edition =
  
  ## (edition) describes the particularities of one edition of a text. [2.2.2. ]
  element edition { macro.phraseSeq, att.global.attributes, empty }
extent =
  
  ## describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. [2.2.3.  2.2.  3.11.2.4.  10.7.1. ]
  element extent { macro.phraseSeq, att.global.attributes, empty }
publicationStmt =
  
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text.  [2.2.4.  2.2. ]
  element publicationStmt {
    (model.pLike+ | model.publicationStmtPart+),
    att.global.attributes,
    empty
  }
distributor =
  
  ## supplies the name of a person or other agency responsible for the distribution of a text. [2.2.4. ]
  element distributor { macro.phraseSeq, att.global.attributes, empty }
authority =
  
  ## (release authority) supplies the name of a person or other agency responsible for making a work available, other than a publisher or distributor. [2.2.4. ]
  element authority {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
idno =
  
  ## (identifier) supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. [2.2.4.  2.2.5.  3.11.2.4. ]
  element idno {
    (text | model.gLike | idno)*,
    att.global.attributes,
    att.sortable.attributes,
    
    ## categorizes the identifier, for example as an ISBN, Social Security number, etc. 
    attribute type { data.enumerated }?,
    empty
  }
availability =
  
  ## supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. [2.2.4. ]
  element availability {
    (model.availabilityPart | model.pLike)+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## supplies a code identifying the current availability of the text. 
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text is freely available. 
      "free"
      | 
        ## the status of the text is unknown. 
        "unknown"
      | 
        ## the text is not freely available. 
        "restricted"
    }?,
    empty
  }
licence =
  
  ## contains information about a licence or other legal agreement applicable to the text. [2.2.4. ]
  element licence {
    macro.specialPara,
    att.global.attributes,
    att.pointing.attributes,
    att.datable.attributes,
    empty
  }
seriesStmt =
  
  ## (series statement) groups information about the series, if any, to which a publication belongs. [2.2.5.  2.2. ]
  element seriesStmt {
    (model.pLike+
     | (title+, (editor | respStmt)*, (idno | biblScope)*)),
    att.global.attributes,
    empty
  }
notesStmt =
  
  ## (notes statement) collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. [2.2.6.  2.2. ]
  element notesStmt {
    (model.noteLike | relatedItem)+, att.global.attributes, empty
  }
sourceDesc =
  
  ## (source description) describes the source from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. ]
  element sourceDesc {
    (model.pLike+
     | (model.biblLike | model.sourceDescPart | model.listLike)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
biblFull =
  
  ## (fully-structured bibliographic citation) contains a fully-structured bibliographic citation, in which all components of the TEI file description are present. [3.11.1.  2.2.  2.2.7.  15.3.2. ]
  element biblFull {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt?,
      notesStmt?),
     sourceDesc*),
    att.global.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
encodingDesc =
  
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3.  2.1.1. ]
  element encodingDesc {
    (model.encodingDescPart | model.pLike)+,
    att.global.attributes,
    empty
  }
projectDesc =
  
  ## (project description) describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. [2.3.1.  2.3.  15.3.2. ]
  element projectDesc {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
samplingDecl =
  
  ## (sampling declaration) contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. [2.3.2.  2.3.  15.3.2. ]
  element samplingDecl {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
editorialDecl =
  
  ## (editorial practice declaration) provides details of editorial principles and practices applied during the encoding of a text. [2.3.3.  2.3.  15.3.2. ]
  element editorialDecl {
    (model.pLike | model.editorialDeclPart)+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
styleDefDecl =
  
  ##  (style definition language declaration) specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. [2.3.5. ]
  element styleDefDecl {
    model.pLike*,
    att.global.attributes,
    att.declarable.attributes,
    att.styleDef.attributes,
    empty
  }
refsDecl =
  
  ## (references declaration) specifies how canonical references are constructed for this text. [2.3.6.3.  2.3.  2.3.6. ]
  element refsDecl {
    (model.pLike+ | cRefPattern+ | refState+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
cRefPattern =
  
  ## (canonical reference pattern) specifies an expression and replacement pattern for transforming a canonical reference into a URI.  [2.3.6.3.  2.3.6.  2.3.6.2. ]
  element cRefPattern {
    model.pLike*,
    att.global.attributes,
    att.patternReplacement.attributes,
    empty
  }
att.patternReplacement.attributes =
  att.patternReplacement.attribute.matchPattern,
  att.patternReplacement.attribute.replacementPattern
att.patternReplacement.attribute.matchPattern =
  
  ## specifies a regular expression against which the values of other attributes can be matched.
  attribute matchPattern { data.pattern }
att.patternReplacement.attribute.replacementPattern =
  
  ## specifies a replacement pattern which, once subpattern substitution has been performed, provides a URI.
  attribute replacementPattern { data.replacement }
prefixDef =
  
  ##  (prefixing scheme used in data.pointer values) defines a prefixing scheme used in data.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. [16.2.3. ]
  element prefixDef {
    model.pLike*,
    att.global.attributes,
    att.patternReplacement.attributes,
    
    ## supplies the identifier which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.
    attribute ident { data.name },
    empty
  }
listPrefixDef =
  
  ##  (list of prefix definitions) contains a list of definitions of prefixing schemes used in data.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. [16.2.3. ]
  element listPrefixDef {
    (prefixDef | listPrefixDef)+, att.global.attributes, empty
  }
refState =
  
  ## (reference state) specifies one component of a canonical reference defined by the milestone method. [2.3.6.3.  2.3.6. ]
  element refState {
    empty,
    att.global.attributes,
    att.milestoneUnit.attributes,
    att.edition.attributes,
    
    ## specifies the fixed length of the reference component.
    attribute length { data.count }?,
    
    ## (delimiter) supplies a delimiting string following the reference component.
    attribute delim { data.text }?,
    empty
  }
classDecl =
  
  ## (classification declarations) contains one or more taxonomies defining any classificatory codes used elsewhere in the text. [2.3.7.  2.3. ]
  element classDecl { taxonomy+, att.global.attributes, empty }
taxonomy =
  
  ## defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy. [2.3.7. ]
  element taxonomy {
    ((model.glossLike | model.descLike)*
     | category+
     | (model.biblLike, category*)),
    att.global.attributes,
    empty
  }
category =
  
  ## contains an individual descriptive category, possibly nested within a superordinate category, within a user-defined taxonomy. [2.3.7. ]
  element category {
    ((catDesc+ | (model.descLike | model.glossLike)*),
     category*),
    att.global.attributes,
    empty
  }
catDesc =
  
  ## (category description) describes some category within a taxonomy or text typology, either in the form of a brief prose description or in terms of the situational parameters used by the TEI formal textDesc. [2.3.7. ]
  element catDesc {
    (text | model.limitedPhrase | model.catDescPart)*,
    att.global.attributes,
    empty
  }
geoDecl =
  
  ## (geographic coordinates declaration) documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. [2.3.8. ]
  element geoDecl {
    macro.phraseSeq,
    att.global.attributes,
    att.declarable.attributes,
    
    ## supplies a commonly used code name for the datum employed.
    ## Suggested values include: 1] WGS84(World Geodetic System) ; 2] MGRS(Military Grid Reference System) ; 3] OSGB36(ordnance survey great britain) ; 4] ED50(European Datum coordinate system) 
    [ a:defaultValue = "WGS84" ]
    attribute datum {
      
      ## (World Geodetic System) a pair of numbers to be interpreted as latitude followed by longitude according to the World Geodetic System.
      "WGS84"
      | 
        ## (Military Grid Reference System) the values supplied are geospatial entity object codes, based on
        "MGRS"
      | 
        ## (ordnance survey great britain) the value supplied is to be interpreted as a British National Grid Reference.
        "OSGB36"
      | 
        ## (European Datum coordinate system) the value supplied is to be interpreted as latitude followed by longitude according to the European Datum coordinate system.
        "ED50"
      | xsd:Name
    }?,
    empty
  }
appInfo =
  
  ## (application information) records information about an application which has edited the TEI file.  [2.3.10. ]
  element appInfo {
    model.applicationLike+, att.global.attributes, empty
  }
application =
  
  ## provides information about an application which has acted upon the document. [2.3.10. ]
  element application {
    (model.labelLike+, (model.ptrLike* | model.pLike*)),
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ## supplies an identifier for the application, independent of its version number or display name.
    attribute ident { data.name },
    
    ## supplies a version number for the application, independent of its identifier or display name.
    attribute version { data.versionNumber },
    empty
  }
profileDesc =
  
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. [2.4.  2.1.1. ]
  element profileDesc {
    model.profileDescPart*, att.global.attributes, empty
  }
creation =
  
  ## contains information about the creation of a text. [2.4.1.  2.4. ]
  element creation {
    (text | model.limitedPhrase | listChange)*,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
langUsage =
  
  ## (language usage) describes the languages, sublanguages, registers, dialects, etc. represented within a text. [2.4.2.  2.4.  15.3.2. ]
  element langUsage {
    language+, att.global.attributes, att.declarable.attributes, empty
  }
language =
  
  ## characterizes a single language or sublanguage used within a text. [2.4.2. ]
  element language {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## (identifier) Supplies a language code constructed as defined in BCP 47 which is used to identify the language documented by this element, and which is referenced by the global xml:lang attribute.
    attribute ident { data.language },
    
    ## specifies the approximate percentage (by volume) of the text which uses this language. 
    attribute usage {
      xsd:nonNegativeInteger { maxInclusive = "100" }
    }?,
    empty
  }
textClass =
  
  ## (text classification) groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. [2.4.3. ]
  element textClass {
    (classCode | catRef | keywords)*,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
keywords =
  
  ## contains a list of keywords or phrases identifying the topic or nature of a text. [2.4.3. ]
  element keywords {
    (term+ | \list),
    att.global.attributes,
    
    ## identifies the controlled vocabulary within which the set of keywords concerned is defined. 
    attribute scheme { data.pointer }?,
    empty
  }
classCode =
  
  ## (classification code) contains the classification code used for this text in some standard classification system. [2.4.3. ]
  element classCode {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## identifies the classification system or taxonomy in use.
    attribute scheme { data.pointer },
    empty
  }
catRef =
  
  ## (category reference) specifies one or more defined categories within some taxonomy or text typology. [2.4.3. ]
  element catRef {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifies the classification scheme within which the set of categories concerned is defined 
    attribute scheme { data.pointer }?,
    empty
  }
calendarDesc =
  
  ## (calendar description) contains a description of the calendar system used in any dating expression found in the text. [2.4.  2.4.4. ]
  element calendarDesc { calendar+, att.global.attributes, empty }
calendar =
  
  ## describes a calendar or dating system used in a dating formula in the text. [2.4.4. ]
  element calendar {
    model.pLike+, att.global.attributes, att.pointing.attributes, empty
  }
revisionDesc =
  
  ## (revision description) summarizes the revision history for a file. [2.5.  2.1.1. ]
  element revisionDesc {
    (\list | listChange | change+),
    att.global.attributes,
    att.docStatus.attributes,
    empty
  }
change =
  
  ## documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. [2.5.  2.4.1. ]
  element change {
    macro.specialPara,
    att.ascribed.attributes,
    att.datable.attributes,
    att.docStatus.attributes,
    att.global.attributes,
    att.typed.attributes,
    
    ## points to one or more elements that belong to this change.
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
typeNote =
  
  ## describes a particular font or other significant typographic feature distinguished within the description of a printed resource. [10.7.2. ]
  element typeNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
scriptNote =
  
  ## describes a particular script distinguished within the description of a manuscript or similar resource. [10.7.2. ]
  element scriptNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
listChange =
  
  ## groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text.  [2.5.  11.7. ]
  element listChange {
    (listChange | change)+,
    att.global.attributes,
    att.sortable.attributes,
    
    ## indicates whether the ordering of its child change elements is to be considered significant or not
    [ a:defaultValue = "true" ] attribute ordered { data.truthValue }?,
    empty
  }
anchor =
  
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element. [8.4.2.  16.4. ]
  element anchor {
    empty, att.global.attributes, att.typed.attributes, empty
  }
seg =
  
  ## (arbitrary segment) represents any segmentation of text below the chunk level. [16.3.  6.2.  7.2.5. ]
  element seg {
    macro.paraContent,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    att.responsibility.attributes,
    empty
  }
att.global.linking.attributes =
  att.global.linking.attribute.corresp,
  att.global.linking.attribute.synch,
  att.global.linking.attribute.sameAs,
  att.global.linking.attribute.copyOf,
  att.global.linking.attribute.next,
  att.global.linking.attribute.prev,
  att.global.linking.attribute.exclude,
  att.global.linking.attribute.select
att.global.linking.attribute.corresp =
  
  ## (corresponds) points to elements that correspond to the current element in some way.
  attribute corresp {
    list { data.pointer+ }
  }?
att.global.linking.attribute.synch =
  
  ## (synchronous) points to elements that are synchronous with the current element.
  attribute synch {
    list { data.pointer+ }
  }?
att.global.linking.attribute.sameAs =
  
  ## points to an element that is the same as the current element.
  attribute sameAs { data.pointer }?
att.global.linking.attribute.copyOf =
  
  ## points to an element of which the current element is a copy.
  attribute copyOf { data.pointer }?
att.global.linking.attribute.next =
  
  ## points to the next element of a virtual aggregate of which the current element is part.
  attribute next { data.pointer }?
att.global.linking.attribute.prev =
  
  ## (previous) points to the previous element of a virtual aggregate of which the current element is part.
  attribute prev { data.pointer }?
att.global.linking.attribute.exclude =
  
  ## points to elements that are in exclusive alternation with the current element.
  attribute exclude {
    list { data.pointer+ }
  }?
att.global.linking.attribute.select =
  
  ## selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.
  attribute select {
    list { data.pointer+ }
  }?
msDesc =
  
  ## (manuscript description) contains a description of a single identifiable manuscript or other text-bearing object. [10.1. ]
  element msDesc {
    (msIdentifier,
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    empty
  }
catchwords =
  
  ## describes the system used to ensure correct ordering of the quires making up a codex or incunable, typically by means of annotations at the foot of the page. [10.3.7. ]
  element catchwords { macro.phraseSeq, att.global.attributes, empty }
dimensions =
  
  ## contains a dimensional specification. [10.3.4. ]
  element dimensions {
    ((dim | model.dimLike)*)
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:width)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:height)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:depth)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.dimensions.attributes,
    
    ## indicates which aspect of the object is being measured. 
    ## Sample values include: 1] leaves; 2] ruled; 3] pricked; 4] written; 5] miniatures; 6] binding; 7] box
    attribute type { data.enumerated }?,
    empty
  }
dim =
  
  ## contains any single measurement forming part of a dimensional specification of some sort. [10.3.4. ]
  element dim {
    macro.xtext,
    att.global.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
height =
  
  ## contains a measurement measured along the axis at right angles to the bottom of the written surface, i.e. parallel to the spine for a codex or book.  [10.3.4. ]
  element height {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
depth =
  
  ## contains a measurement measured across the spine of a book or codex, or (for other text-bearing objects) perpendicular to the measurement given by the width element. [10.3.4. ]
  element depth {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
width =
  
  ## contains a measurement measured along the axis parallel to the bottom of the written surface, i.e. perpendicular to the spine of a book or codex.  [10.3.4. ]
  element width {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
heraldry =
  
  ## contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc.  [10.3.8. ]
  element heraldry { macro.phraseSeq, att.global.attributes, empty }
locus =
  
  ## defines a location within a manuscript or manuscript part, usually as a (possibly discontinuous) sequence of folio references.  [10.3.5. ]
  element locus {
    macro.xtext,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifies the foliation scheme in terms of which the location is being specified.
    attribute scheme { data.pointer }?,
    
    ## specifies the starting point of the location in a normalized form.
    attribute from { data.word }?,
    
    ## specifies the end-point of the location in a normalized form.
    attribute to { data.word }?,
    empty
  }
locusGrp =
  
  ## groups a number of locations which together form a distinct but discontinuous item within a manuscript or manuscript part, according to a specific foliation.  [10.3.5. ]
  element locusGrp {
    locus+,
    att.global.attributes,
    
    ## identifies the foliation scheme in terms of which all the locations contained by the group are specified.
    attribute scheme { data.pointer }?,
    empty
  }
material =
  
  ## contains a word or phrase describing the material of which the object being described is composed.  [10.3.2. ]
  element material {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
objectType =
  
  ## contains a word or phrase describing the type of object being referred to.  [10.3.2. ]
  element objectType {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
origDate =
  
  ## (origin date) contains any form of date, used to identify the date of origin for a manuscript or manuscript part.  [10.3.1. ]
  element origDate {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
origPlace =
  
  ## (origin place) contains any form of place name, used to identify the place of origin for a manuscript or manuscript part.  [10.3.1. ]
  element origPlace {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
secFol =
  
  ## (second folio) marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it.  [10.3.7. ]
  element secFol { macro.phraseSeq, att.global.attributes, empty }
signatures =
  
  ## contains discussion of the leaf or quire signatures found within a codex. [10.3.7. ]
  element signatures { macro.phraseSeq, att.global.attributes, empty }
stamp =
  
  ## contains a word or phrase describing a stamp or similar device. [10.3.3. ]
  element stamp {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
watermark =
  
  ## contains a word or phrase describing a watermark or similar device. [10.3.3. ]
  element watermark { macro.phraseSeq, att.global.attributes, empty }
msIdentifier =
  
  ## (manuscript identifier) contains the information required to identify the manuscript being described.  [10.4. ]
  element msIdentifier {
    ((model.placeNamePart_sequenceOptional,
      institution?,
      repository?,
      collection*,
      idno?),
     (msName | altIdentifier)*)
    >> sch:pattern [
         id = "msIdentifier-constraint-msId_minimal"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:msIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(parent::tei:msPart) and       (local-name(*[1])='idno' or       local-name(*[1])='altIdentifier' or       normalize-space(.)='')"
             "An msIdentifier must contain either a repository or location of some type, or a manuscript name"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
institution =
  
  ## contains the name of an organization such as a university or library, with which a manuscript is identified, generally its holding institution. [10.4. ]
  element institution {
    macro.xtext, att.global.attributes, att.naming.attributes, empty
  }
repository =
  
  ## contains the name of a repository within which manuscripts are stored, possibly forming part of an institution. [10.4. ]
  element repository {
    macro.xtext, att.global.attributes, att.naming.attributes, empty
  }
collection =
  
  ## contains the name of a collection of manuscripts, not necessarily located within a single repository.  [10.4. ]
  element collection {
    macro.xtext,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
altIdentifier =
  
  ## (alternative identifier) contains an alternative or former structured identifier used for a manuscript, such as a former catalogue number. [10.4. ]
  element altIdentifier {
    (model.placeNamePart_sequenceOptional,
     institution?,
     repository?,
     collection?,
     idno,
     note?),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
msName =
  
  ## (alternative name) contains any form of unstructured alternative name used for a manuscript, such as an ocellus nominum, or nickname. [10.4. ]
  element msName {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
colophon =
  
  ## contains the colophon of a manuscript item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript. [10.6.1. ]
  element colophon { macro.phraseSeq, att.global.attributes, empty }
explicit =
  
  ## contains the explicit of a manuscript item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. [10.6.1. ]
  element explicit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
filiation =
  
  ## contains information concerning the manuscript's filiation, i.e. its relationship to other surviving manuscripts of the same text, its protographs, antigraphs and apographs. [10.6.1. ]
  element filiation {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
finalRubric =
  
  ## contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. [10.6.1. ]
  element finalRubric {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
incipit =
  
  ## contains the incipit of a manuscript item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. [10.6.1. ]
  element incipit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
msContents =
  
  ## (manuscript contents) describes the intellectual content of a manuscript or manuscript part, either as a series of paragraphs or as a series of structured manuscript items. [10.6. ]
  element msContents {
    (model.pLike+
     | (summary?, textLang?, titlePage?, (msItem | msItemStruct)*)),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this object.
    attribute class {
      list { data.pointer+ }
    }?,
    empty
  }
msItem =
  
  ## (manuscript item) describes an individual work or item within the intellectual content of a manuscript or manuscript part.  [10.6.1. ]
  element msItem {
    ((locus | locusGrp)*,
     (model.pLike+
      | (model.titlepagePart | model.msItemPart | model.global)+)),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this item
    attribute class {
      list { data.pointer+ }
    }?,
    empty
  }
msItemStruct =
  
  ## (structured manuscript item) contains a structured description for an individual work or item within the intellectual content of a manuscript or manuscript part. [10.6.1. ]
  element msItemStruct {
    ((locus | locusGrp)?,
     (model.pLike+
      | (author*,
         respStmt*,
         title*,
         rubric?,
         incipit?,
         msItemStruct*,
         explicit?,
         finalRubric?,
         colophon*,
         decoNote*,
         listBibl*,
         (bibl)*,
         model.noteLike*,
         textLang?))),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this item
    attribute class {
      list { data.pointer+ }
    }?,
    empty
  }
rubric =
  
  ## contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, usually in red ink, or by use of different size or type of script, or some other such visual device. [10.6.1. ]
  element rubric {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
summary =
  
  ## contains an overview of the available information concerning some aspect of an item (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. [10.6. ]
  element summary { macro.phraseSeq, att.global.attributes, empty }
att.msExcerpt.attributes = att.msExcerpt.attribute.defective
att.msExcerpt.attribute.defective =
  
  ## indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.
  [ a:defaultValue = "false" ] attribute defective { data.xTruthValue }?
physDesc =
  
  ## (physical description) contains a full physical description of a manuscript or manuscript part, optionally subdivided using more specialized elements from the model.physDescPart class. [10.7. ]
  element physDesc {
    (model.pLike*, model.physDescPart_sequenceOptional),
    att.global.attributes,
    empty
  }
objectDesc =
  
  ## contains a description of the physical components making up the object which is being described. [10.7.1. ]
  element objectDesc {
    (model.pLike+ | (supportDesc?, layoutDesc?)),
    att.global.attributes,
    
    ## a short project-specific name identifying the physical form of the carrier, for example as a codex, roll, fragment, partial leaf, cutting etc.
    attribute form { data.enumerated }?,
    empty
  }
supportDesc =
  
  ## (support description) groups elements describing the physical support for the written part of a manuscript. [10.7.1. ]
  element supportDesc {
    (model.pLike+
     | (support?, extent?, foliation*, collation?, condition?)),
    att.global.attributes,
    
    ## a short project-defined name for the material composing the majority of the support
    ## Suggested values include: 1] paper (paper) ; 2] parch(parchment) ; 3] mixed
    attribute material {
      
      ##  (paper) 
      "paper"
      | 
        ## (parchment) 
        "parch"
      | 
        ##
        "mixed"
      | xsd:Name
    }?,
    empty
  }
support =
  
  ## contains a description of the materials etc. which make up the physical support for the written part of a manuscript. [10.7.1. ]
  element support { macro.specialPara, att.global.attributes, empty }
collation =
  
  ## contains a description of how the leaves or bifolia are physically arranged. [10.7.1. ]
  element collation { macro.specialPara, att.global.attributes, empty }
foliation =
  
  ## describes the numbering system or systems used to count the leaves or pages in a codex. [10.7.1.4. ]
  element foliation { macro.specialPara, att.global.attributes, empty }
condition =
  
  ## contains a description of the physical condition of the manuscript.  [10.7.1.5. ]
  element condition { macro.specialPara, att.global.attributes, empty }
layoutDesc =
  
  ## (layout description) collects the set of layout descriptions applicable to a manuscript. [10.7.2. ]
  element layoutDesc {
    (model.pLike+ | (summary?, layout+)),
    att.global.attributes,
    empty
  }
layout =
  
  ## describes how text is laid out on the page, including information about any ruling, pricking, or other evidence of page-preparation techniques. [10.7.2. ]
  element layout {
    macro.specialPara,
    att.global.attributes,
    
    ## specifies the number of columns per page
    attribute columns {
      list { data.count, data.count? }
    }?,
    
    ## specifies the number of ruled lines per column
    attribute ruledLines {
      list { data.count, data.count? }
    }?,
    
    ## specifies the number of written lines per column
    attribute writtenLines {
      list { data.count, data.count? }
    }?,
    empty
  }
handDesc =
  
  ## (description of hands) contains a description of all the different kinds of writing used in a manuscript. [10.7.2. ]
  element handDesc {
    (model.pLike+ | summary?),
    att.global.attributes,
    
    ## specifies the number of distinct hands identified within the manuscript
    attribute hands { data.count }?,
    empty
  }
typeDesc =
  
  ## contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. [10.7.2.1. ]
  element typeDesc {
    (model.pLike+ | (summary?, typeNote+)),
    att.global.attributes,
    empty
  }
scriptDesc =
  
  ## contains a description of the scripts used in a manuscript or similar source. [10.7.2.1. ]
  element scriptDesc {
    (model.pLike+ | (summary?, scriptNote+)),
    att.global.attributes,
    empty
  }
musicNotation =
  
  ## contains description of type of musical notation. [10.7.2. ]
  element musicNotation {
    macro.specialPara, att.global.attributes, empty
  }
decoDesc =
  
  ## (decoration description) contains a description of the decoration of a manuscript, either as a sequence of paragraphs, or as a sequence of topically organized decoNote elements. [10.7.3. ]
  element decoDesc {
    (model.pLike+ | (summary?, decoNote+)),
    att.global.attributes,
    empty
  }
decoNote =
  
  ## (note on decoration) contains a note describing either a decorative component of a manuscript, or a fairly homogenous class of such components. [10.7.3. ]
  element decoNote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
additions =
  
  ## contains a description of any significant additions found within a manuscript, such as marginalia or other annotations.  [10.7.2. ]
  element additions { macro.specialPara, att.global.attributes, empty }
bindingDesc =
  
  ## (binding description) describes the present and former bindings of a manuscript, either as a series of paragraphs or as a series of distinct binding elements, one for each binding of the manuscript. [10.7.3.1. ]
  element bindingDesc {
    ((model.pLike | decoNote | condition)+ | binding+),
    att.global.attributes,
    empty
  }
binding =
  
  ## contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript. [10.7.3.1. ]
  element binding {
    (model.pLike | condition | decoNote)+,
    att.global.attributes,
    att.datable.attributes,
    
    ## specifies whether or not the binding is contemporary with the majority of its contents
    attribute contemporary { data.xTruthValue }?,
    empty
  }
sealDesc =
  
  ## (seal description) describes the seals or other external items attached to a manuscript, either as a series of paragraphs or as a series of distinct seal elements, possibly with additional decoNotes. [10.7.3.2. ]
  element sealDesc {
    (model.pLike+
     | (summary?, (decoNote | seal | condition)+)),
    att.global.attributes,
    empty
  }
seal =
  
  ## contains a description of one seal or similar attachment applied to a manuscript. [10.7.3.2. ]
  element seal {
    (model.pLike | decoNote)+,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ## specifies whether or not the seal is contemporary with the item to which it is affixed
    attribute contemporary { data.xTruthValue }?,
    empty
  }
accMat =
  
  ## (accompanying material) contains details of any significant additional material which may be closely associated with the manuscript being described, such as non-contemporaneous documents or fragments bound in with the manuscript at some earlier historical period. [10.7.3.3. ]
  element accMat {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
history =
  
  ## groups elements describing the full history of a manuscript or manuscript part. [10.8. ]
  element history {
    (model.pLike+ | (summary?, origin?, provenance*, acquisition?)),
    att.global.attributes,
    empty
  }
origin =
  
  ## contains any descriptive or other information concerning the origin of a manuscript or manuscript part.  [10.8. ]
  element origin {
    macro.specialPara,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    empty
  }
provenance =
  
  ## contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript or manuscript part, after its creation but before its acquisition.  [10.8. ]
  element provenance {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    att.responsibility.attributes,
    empty
  }
acquisition =
  
  ## contains any descriptive or other information concerning the process by which a manuscript or manuscript part entered the holding institution.  [10.8. ]
  element acquisition {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
additional =
  
  ## groups additional information, combining bibliographic information about a manuscript, or surrogate copies of it with curatorial or administrative information.  [10.9. ]
  element additional {
    (adminInfo?, surrogates?, listBibl?), att.global.attributes, empty
  }
adminInfo =
  
  ## (administrative information) contains information about the present custody and availability of the manuscript, and also about the record description itself.  [10.9.1. ]
  element adminInfo {
    (recordHist?, availability?, custodialHist?, model.noteLike?),
    att.global.attributes,
    empty
  }
recordHist =
  
  ## (recorded history) provides information about the source and revision status of the parent manuscript description itself.  [10.9.1. ]
  element recordHist {
    (model.pLike+ | (source, change*)),
    att.global.attributes,
    empty
  }
source =
  
  ## describes the original source for the information contained with a manuscript description.  [10.9.1.1. ]
  element source { macro.specialPara, att.global.attributes, empty }
custodialHist =
  
  ## (custodial history) contains a description of a manuscript's custodial history, either as running prose or as a series of dated custodial events.  [10.9.1.2. ]
  element custodialHist {
    (model.pLike+ | custEvent+), att.global.attributes, empty
  }
custEvent =
  
  ## (custodial event) describes a single event during the custodial history of a manuscript. [10.9.1.2. ]
  element custEvent {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    empty
  }
surrogates =
  
  ## contains information about any representations of the manuscript being described which may exist in the holding institution or elsewhere.  [10.9. ]
  element surrogates { macro.specialPara, att.global.attributes, empty }
msPart =
  
  ## (manuscript part) contains information about an originally distinct manuscript or part of a manuscript, now forming part of a composite manuscript. [10.10. ]
  element msPart {
    ((altIdentifier | msIdentifier),
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    empty
  }
model.rdgLike = rdg
app =
  
  ## (apparatus entry) contains one entry in a critical apparatus, with an optional lemma and usually one or more reading or a note on the relevant passage. [12.1.1. ]
  element app {
    (model.global*,
     (lem, model.global*, (wit, model.global*)?)?,
     ((model.rdgLike, model.global*, (wit, model.global*)?)
      | (rdgGrp, model.global*, (wit, model.global*)?))*),
    att.global.attributes,
    
    ## classifies the variation contained in this element according to some convenient typology.
    attribute type { data.enumerated }?,
    
    ## identifies the beginning of the lemma in the base text.
    attribute from { data.pointer }?,
    
    ## identifies the endpoint of the lemma in the base text.
    attribute to { data.pointer }?,
    
    ## (location) indicates the location of the variation, when the location-referenced method of apparatus markup is used.
    attribute loc {
      list { data.word+ }
    }?,
    empty
  }
listApp =
  
  ## (list of apparatus entries) contains a list of apparatus entries.  [12.2. ]
  element listApp {
    (model.headLike*, (app | listApp)+),
    att.global.attributes,
    att.sortable.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
lem =
  
  ## (lemma) contains the lemma, or base text, of a textual variation. [12.1. ]
  element lem {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.global
     | model.rdgPart)*,
    att.global.attributes,
    att.textCritical.attributes,
    att.witnessed.attributes,
    empty
  }
rdg =
  
  ## (reading) contains a single reading within a textual variation. [12.1. ]
  element rdg {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.global
     | model.rdgPart)*,
    att.global.attributes,
    att.textCritical.attributes,
    att.witnessed.attributes,
    empty
  }
rdgGrp =
  
  ## (reading group) within a textual variation, groups two or more readings perceived to have a genetic relationship or other affinity. [12.1. ]
  element rdgGrp {
    (((rdgGrp, wit?)
      | ((lem, wit?)?, (model.rdgLike, wit?))*)+)
    >> sch:pattern [
         id = "rdgGrp-constraint-only1lem"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rdgGrp"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(tei:lem) < 2"
             "Only one <lem> element may appear within a <rdgGrp>"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.textCritical.attributes,
    empty
  }
witDetail =
  
  ## (witness detail) gives further information about a particular witness, or witnesses, to a particular reading. [12.1. ]
  element witDetail {
    macro.phraseSeq,
    att.global.attributes,
    att.placement.attributes,
    att.responsibility.attributes,
    att.pointing.attributes,
    
    ## (witnesses) indicates the sigil or sigla for the witnesses to which the detail refers.
    attribute wit {
      list { data.pointer+ }
    },
    
    ## describes the type of information given about the witness.
    attribute type { data.enumerated }?,
    empty
  }
wit =
  
  ## contains a list of one or more sigla of witnesses attesting a given reading, in a textual variation. [12.1.4. ]
  element wit {
    macro.phraseSeq,
    att.global.attributes,
    att.rdgPart.attributes,
    empty
  }
listWit =
  
  ## (witness list) lists definitions for all the witnesses referred to by a critical apparatus, optionally grouped hierarchically. [12.1. ]
  element listWit {
    (model.headLike?, (witness | listWit)+),
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
witness =
  
  ## contains either a description of a single witness referred to within the critical apparatus, or a list of witnesses which is to be referred to by a single sigil. [12.1. ]
  element witness {
    macro.limitedContent,
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
witStart =
  
  ## (fragmented witness start) indicates the beginning, or resumption, of the text of a fragmentary witness. [12.1.5. ]
  element witStart {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
witEnd =
  
  ## (fragmented witness end) indicates the end, or suspension, of the text of a fragmentary witness. [12.1.5. ]
  element witEnd {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
lacunaStart =
  
  ## indicates the beginning of a lacuna in the text of a mostly complete textual witness. [12.1.5. ]
  element lacunaStart {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
lacunaEnd =
  
  ## indicates the end of a lacuna in a mostly complete textual witness. [12.1.5. ]
  element lacunaEnd {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
model.rdgPart = wit | witStart | witEnd | lacunaStart | lacunaEnd
att.rdgPart.attributes = att.rdgPart.attribute.wit
att.rdgPart.attribute.wit =
  
  ## (witness or witnesses) contains a list of one or more sigla indicating the witnesses which begin or end at this point.
  attribute wit {
    list { data.pointer+ }
  }?
att.witnessed.attributes = att.witnessed.attribute.wit
att.witnessed.attribute.wit =
  
  ## (witness or witnesses) contains a list of one or more pointers indicating the witnesses which attest to a given reading.
  attribute wit {
    list { data.pointer+ }
  }?
att.textCritical.attributes =
  att.responsibility.attributes,
  att.textCritical.attribute.type,
  att.textCritical.attribute.cause,
  att.textCritical.attribute.varSeq,
  att.textCritical.attribute.hand
att.textCritical.attribute.type =
  
  ## classifies the reading according to some useful typology.
  ## Sample values include: 1] substantive; 2] orthographic
  attribute type { data.enumerated }?
att.textCritical.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  ## Sample values include: 1] homeoteleuton; 2] homeoarchy; 3] paleographicConfusion; 4] haplography; 5] dittography; 6] falseEmendation
  attribute cause { data.enumerated }?
att.textCritical.attribute.varSeq =
  
  ## (variant sequence) provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants on any one lemma.
  attribute varSeq { data.count }?
att.textCritical.attribute.hand =
  
  ## signifies the hand responsible for a particular reading in the witness.
  attribute hand { data.pointer }?
TEI =
  
  ## (TEI document) contains a single TEI-conformant document, comprising a TEI header and a text, either in isolation or as part of a teiCorpus element. [4.  15.1. ]
  element TEI {
    (teiHeader,
     ((model.resourceLike+, \text?) | \text))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    att.global.attributes,
    
    ## specifies the major version number of the TEI Guidelines against which this document is valid.
    attribute version { data.version }?,
    empty
  }
\text =
  
  ## contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4.  15.1. ]
  element text {
    (model.global*,
     (front, model.global*)?,
     (body | group),
     model.global*,
     (back, model.global*)?),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
body =
  
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. ]
  element body {
    (model.global*,
     (model.divTop, (model.global | model.divTop)*)?,
     (model.divGenLike, (model.global | model.divGenLike)*)?,
     ((model.divLike, (model.global | model.divGenLike)*)+
      | (model.div1Like, (model.global | model.divGenLike)*)+
      | ((model.common, model.global*)+,
         ((model.divLike, (model.global | model.divGenLike)*)+
          | (model.div1Like, (model.global | model.divGenLike)*)+)?)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
group =
  
  ## contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4.  4.3.1.  15.1. ]
  element group {
    ((model.divTop | model.global)*,
     ((\text | group), (\text | group | model.global)*),
     model.divBottom*),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
\div =
  
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. ]
  element div {
    ((model.divTop | model.global)*,
     ((((model.divLike | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.divLike | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
trailer =
  
  ## contains a closing title or footer appearing at the end of a division of a text.  [4.2.4.  4.2. ]
  element trailer {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
byline =
  
  ## contains the primary statement of responsibility given for a work on its title page or at the head or end of the work. [4.2.2.  4.5. ]
  element byline {
    (text | model.gLike | model.phrase | docAuthor | model.global)*,
    att.global.attributes,
    empty
  }
dateline =
  
  ## contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer.  [4.2.2. ]
  element dateline { macro.phraseSeq, att.global.attributes, empty }
argument =
  
  ## contains a formal list or prose description of the topics addressed by a subdivision of a text. [4.2.  4.6. ]
  element argument {
    ((model.global | model.headLike)*, (model.common, model.global*)+),
    att.global.attributes,
    empty
  }
epigraph =
  
  ## contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page.  [4.2.3.  4.2.  4.6. ]
  element epigraph {
    (model.common | model.global)*, att.global.attributes, empty
  }
opener =
  
  ## groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. [4.2. ]
  element opener {
    (text
     | model.gLike
     | model.phrase
     | argument
     | byline
     | dateline
     | epigraph
     | salute
     | signed
     | model.global)*,
    att.global.attributes,
    empty
  }
closer =
  
  ## groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. [4.2.2.  4.2. ]
  element closer {
    (text
     | model.gLike
     | signed
     | dateline
     | salute
     | model.phrase
     | model.global)*,
    att.global.attributes,
    empty
  }
salute =
  
  ## (salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. [4.2.2. ]
  element salute { macro.phraseSeq, att.global.attributes, empty }
signed =
  
  ## (signature) contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text.  [4.2.2. ]
  element signed { macro.paraContent, att.global.attributes, empty }
postscript =
  
  ## contains a postscript, e.g. to a letter. [4.2. ]
  element postscript {
    ((model.global | model.divTopPart)*,
     model.common,
     (model.global | model.common)*,
     (model.divBottomPart, model.global*)*),
    att.global.attributes,
    empty
  }
titlePage =
  
  ## (title page) contains the title page of a text, appearing within the front or back matter.  [4.6. ]
  element titlePage {
    (model.global*,
     model.titlepagePart,
     (model.titlepagePart | model.global)*),
    att.global.attributes,
    
    ## classifies the title page according to any convenient typology.
    attribute type { data.enumerated }?,
    empty
  }
docTitle =
  
  ## (document title) contains the title of a document, including all its constituents, as given on a title page. [4.6. ]
  element docTitle {
    (model.global*, (titlePart, model.global*)+),
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
titlePart =
  
  ## contains a subsection or division of the title of a work, as indicated on a title page. [4.6. ]
  element titlePart {
    macro.paraContent,
    att.global.attributes,
    
    ## specifies the role of this subdivision of the title.
    ## Suggested values include: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    [ a:defaultValue = "main" ]
    attribute type {
      
      ## main title of the work 
      "main"
      | 
        ## (subordinate) subtitle of the work 
        "sub"
      | 
        ## (alternate) alternative title of the work 
        "alt"
      | 
        ## abbreviated form of title
        "short"
      | 
        ## (descriptive) descriptive paraphrase of the work 
        "desc"
      | xsd:Name
    }?,
    empty
  }
docAuthor =
  
  ## (document author) contains the name of the author of the document, as given on the title page (often but not always contained in a byline). [4.6. ]
  element docAuthor {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
docEdition =
  
  ## (document edition) contains an edition statement as presented on a title page of a document. [4.6. ]
  element docEdition { macro.paraContent, att.global.attributes, empty }
docImprint =
  
  ## (document imprint) contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. [4.6. ]
  element docImprint {
    (text
     | model.gLike
     | model.phrase
     | pubPlace
     | docDate
     | publisher
     | model.global)*,
    att.global.attributes,
    empty
  }
docDate =
  
  ## (document date) contains the date of a document, as given (usually) on a title page. [4.6. ]
  element docDate {
    macro.phraseSeq,
    att.global.attributes,
    
    ## gives the value of the date in standard form, i.e. YYYY-MM-DD.
    attribute when { data.temporal.w3c }?,
    empty
  }
front =
  
  ## (front matter) contains any prefatory matter (headers, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. [4.6.  4. ]
  element front {
    ((model.frontPart
      | model.pLike
      | model.pLike.front
      | model.global)*,
     (((model.div1Like,
        (model.div1Like | model.frontPart | model.global)*)
       | (model.divLike,
          (model.divLike | model.frontPart | model.global)*)),
      (model.divBottom, (model.divBottom | model.global)*)?)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
back =
  
  ## (back matter) contains any appendixes, etc. following the main part of a text. [4.7.  4. ]
  element back {
    ((model.frontPart
      | model.pLike.front
      | model.pLike
      | model.listLike
      | model.global)*,
     ((model.div1Like,
       (model.frontPart | model.div1Like | model.global)*)
      | (model.divLike,
         (model.frontPart | model.divLike | model.global)*))?,
     (model.divBottomPart, (model.divBottomPart | model.global)*)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
facsimile =
  
  ## contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. [11.1. ]
  element facsimile {
    (front?, (model.graphicLike | surface | surfaceGrp)+, back?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
sourceDoc =
  
  ## contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. [11.1.  11.2.2. ]
  element sourceDoc {
    (model.global | model.graphicLike | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
att.global.facs.attributes = att.global.facs.attribute.facs
att.global.facs.attribute.facs =
  
  ## (facsimile) points to all or part of an image which corresponds with the content of the element.
  attribute facs {
    list { data.pointer+ }
  }?
att.global.change.attributes = att.global.change.attribute.change
att.global.change.attribute.change =
  
  ## points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder.
  attribute change {
    list { data.pointer+ }
  }?
surface =
  
  ## defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. [11.1.  11.2.2. ]
  element surface {
    ((model.global | model.labelLike | model.graphicLike)*,
     ((zone | line | surface | surfaceGrp), model.global*)*),
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    
    ## describes the method by which this surface is or was connected to the main surface
    ## Sample values include: 1] glued; 2] pinned; 3] sewn
    attribute attachment { data.enumerated }?,
    
    ## indicates whether the surface is attached and folded in such a way as to provide two writing surfaces
    attribute flipping { data.truthValue }?,
    empty
  }
surfaceGrp =
  
  ## defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit.  [11.1. ]
  element surfaceGrp {
    (model.global | surface | surfaceGrp)+,
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
att.coordinated.attributes =
  att.coordinated.attribute.start,
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry
att.coordinated.attribute.start =
  
  ## indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface.
  attribute start { data.pointer }?
att.coordinated.attribute.ulx =
  
  ## gives the x coordinate value for the upper left corner of a rectangular space.
  attribute ulx { data.numeric }?
att.coordinated.attribute.uly =
  
  ## gives the y coordinate value for the upper left corner of a rectangular space.
  attribute uly { data.numeric }?
att.coordinated.attribute.lrx =
  
  ## gives the x coordinate value for the lower right corner of a rectangular space.
  attribute lrx { data.numeric }?
att.coordinated.attribute.lry =
  
  ## gives the y coordinate value for the lower right corner of a rectangular space.
  attribute lry { data.numeric }?
zone =
  
  ## defines any two-dimensional area within a surface element. [11.1.  11.2.2. ]
  element zone {
    (text
     | model.graphicLike
     | model.global
     | surface
     | model.linePart)*,
    att.global.attributes,
    att.coordinated.attributes,
    att.typed.attributes,
    
    ## identifies a two dimensional area within the bounding box specified by the other attributes by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.
    attribute points {
      list { data.point, data.point, data.point, data.point* }
    }?,
    
    ## indicates the amount by which this zone has been rotated clockwise, with respect to the normal orientation of the parent surface element as implied by the dimensions given in the msDesc element or by the coordinates of the surface itself. The orientation is expressed in arc degrees.
    [ a:defaultValue = "0" ] attribute rotate { data.count }?,
    empty
  }
addSpan =
  
  ## (added span of text) marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also add). [11.3.1.4. ]
  element addSpan {
    empty
    >> sch:pattern [
         id = "addSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "addSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
damage =
  
  ## contains an area of damage to the text witness. [11.3.3.1. ]
  element damage {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.damaged.attributes,
    empty
  }
damageSpan =
  
  ## (damaged span of text) marks the beginning of a longer sequence of text which is damaged in some way but still legible. [11.3.3.1. ]
  element damageSpan {
    empty
    >> sch:pattern [
         id = "damageSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "\x{a}" ~
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "damageSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.damaged.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
delSpan =
  
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. [11.3.1.4. ]
  element delSpan {
    empty
    >> sch:pattern [
         id = "delSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "delSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
ex =
  
  ## (editorial expansion) contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. [11.3.1.2. ]
  element ex {
    macro.xtext, att.global.attributes, att.editLike.attributes, empty
  }
fw =
  
  ## (forme work) contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. [11.6. ]
  element fw {
    macro.phraseSeq,
    att.global.attributes,
    att.placement.attributes,
    
    ## classifies the material encoded according to some useful typology.
    ## Sample values include: 1] header; 2] footer; 3] pageNum(page number) ; 4] lineNum(line number) ; 5] sig(signature) ; 6] catch(catchword) 
    attribute type { data.enumerated }?,
    empty
  }
handNotes =
  
  ## contains one or more handNote elements documenting the different hands identified within the source texts. [11.3.2.1. ]
  element handNotes { att.global.attributes, empty }
handShift =
  
  ## marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. [11.3.2.1. ]
  element handShift {
    empty,
    att.global.attributes,
    att.handFeatures.attributes,
    att.responsibility.attributes,
    
    ## identifies the new hand.
    attribute new { data.pointer }?,
    empty
  }
am =
  
  ## (abbreviation marker) contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. [11.3.1.2. ]
  element am {
    (text | model.gLike | model.pPart.transcriptional)*,
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    empty
  }
restore =
  
  ## indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. [11.3.1.6. ]
  element restore {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    empty
  }
space =
  
  ## indicates the location of a significant space in the copy text. [11.5.1. ]
  element space {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.dimensions.attributes,
    
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      
      ## the space is horizontal.
      "horizontal"
      | 
        ## the space is vertical.
        "vertical"
    }?,
    
    ## (responsible party) indicates the individual responsible for identifying and measuring the space.
    attribute resp { data.pointer }?,
    empty
  }
subst =
  
  ## (substitution) groups one or more deletions with one or more additions when the combination is to be regarded as a single intervention in the text. [11.3.1.5. ]
  element subst {
    ((add | del | model.milestoneLike)+)
    >> sch:pattern [
         id = "subst-constraint-substContents1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:subst"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "child::tei:add and child::tei:del"
             "\x{a}" ~
             "                  "
             sch:name [ ]
             " must have at least one child add and at least one child del"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    empty
  }
substJoin =
  
  ## (substitution join) identifies a series of possibly fragmented additions, deletions or other revisions on a manuscript that combine to make up a single intervention in the text [11.3.1.5. ]
  element substJoin {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.pointing.attributes,
    att.transcriptional.attributes,
    empty
  }
supplied =
  
  ## signifies text supplied by the transcriber or editor for any reason, typically because the original cannot be read because of physical damage or loss to the original. [11.3.3.1. ]
  element supplied {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indicates why the text has had to be supplied.
    attribute reason {
      list { data.word+ }
    }?,
    empty
  }
surplus =
  
  ## marks text present in the source which the editor believes to be superfluous or redundant. [11.3.3.1. ]
  element surplus {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indicates the grounds for believing this text to be superfluous.
    attribute reason {
      list { data.word+ }
    }?,
    empty
  }
line =
  
  ## contains the transcription of a topographic line in the source document [11.2.2. ]
  element line {
    (text | model.global | model.gLike | model.linePart)*,
    att.typed.attributes,
    att.global.attributes,
    att.coordinated.attributes,
    empty
  }
listTranspose =
  
  ## supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. [11.3.4.5. ]
  element listTranspose { transpose+, att.global.attributes, empty }
metamark =
  
  ## contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. [11.3.4.2. ]
  element metamark {
    macro.specialPara,
    att.spanning.attributes,
    att.placement.attributes,
    att.global.attributes,
    
    ## describes the function (for example status, insertion, deletion, transposition) of the mark.
    attribute function { data.word }?,
    
    ## identifies one or more elements to which the function indicated by the metamark applies. 
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
mod =
  
  ## represents any kind of modification identified within a single document. [11.3.4.1. ]
  element mod {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
redo =
  
  ## indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. [11.3.4.4. ]
  element redo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    
    ## points to one or more elements representing the interventions which are being reasserted.
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
retrace =
  
  ## contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. [11.3.4.3. ]
  element retrace {
    macro.paraContent,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    empty
  }
transpose =
  
  ## describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined.  [11.3.4.5. ]
  element transpose { (ptr, ptr+), att.global.attributes, empty }
undo =
  
  ## indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. [11.3.4.4. ]
  element undo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    
    ## points to one or more elements representing the interventions which are to be reverted or undone.
    attribute target {
      list { data.pointer+ }
    }?,
    empty
  }
mei_att.accidental.attributes = mei_att.accidental.attribute.accid
mei_att.accidental.attribute.accid =
  
  ## captures a written accidental.
  attribute accid { data.ACCIDENTAL.EXPLICIT }?
mei_att.accidental.performed.attributes =
  mei_att.accidental.performed.attribute.accid.ges
mei_att.accidental.performed.attribute.accid.ges =
  
  ## records the performed pitch inflection when it differs from the written accidental.
  attribute accid.ges { data.ACCIDENTAL.IMPLICIT }?
mei_att.altsym.attributes = mei_att.altsym.attribute.altsym
mei_att.altsym.attribute.altsym =
  
  ## provides a way of pointing to a user-defined symbol. It must contain an ID of a <symbolDef> element elsewhere in the document.
  attribute altsym { data.URI }?
mei_att.articulation.attributes = mei_att.articulation.attribute.artic
mei_att.articulation.attribute.artic =
  
  ## encodes the written articulation(s). Articulations are normally encoded in order from the note head outward; that is, away from the stem. See additional notes at att.vis.note. Only articulations should be encoded in the artic attribute; fingerings should be encoded using the <dir> element.
  attribute artic { data.ARTICULATIONS }?
mei_att.articulation.performed.attributes =
  mei_att.articulation.performed.attribute.artic.ges
mei_att.articulation.performed.attribute.artic.ges =
  
  ## records performed articulation that differs from the written value.
  attribute artic.ges { data.ARTICULATIONS }?
mei_att.augmentdots.attributes = mei_att.augmentdots.attribute.dots
mei_att.augmentdots.attribute.dots =
  
  ## records the number of augmentation dots required by a dotted duration.
  attribute dots { data.AUGMENTDOT }?
mei_att.authorized.attributes =
  mei_att.authorized.attribute.authority,
  mei_att.authorized.attribute.authURI
mei_att.authorized.attribute.authority =
  
  ## a name or label associated with the controlled vocabulary from which the value is taken.
  attribute authority { text }?
mei_att.authorized.attribute.authURI =
  
  ## the web-accessible location of the controlled vocabulary from which the value is taken.
  attribute authURI { data.URI }?
mei_att.barplacement.attributes =
  mei_att.barplacement.attribute.barplace,
  mei_att.barplacement.attribute.taktplace
mei_att.barplacement.attribute.barplace =
  
  ## records the location of a bar line.
  attribute barplace { data.BARPLACE }?
mei_att.barplacement.attribute.taktplace =
  
  ## If takt bar lines are to be used, then the taktplace attribute may be used to denote the staff location of the shortened bar line. The location may include staff lines, spaces, and the spaces directly above and below the staff. The value ranges between 0 (just below the staff) to 2 * number of staff lines (directly above the staff). For example, on a 5-line staff the lines would be numbered 1,3,5,7, and 9 while the spaces would be numbered 0,2,4,6,8,10. For example, a value of '9' puts the bar line through the top line of a 5-line staff.
  attribute taktplace { data.STAFFLOC }?
mei_att.beaming.vis.attributes =
  mei_att.beaming.vis.attribute.beam.rend,
  mei_att.beaming.vis.attribute.beam.slope
mei_att.beaming.vis.attribute.beam.rend =
  
  ## encodes whether a beam is "feathered" and in which direction.
  attribute beam.rend {
    
    ## beams lines grow farther apart from left to right.
    "acc"
    | 
      ## beam lines grow closer together from left to right.
      "rit"
    | 
      ## beam lines are equally-spaced over the entire length of the beam.
      "norm"
  }?
mei_att.beaming.vis.attribute.beam.slope =
  
  ## captures beam slope.
  attribute beam.slope { xsd:decimal }?
mei_att.bibl.attributes = mei_att.bibl.attribute.analog
mei_att.bibl.attribute.analog =
  
  ## contains a reference to a field or element in another descriptive encoding system to which this MEI element is comparable. 
  attribute analog { text }?
mei_att.calendared.attributes = mei_att.calendared.attribute.calendar
mei_att.calendared.attribute.calendar =
  
  ## indicates the calendar system to which a date belongs, for example, Gregorian, Julian, Roman, Mosaic, Revolutionary, Islamic, etc.
  attribute calendar { xsd:NMTOKEN }?
mei_att.canonical.attributes = mei_att.canonical.attribute.dbkey
mei_att.canonical.attribute.dbkey =
  
  ## used to record a value which serves as a primary key in an external database.
  attribute dbkey { xsd:NMTOKEN }?
mei_att.cleffing.log.attributes =
  mei_att.cleffing.log.attribute.clef.shape,
  mei_att.cleffing.log.attribute.clef.line,
  mei_att.cleffing.log.attribute.clef.dis,
  mei_att.cleffing.log.attribute.clef.dis.place
mei_att.cleffing.log.attribute.clef.shape =
  
  ## encodes a value for the clef symbol.
  attribute clef.shape { data.CLEFSHAPE }?
mei_att.cleffing.log.attribute.clef.line =
  
  ## contains a default value for the position of the clef. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute clef.line { data.CLEFLINE }?
mei_att.cleffing.log.attribute.clef.dis =
  
  ## records the amount of octave displacement to be applied to the clef.
  attribute clef.dis { data.OCTAVE.DIS }?
mei_att.cleffing.log.attribute.clef.dis.place =
  
  ## records the direction of octave displacement to be applied to the clef.
  attribute clef.dis.place { data.PLACE }?
mei_att.cleffing.vis.attributes =
  mei_att.cleffing.vis.attribute.clef.color,
  mei_att.cleffing.vis.attribute.clef.visible
mei_att.cleffing.vis.attribute.clef.color =
  
  ## describes the color of the clef.
  attribute clef.color { data.COLOR }?
mei_att.cleffing.vis.attribute.clef.visible =
  
  ## determines whether the clef is to be displayed.
  attribute clef.visible { data.BOOLEAN }?
mei_att.clefshape.attributes = mei_att.clefshape.attribute.shape
mei_att.clefshape.attribute.shape =
  
  ## describes a clef's shape.
  attribute shape { data.CLEFSHAPE }?
mei_att.color.attributes = mei_att.color.attribute.color
mei_att.color.attribute.color =
  
  ## used to indicate visual appearance. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute color { data.COLOR }?
mei_att.coloration.attributes = mei_att.coloration.attribute.colored
mei_att.coloration.attribute.colored =
  
  ## indicates this feature is 'colored'; that is, it is a participant in a change in rhythmic values. In mensural notation, coloration is indicated by colored notes (red, black, etc.) where void notes would otherwise occur. In CMN, coloration is indicated by an inverse color; that is, the note head is void when it would otherwise be filled and vice versa.
  attribute colored { data.BOOLEAN }?
mei_att.common.attributes =
  mei_att.id.attributes,
  mei_att.common.attribute.label,
  mei_att.common.attribute.n,
  mei_att.common.attribute.xmlbase
mei_att.common.attribute.label =
  
  ## provides a label for an element. The value may be any string.
  attribute label { text }?
mei_att.common.attribute.n =
  
  ## provides a name or number designation for an element. While the value need not be unique, it is required to be a single token.
  attribute n { xsd:NMTOKEN }?
mei_att.common.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { data.URI }?
mei_att.controlevent.attributes =
  mei_att.plist.attributes,
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes,
  mei_att.staffident.attributes,
  mei_att.layerident.attributes
mei_att.coordinated.attributes =
  mei_att.coordinated.attribute.ulx,
  mei_att.coordinated.attribute.uly,
  mei_att.coordinated.attribute.lrx,
  mei_att.coordinated.attribute.lry
mei_att.coordinated.attribute.ulx =
  
  ## indicates the upper-left corner x coordinate.
  attribute ulx { xsd:nonNegativeInteger }?
mei_att.coordinated.attribute.uly =
  
  ## indicates the upper-left corner y coordinate.
  attribute uly { xsd:nonNegativeInteger }?
mei_att.coordinated.attribute.lrx =
  
  ## indicates the lower-right corner x coordinate.
  attribute lrx { xsd:nonNegativeInteger }?
mei_att.coordinated.attribute.lry =
  
  ## indicates the lower-left corner x coordinate.
  attribute lry { xsd:nonNegativeInteger }?
mei_att.curvature.attributes =
  mei_att.curvature.attribute.bezier,
  mei_att.curvature.attribute.bulge,
  mei_att.curvature.attribute.curvedir
mei_att.curvature.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy coordinates, e.g., 19 45 -32 118.
  attribute bezier { text }?
mei_att.curvature.attribute.bulge =
  
  ## describes a curve as a set of distance values above or below an imaginary line connecting the endpoints of the curve. The bulge attribute must contain one or more decimal values expressed in inter-line units.
  attribute bulge { text }?
mei_att.curvature.attribute.curvedir =
  
  ## describes a curve with a generic term indicating the direction of curvature.
  attribute curvedir {
    
    ## upward curve.
    "above"
    | 
      ## downward curve.
      "below"
  }?
mei_att.curverend.attributes = mei_att.curverend.attribute.rend
mei_att.curverend.attribute.rend =
  
  ## describes the line style of the curve.
  attribute rend { data.CURVERENDITION }?
mei_att.datable.attributes =
  mei_att.datable.attribute.enddate,
  mei_att.datable.attribute.isodate,
  mei_att.datable.attribute.notafter,
  mei_att.datable.attribute.notbefore,
  mei_att.datable.attribute.startdate
mei_att.datable.attribute.enddate =
  
  ## contains the end point of a date range in standard ISO form.
  attribute enddate { data.ISODATE }?
mei_att.datable.attribute.isodate =
  
  ## provides the value of a textual date in standard ISO form.
  attribute isodate { data.ISODATE }?
mei_att.datable.attribute.notafter =
  
  ## contains an upper boundary for an uncertain date in standard ISO form.
  attribute notafter { data.ISODATE }?
mei_att.datable.attribute.notbefore =
  
  ## contains a lower boundary, in standard ISO form, for an uncertain date.
  attribute notbefore { data.ISODATE }?
mei_att.datable.attribute.startdate =
  
  ## contains the starting point of a date range in standard ISO form.
  attribute startdate { data.ISODATE }?
mei_att.datapointing.attributes = mei_att.datapointing.attribute.data
mei_att.datapointing.attribute.data =
  
  ## used to link metadata elements to one or more data-containing elements.
  attribute data {
    list { data.URI+ }
  }?
mei_att.declaring.attributes = mei_att.declaring.attribute.decls
mei_att.declaring.attribute.decls =
  
  ## identifies one or more metadata elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { data.URI+ }
  }?
mei_att.distances.attributes =
  mei_att.distances.attribute.dynam.dist,
  mei_att.distances.attribute.harm.dist,
  mei_att.distances.attribute.text.dist
mei_att.distances.attribute.dynam.dist =
  
  ## records the distance from the staff for dynamic marks in 1/2 inter-line units.
  attribute dynam.dist { xsd:decimal }?
mei_att.distances.attribute.harm.dist =
  
  ## records the default distance from the staff of harmonic indications, such as guitar chord grids or functional labels.
  attribute harm.dist { xsd:decimal }?
mei_att.distances.attribute.text.dist =
  
  ## determines how far from the staff to render text elements.
  attribute text.dist { xsd:decimal }?
mei_att.duration.default.attributes =
  mei_att.duration.default.attribute.dur.default
mei_att.duration.default.attribute.dur.default =
  
  ## contains a default duration in those situations when the first note, rest, chord, etc. in a measure does not have a duration specified.
  attribute dur.default { data.DURATION }?
mei_att.duration.musical.attributes =
  mei_att.duration.musical.attribute.dur
mei_att.duration.musical.attribute.dur =
  
  ## records the duration of a feature using the relative durational values provided by the data.DURATION datatype.
  attribute dur { data.DURATION }?
mei_att.duration.performed.attributes =
  mei_att.duration.performed.attribute.dur.ges
mei_att.duration.performed.attribute.dur.ges =
  
  ## records performed duration information that differs from written duration. Its value may be expressed in any convenient form, such as measures[s]+ beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML 'divisions', etc.
  attribute dur.ges { text }?
mei_att.duration.ratio.attributes =
  mei_att.duration.ratio.attribute.num,
  mei_att.duration.ratio.attribute.numbase
mei_att.duration.ratio.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute num { xsd:positiveInteger }?
mei_att.duration.ratio.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute numbase { xsd:positiveInteger }?
mei_att.duration.timestamp.attributes =
  mei_att.duration.timestamp.attribute.dur
mei_att.duration.timestamp.attribute.dur =
  
  ## records the duration of a feature using the relative durational values provided by the data.MEASUREBEAT datatype.
  attribute dur { data.MEASUREBEAT }?
mei_att.enclosingchars.attributes =
  mei_att.enclosingchars.attribute.enclose
mei_att.enclosingchars.attribute.enclose =
  
  ## records the characters often used to mark accidentals, articulations, and sometimes notes as having a cautionary or editorial function. For an example of cautionary accidentals enclosed in parentheses, see Read, p. 131, ex. 9-14.
  attribute enclose { data.ENCLOSURE }?
mei_att.event.attributes =
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes,
  mei_att.staffident.attributes,
  mei_att.layerident.attributes
mei_att.fermatapresent.attributes =
  mei_att.fermatapresent.attribute.fermata
mei_att.fermatapresent.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information about the fermata needs to be recorded, then a <fermata> element should be employed instead.
  attribute fermata { data.STAFFREL }?
mei_att.staffgroupingsym.attributes =
  mei_att.staffgroupingsym.attribute.symbol
mei_att.staffgroupingsym.attribute.symbol =
  
  ## specifies the symbol used to group a set of staves.
  attribute symbol {
    
    ## curved symbol, i.e., {.
    "brace"
    | 
      ## square symbol, i.e., [.
      "bracket"
    | 
      ## line symbol, i.e., |.
      "line"
    | 
      ## grouping symbol missing.
      "none"
  }?
mei_att.handident.attributes = mei_att.handident.attribute.hand
mei_att.handident.attribute.hand =
  
  ## signifies the hand responsible for an action. The value must be the ID of a <hand> element declared in the header.
  attribute hand { data.URI }?
mei_att.horizontalalign.attributes =
  mei_att.horizontalalign.attribute.halign
mei_att.horizontalalign.attribute.halign =
  
  ## records horizontal alignment.
  attribute halign {
    
    ## left aligned.
    "left"
    | 
      ## right aligned.
      "right"
    | 
      ## centered.
      "center"
    | 
      ## left and right aligned.
      "justify"
  }?
mei_att.id.attributes = mei_att.id.attribute.xmlid
mei_att.id.attribute.xmlid =
  
  ## regularizes the naming of an element and thus facilitates building links between it and other resources. Each id attribute within a document must have a unique value.
  attribute xml:id { xsd:ID }?
mei_att.instrumentident.attributes =
  mei_att.instrumentident.attribute.instr
mei_att.instrumentident.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the ID of an <instrDef> element elsewhere in the document.
  attribute instr { data.URI }?
mei_att.internetmedia.attributes =
  mei_att.internetmedia.attribute.mimetype
mei_att.internetmedia.attribute.mimetype =
  
  ## specifies the applicable MIME (multimedia internet mail extension) type. The value should be a valid MIME media type defined by the Internet Engineering Task Force in RFC 2046.
  attribute mimetype { text }?
mei_att.joined.attributes = mei_att.joined.attribute.join
mei_att.joined.attribute.join =
  
  ## used for linking visually separate entities that form a single logical entity, for example, multiple slurs broken across a system break that form a single musical phrase. Also used to indicate a measure which metrically completes the current one. Record the identifiers of the separately encoded components, excluding the one carrying the attribute.
  attribute join {
    list { data.URI+ }
  }?
mei_att.keySigDefault.log.attributes =
  mei_att.keySigDefault.log.attribute.key.accid,
  mei_att.keySigDefault.log.attribute.key.mode,
  mei_att.keySigDefault.log.attribute.key.pname,
  mei_att.keySigDefault.log.attribute.key.sig,
  mei_att.keySigDefault.log.attribute.key.sig.mixed
mei_att.keySigDefault.log.attribute.key.accid =
  
  ## contains an accidental for the tonic key, if one is required, e.g., if key.pname equals 'c' and key.accid equals 's', then a tonic of C# is indicated.
  attribute key.accid { data.ACCIDENTAL.IMPLICIT }?
mei_att.keySigDefault.log.attribute.key.mode =
  
  ## indicates major, minor, or other tonality.
  attribute key.mode { data.MODE }?
mei_att.keySigDefault.log.attribute.key.pname =
  
  ## holds the pitch name of the tonic key, e.g. 'c' for the key of C.
  attribute key.pname { data.PITCHNAME }?
mei_att.keySigDefault.log.attribute.key.sig =
  
  ## indicates where the key lies in the circle of fifths.
  attribute key.sig { data.KEYSIGNATURE }?
mei_att.keySigDefault.log.attribute.key.sig.mixed =
  
  ## Mixed key signatures, e.g. those consisting of a mixture of flats and sharps (Read, p. 143, ex. 9-39), and key signatures with unorthodox placement of the accidentals (Read, p. 141) must be indicated by setting the key.sig attribute to 'mixed' and providing explicit key signature information in the key.sig.mixed attribute or in the <keySig> element. It is intended that key.sig.mixed contain a series of tokens with each token containing pitch name, accidental, and octave, such as 'A4 Cs5 Ef5' that indicate what key accidentals should be rendered and where they should be placed.
  attribute key.sig.mixed {
    list {
      xsd:token {
        pattern = "[a-g][0-9](\-{1,3}|f{1,3}|#{1,3}|s{1,3}|x)"
      }+
    }
  }?
mei_att.keySigDefault.vis.attributes =
  mei_att.keySigDefault.vis.attribute.key.sig.show,
  mei_att.keySigDefault.vis.attribute.key.sig.showchange
mei_att.keySigDefault.vis.attribute.key.sig.show =
  
  ## indicates whether the key signature should be displayed.
  attribute key.sig.show { data.BOOLEAN }?
mei_att.keySigDefault.vis.attribute.key.sig.showchange =
  
  ## determines whether cautionary accidentals should be displayed at a key change.
  attribute key.sig.showchange { data.BOOLEAN }?
mei_att.labels.addl.attributes =
  mei_att.labels.addl.attribute.label.abbr
mei_att.labels.addl.attribute.label.abbr =
  
  ## provides a label for a group of staves on pages after the first page. Usually, this label takes an abbreviated form.
  attribute label.abbr { text }?
mei_att.lang.attributes = mei_att.lang.attribute.xmllang
mei_att.lang.attribute.xmllang =
  
  ## identifies the language of the element's content. The values for this attribute are language 'tags' as defined in BCP 47. All language tags that make use of private use sub-tags must be documented in a corresponding language element in the MEI header whose id attribute is the same as the language tag's value.
  attribute xml:lang { xsd:language }?
mei_att.layerident.attributes = mei_att.layerident.attribute.layer
mei_att.layerident.attribute.layer =
  
  ## identifies the layer to which a feature applies.
  attribute layer {
    list { xsd:positiveInteger+ }
  }?
mei_att.lineloc.attributes = mei_att.lineloc.attribute.line
mei_att.lineloc.attribute.line =
  
  ## indicates the line upon which a feature stands. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute line { data.CLEFLINE }?
mei_att.linerend.attributes = mei_att.linerend.attribute.rend
mei_att.linerend.attribute.rend =
  
  ## records the appearance of a line.
  attribute rend { data.LINERENDITION }?
mei_att.pointing.attributes =
  mei_att.pointing.attribute.xlinkactuate,
  mei_att.pointing.attribute.xlinkrole,
  mei_att.pointing.attribute.xlinkshow,
  mei_att.pointing.attribute.target,
  mei_att.pointing.attribute.targettype,
  mei_att.pointing.attribute.xlinktitle
mei_att.pointing.attribute.xlinkactuate =
  
  ## defines whether a link occurs automatically or must be requested by the user.
  attribute xlink:actuate {
    
    ## load the target resource immediately.
    "onLoad"
    | 
      ## load the target resource upon user request.
      "onRequest"
    | 
      ## do not permit loading of the target resource.
      "none"
    | 
      ## behavior other than allowed by the other values of this attribute.
      "other"
  }?
mei_att.pointing.attribute.xlinkrole =
  
  ## indicates a property of the entire link. The value of the role attribute must be a URI.
  attribute xlink:role { data.URI }?
mei_att.pointing.attribute.xlinkshow =
  
  ## defines how a remote resource is rendered.
  attribute xlink:show {
    
    ## open in a new window.
    "new"
    | 
      ## load the referenced resource in the same window.
      "replace"
    | 
      ## embed the referenced resource at the point of the link.
      "embed"
    | 
      ## do not permit traversal to the referenced resource.
      "none"
    | 
      ## behavior other than permitted by the other values of this attribute.
      "other"
  }?
mei_att.pointing.attribute.target =
  
  ## allows the use of one or more previously-undeclared URIs to identify an external electronic object.
  attribute target { data.URIS }?
mei_att.pointing.attribute.targettype =
  
  ## in contrast with the role attribute, allows the target resource to be characterized using any convenient classification scheme or typology.
  attribute targettype { xsd:NMTOKEN }?
mei_att.pointing.attribute.xlinktitle =
  
  ## contains a human-readable description of the entire link.
  attribute xlink:title { text }?
mei_att.lyricstyle.attributes =
  mei_att.lyricstyle.attribute.lyric.align,
  mei_att.lyricstyle.attribute.lyric.fam,
  mei_att.lyricstyle.attribute.lyric.name,
  mei_att.lyricstyle.attribute.lyric.size,
  mei_att.lyricstyle.attribute.lyric.style,
  mei_att.lyricstyle.attribute.lyric.weight
mei_att.lyricstyle.attribute.lyric.align =
  
  ## describes the alignment of lyric syllables associated with a note or chord.
  attribute lyric.align { xsd:decimal }?
mei_att.lyricstyle.attribute.lyric.fam =
  
  ## sets the font family default value for lyrics.
  attribute lyric.fam { data.FONTFAMILY }?
mei_att.lyricstyle.attribute.lyric.name =
  
  ## sets the font name default value for lyrics.
  attribute lyric.name { data.FONTNAME }?
mei_att.lyricstyle.attribute.lyric.size =
  
  ## sets the default font size value for lyrics.
  attribute lyric.size { xsd:decimal }?
mei_att.lyricstyle.attribute.lyric.style =
  
  ## sets the default font style value for lyrics.
  attribute lyric.style { data.FONTSTYLE }?
mei_att.lyricstyle.attribute.lyric.weight =
  
  ## sets the default font weight value for lyrics.
  attribute lyric.weight { data.FONTWEIGHT }?
mei_att.measurement.attributes = mei_att.measurement.attribute.unit
mei_att.measurement.attribute.unit =
  
  ## indicates the unit used for a measurement of size.
  ## Suggested values include: 1] cm; 2] mm; 3] in; 4] px; 5] pt; 6] pc
  attribute unit {
    
    ## centimeter.
    "cm"
    | 
      ## millimeter.
      "mm"
    | 
      ## inch.
      "in"
    | 
      ## pixel.
      "px"
    | 
      ## point.
      "pt"
    | 
      ## pica.
      "pc"
    | xsd:Name
  }?
mei_att.width.attributes = mei_att.width.attribute.width
mei_att.width.attribute.width =
  
  ## measurement of the horizontal dimension of an entity. This value can only be interpreted meaningfully in combination with the units attribute. The width attribute may be used to capture measure width data for interchange with music printing systems that utilize this information for printing. On <barLine> the width attribute captures the width of the preceding measure.
  attribute width { xsd:decimal }?
mei_att.medium.attributes = mei_att.medium.attribute.medium
mei_att.medium.attribute.medium =
  
  ## describes the writing medium.
  attribute medium { text }?
mei_att.meiversion.attributes = mei_att.meiversion.attribute.meiversion
mei_att.meiversion.attribute.meiversion =
  
  ## specifies the version number of the MEI Guidelines in use.
  [ a:defaultValue = "2012" ]
  attribute meiversion {
    
    ## this version of the schema.
    "2012"
  }?
mei_att.meterconformance.attributes =
  mei_att.meterconformance.attribute.metcon
mei_att.meterconformance.attribute.metcon =
  
  ## indicates the relationship between the content of a staff or layer and the prevailing meter.
  attribute metcon {
    
    ## conformant with the prevailing meter.
    "c"
    | 
      ## incomplete; i.e., not enough beats.
      "i"
    | 
      ## overfull; i.e., too many beats.
      "o"
  }?
mei_att.meterconformance.bar.attributes =
  mei_att.meterconformance.bar.attribute.metcon,
  mei_att.meterconformance.bar.attribute.control
mei_att.meterconformance.bar.attribute.metcon =
  
  ## indicates the relationship between the content of a measure and the prevailing meter.
  attribute metcon { data.BOOLEAN }?
mei_att.meterconformance.bar.attribute.control =
  
  ## indicates whether or not a bar line is "controlling"; that is, if it indicates a point of alignment across all the parts. Bar lines within a score are usually controlling; that is, they "line up". Bar lines within parts may or may not be controlling. When applied to <measure>, this attribute indicates the nature of the right barline but not the left.
  attribute control { data.BOOLEAN }?
mei_att.meterSigDefault.log.attributes =
  mei_att.meterSigDefault.log.attribute.meter.count,
  mei_att.meterSigDefault.log.attribute.meter.unit
mei_att.meterSigDefault.log.attribute.meter.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter signature.
  attribute meter.count { xsd:decimal }?
mei_att.meterSigDefault.log.attribute.meter.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute meter.unit { xsd:decimal }?
mei_att.meterSigDefault.vis.attributes =
  mei_att.meterSigDefault.vis.attribute.meter.rend,
  mei_att.meterSigDefault.vis.attribute.meter.showchange,
  mei_att.meterSigDefault.vis.attribute.meter.sym
mei_att.meterSigDefault.vis.attribute.meter.rend =
  
  ## contains an indication of how the meter signature should be rendered.
  attribute meter.rend {
    
    ## the lower number in the meter signature is replaced by a note symbol.
    "denomsym"
    | 
      ## meter signature rendered using traditional numeric values.
      "norm"
    | 
      ## meter signature not rendered.
      "invis"
  }?
mei_att.meterSigDefault.vis.attribute.meter.showchange =
  
  ## determines whether a new meter signature should be displayed when the meter signature changes.
  attribute meter.showchange { data.BOOLEAN }?
mei_att.meterSigDefault.vis.attribute.meter.sym =
  
  ## indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute meter.sym { data.METERSIGN }?
mei_att.mmtempo.attributes = mei_att.mmtempo.attribute.mm
mei_att.mmtempo.attribute.mm =
  
  ## used to describe tempo in terms of beats (meter signature denominator) per minute, ala M.M. (Maezel's Metronome).
  attribute mm { data.TEMPOVALUE }?
mei_att.multinummeasures.attributes =
  mei_att.multinummeasures.attribute.multi.number
mei_att.multinummeasures.attribute.multi.number =
  
  ## indicates whether programmatically calculated counts of multiple measures of rest (mRest) and whole measure repeats (mRpt) in parts should be rendered.
  attribute multi.number { data.BOOLEAN }?
mei_att.name.attributes =
  mei_att.authorized.attributes,
  mei_att.canonical.attributes,
  mei_att.name.attribute.nymref,
  mei_att.name.attribute.role
mei_att.name.attribute.nymref =
  
  ## used to record a pointer to the regularized form of the name elsewhere in the document.
  attribute nymref { data.URI }?
mei_att.name.attribute.role =
  
  ## used to specify further information about the entity referenced by this name, for example, the occupation of a person or the status of a place.
  attribute role { text }?
mei_att.octave.attributes = mei_att.octave.attribute.oct
mei_att.octave.attribute.oct =
  
  ## captures written octave information.
  attribute oct { data.OCTAVE }?
mei_att.octavedefault.attributes =
  mei_att.octavedefault.attribute.octave.default
mei_att.octavedefault.attribute.octave.default =
  
  ## contains a default octave specification for use when the first note, rest, chord, etc. in a measure does not have an octave value specified.
  attribute octave.default { data.OCTAVE }?
mei_att.onelinestaff.attributes =
  mei_att.onelinestaff.attribute.ontheline
mei_att.onelinestaff.attribute.ontheline =
  
  ## determines the placement of notes on a 1-line staff. A value of 'true' places all notes on the line, while a value of 'false' places stems-up notes above the line and stems-down notes below the line.
  attribute ontheline { data.BOOLEAN }?
mei_att.octavedisplacement.attributes =
  mei_att.octavedisplacement.attribute.dis,
  mei_att.octavedisplacement.attribute.dis.place
mei_att.octavedisplacement.attribute.dis =
  
  ## records the amount of octave displacement.
  attribute dis { data.OCTAVE.DIS }?
mei_att.octavedisplacement.attribute.dis.place =
  
  ## records the direction of octave displacement.
  attribute dis.place { data.PLACE }?
mei_att.plist.attributes =
  mei_att.plist.attribute.plist, mei_att.plist.attribute.evaluate
mei_att.plist.attribute.plist =
  
  ## contains a space separated list of references that identify logical events that participate in a collection, such as notes under a phrase mark.
  attribute plist { data.URIS }?
mei_att.plist.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
mei_att.pitch.attributes = mei_att.pitch.attribute.pname
mei_att.pitch.attribute.pname =
  
  ## contains a written pitch name.
  attribute pname { data.PITCHNAME }?
mei_att.pitched.attributes =
  mei_att.pitch.attributes, mei_att.octave.attributes
mei_att.placement.attributes = mei_att.placement.attribute.place
mei_att.placement.attribute.place =
  
  ## captures the placement of the item with respect to the staff with which it is associated.
  attribute place { data.STAFFREL }?
mei_att.relativesize.attributes = mei_att.relativesize.attribute.size
mei_att.relativesize.attribute.size =
  
  ## describes the relative size of a feature.
  attribute size { data.SIZE }?
mei_att.responsibility.attributes =
  mei_att.responsibility.attribute.resp
mei_att.responsibility.attribute.resp =
  
  ## captures information regarding responsibility for some aspect of the text's creation, transcription, editing, or encoding. Its value must point to one or more identifiers declared in the document header.
  attribute resp {
    list { data.URI+ }
  }?
mei_att.scalable.attributes = mei_att.scalable.attribute.scale
mei_att.scalable.attribute.scale =
  
  ## scale factor to be applied to the feature to make it the desired display size.
  attribute scale { data.PERCENT }?
mei_att.sequence.attributes = mei_att.sequence.attribute.seq
mei_att.sequence.attribute.seq =
  
  ## used to assign a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:positiveInteger }?
mei_att.slashcount.attributes = mei_att.slashcount.attribute.slash
mei_att.slashcount.attribute.slash =
  
  ## indicates the number of slashes present.
  attribute slash { data.SLASH }?
mei_att.slurpresent.attributes = mei_att.slurpresent.attribute.slur
mei_att.slurpresent.attribute.slur =
  
  ## indicates that this element participates in a slur. If visual information about the slur needs to be recorded, then a <slur> element should be employed.
  attribute slur { data.SLURS }?
mei_att.staffident.attributes = mei_att.staffident.attribute.staff
mei_att.staffident.attribute.staff =
  
  ##
  attribute staff { text }?
mei_att.staffloc.attributes = mei_att.staffloc.attribute.loc
mei_att.staffloc.attribute.loc =
  
  ## holds the staff location of the feature.
  attribute loc { data.STAFFLOC }?
mei_att.startid.attributes = mei_att.startid.attribute.startid
mei_att.startid.attribute.startid =
  
  ## holds a reference to the first element in a sequence of events to which the feature applies.
  attribute startid { data.URI }?
mei_att.startendid.attributes =
  mei_att.startid.attributes, mei_att.startendid.attribute.endid
mei_att.startendid.attribute.endid =
  
  ## indicates the final element in a sequence of events to which the feature applies.
  attribute endid { data.URI }?
mei_att.stemmed.attributes =
  mei_att.stemmed.attribute.stem.dir,
  mei_att.stemmed.attribute.stem.len,
  mei_att.stemmed.attribute.stem.pos,
  mei_att.stemmed.attribute.stem.x,
  mei_att.stemmed.attribute.stem.y
mei_att.stemmed.attribute.stem.dir =
  
  ## describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
mei_att.stemmed.attribute.stem.len =
  
  ## encodes the stem length.
  attribute stem.len { xsd:decimal }?
mei_att.stemmed.attribute.stem.pos =
  
  ## records the position of the stem in relation to the note head(s).
  attribute stem.pos { data.STEMPOSITION }?
mei_att.stemmed.attribute.stem.x =
  
  ## records the output x coordinate of the stem's attachment point.
  attribute stem.x { xsd:decimal }?
mei_att.stemmed.attribute.stem.y =
  
  ## records the output y coordinate of the stem's attachment point.
  attribute stem.y { xsd:decimal }?
mei_att.syltext.attributes = mei_att.syltext.attribute.syl
mei_att.syltext.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
mei_att.textstyle.attributes =
  mei_att.textstyle.attribute.text.fam,
  mei_att.textstyle.attribute.text.name,
  mei_att.textstyle.attribute.text.size,
  mei_att.textstyle.attribute.text.style,
  mei_att.textstyle.attribute.text.weight
mei_att.textstyle.attribute.text.fam =
  
  ## provides a default value for the font family name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.fam { data.FONTFAMILY }?
mei_att.textstyle.attribute.text.name =
  
  ## provides a default value for the font name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.name { data.FONTNAME }?
mei_att.textstyle.attribute.text.size =
  
  ## provides a default value for the font size of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.size { xsd:decimal }?
mei_att.textstyle.attribute.text.style =
  
  ## provides a default value for the font style of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.style { data.FONTSTYLE }?
mei_att.textstyle.attribute.text.weight =
  
  ## provides a default value for the font weight for text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.weight { data.FONTWEIGHT }?
mei_att.tiepresent.attributes = mei_att.tiepresent.attribute.tie
mei_att.tiepresent.attribute.tie =
  
  ## indicates that this element participates in a tie. If visual information about the tie needs to be recorded, then a <tie> element should be employed.
  attribute tie { data.TIES }?
mei_att.timestamp.musical.attributes =
  mei_att.timestamp.musical.attribute.tstamp
mei_att.timestamp.musical.attribute.tstamp =
  
  ## encodes the onset time in terms of musical time, i.e., beats[.fractional_beat_part].
  attribute tstamp { data.BEAT }?
mei_att.timestamp.performed.attributes =
  mei_att.timestamp.performed.attribute.tstamp.ges,
  mei_att.timestamp.performed.attribute.tstamp.real
mei_att.timestamp.performed.attribute.tstamp.ges =
  
  ## used to record the onset time in pulses per quarter note (ppq, MusicXML divisions, or MIDI clicks) since the start of the file.
  attribute tstamp.ges { xsd:nonNegativeInteger }?
mei_att.timestamp.performed.attribute.tstamp.real =
  
  ## used to record the onset time in terms of ISO time since the start of the file.
  attribute tstamp.real { data.ISOTIME }?
mei_att.transposition.attributes =
  mei_att.transposition.attribute.trans.diat,
  mei_att.transposition.attribute.trans.semi
mei_att.transposition.attribute.trans.diat =
  
  ## records the amount of diatonic pitch shift, e.g., C to C♯ = 0, C to D♭ = 1, necessary to calculate the sounded pitch from the written one. 
  attribute trans.diat { xsd:decimal }?
mei_att.transposition.attribute.trans.semi =
  
  ## records the amount of pitch shift in semitones, e.g., C to C♯ = 1, C to D♭ = 1, necessary to calculate the sounded pitch from the written one. 
  attribute trans.semi { xsd:decimal }?
mei_att.tupletpresent.attributes =
  mei_att.tupletpresent.attribute.tuplet
mei_att.tupletpresent.attribute.tuplet =
  
  ## indicates that this feature participates in a tuplet. If visual information about the tuplet needs to be recorded, then a <tuplet> element should be employed.
  attribute tuplet { data.TUPLETS }?
mei_att.typed.attributes =
  mei_att.typed.attribute.type, mei_att.typed.attribute.subtype
mei_att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type { xsd:NMTOKEN }?
mei_att.typed.attribute.subtype =
  
  ## provide any sub-classification for the element, additional to that given by its type attribute.
  attribute subtype { xsd:NMTOKEN }?
mei_att.typography.attributes =
  mei_att.typography.attribute.fontfam,
  mei_att.typography.attribute.fontname,
  mei_att.typography.attribute.fontsize,
  mei_att.typography.attribute.fontstyle,
  mei_att.typography.attribute.fontweight
mei_att.typography.attribute.fontfam =
  
  ## contains the name of a font-family.
  attribute fontfam { data.FONTFAMILY }?
mei_att.typography.attribute.fontname =
  
  ## holds the name of a font.
  attribute fontname { data.FONTNAME }?
mei_att.typography.attribute.fontsize =
  
  ## indicates the size of a font in printers' points, i.e., 1/72nd of an inch.
  attribute fontsize { xsd:decimal }?
mei_att.typography.attribute.fontstyle =
  
  ## records the style of a font, i.e, italic, oblique, or normal.
  attribute fontstyle { data.FONTSTYLE }?
mei_att.typography.attribute.fontweight =
  
  ## used to indicate bold type.
  attribute fontweight { data.FONTWEIGHT }?
mei_att.visibility.attributes = mei_att.visibility.attribute.visible
mei_att.visibility.attribute.visible =
  
  ## indicates if a feature should be rendered when the notation is presented graphically or sounded when it is presented in an aural form.
  attribute visible { data.BOOLEAN }?
mei_att.visualoffset.ho.attributes =
  mei_att.visualoffset.ho.attribute.ho
mei_att.visualoffset.ho.attribute.ho =
  
  ## records a horizontal adjustment to a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute ho { data.INTERLINE }?
mei_att.visualoffset.to.attributes =
  mei_att.visualoffset.to.attribute.to
mei_att.visualoffset.to.attribute.to =
  
  ## records a timestamp adjustment of a feature's programmatically-determined location in terms of musical time; that is, beats.
  attribute to { data.TSTAMPOFFSET }?
mei_att.visualoffset.vo.attributes =
  mei_att.visualoffset.vo.attribute.vo
mei_att.visualoffset.vo.attribute.vo =
  
  ## records the vertical adjustment of a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute vo { data.INTERLINE }?
mei_att.visualoffset.attributes =
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.visualoffset.vo.attributes
mei_att.visualoffset2.ho.attributes =
  mei_att.visualoffset2.ho.attribute.startho,
  mei_att.visualoffset2.ho.attribute.endho
mei_att.visualoffset2.ho.attribute.startho =
  
  ## records the horizontal adjustment of a feature's programmatically-determined start point.
  attribute startho { data.INTERLINE }?
mei_att.visualoffset2.ho.attribute.endho =
  
  ## records the horizontal adjustment of a feature's programmatically-determined end point.
  attribute endho { data.INTERLINE }?
mei_att.visualoffset2.to.attributes =
  mei_att.visualoffset2.to.attribute.startto,
  mei_att.visualoffset2.to.attribute.endto
mei_att.visualoffset2.to.attribute.startto =
  
  ## records a timestamp adjustment of a feature's programmatically-determined start point.
  attribute startto { data.TSTAMPOFFSET }?
mei_att.visualoffset2.to.attribute.endto =
  
  ## records a timestamp adjustment of a feature's programmatically-determined end point.
  attribute endto { data.TSTAMPOFFSET }?
mei_att.visualoffset2.vo.attributes =
  mei_att.visualoffset2.vo.attribute.startvo,
  mei_att.visualoffset2.vo.attribute.endvo
mei_att.visualoffset2.vo.attribute.startvo =
  
  ## records a vertical adjustment of a feature's programmatically-determined start point.
  attribute startvo { data.INTERLINE }?
mei_att.visualoffset2.vo.attribute.endvo =
  
  ## records a vertical adjustment of a feature's programmatically-determined end point.
  attribute endvo { data.INTERLINE }?
mei_att.visualoffset2.attributes =
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.visualoffset2.vo.attributes
mei_att.xy.attributes = mei_att.xy.attribute.x, mei_att.xy.attribute.y
mei_att.xy.attribute.x =
  
  ## encodes an x coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute x { xsd:decimal }?
mei_att.xy.attribute.y =
  
  ## encodes an y coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute y { xsd:decimal }?
mei_att.xy2.attributes =
  mei_att.xy2.attribute.x2, mei_att.xy2.attribute.y2
mei_att.xy2.attribute.x2 =
  
  ## encodes the optional 2nd x coordinate.
  attribute x2 { xsd:decimal }?
mei_att.xy2.attribute.y2 =
  
  ## encodes the optional 2nd y coordinate.
  attribute y2 { xsd:decimal }?
mei_att.accid.anl.attributes = mei_att.common.anl.attributes
mei_att.accid.ges.attributes = empty
mei_att.accid.log.attributes =
  mei_att.accidental.attributes,
  mei_att.controlevent.attributes,
  mei_att.staffloc.attributes,
  mei_att.accid.log.attribute.func
mei_att.accid.log.attribute.func =
  
  ## records the function of an accidental.
  attribute func {
    
    ## cautionary accidental.
    "caution"
    | 
      ## editorial accidental.
      "edit"
  }?
mei_att.accid.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.vo.attributes,
  mei_att.xy.attributes,
  mei_att.enclosingchars.attributes
mei_att.annot.anl.attributes = mei_att.common.anl.attributes
mei_att.annot.ges.attributes = mei_att.duration.performed.attributes
mei_att.annot.log.attributes =
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes,
  mei_att.timestamp.musical.attributes,
  mei_att.timestamp.performed.attributes,
  mei_att.staffident.attributes,
  mei_att.layerident.attributes
mei_att.annot.vis.attributes = empty
mei_att.artic.anl.attributes = mei_att.common.anl.attributes
mei_att.artic.ges.attributes = empty
mei_att.artic.log.attributes =
  mei_att.articulation.attributes,
  mei_att.controlevent.attributes,
  mei_att.staffloc.attributes
mei_att.artic.vis.attributes =
  mei_att.color.attributes,
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.enclosingchars.attributes
mei_att.barLine.anl.attributes = mei_att.common.anl.attributes
mei_att.barLine.ges.attributes = mei_att.timestamp.musical.attributes
mei_att.barLine.log.attributes =
  mei_att.meterconformance.bar.attributes,
  mei_att.barLine.log.attribute.rend
mei_att.barLine.log.attribute.rend =
  
  ## records the appearance and usually the function of the bar line.
  attribute rend { data.BARRENDITION }?
mei_att.barLine.vis.attributes =
  mei_att.barplacement.attributes,
  mei_att.color.attributes,
  mei_att.measurement.attributes,
  mei_att.width.attributes
mei_att.chord.anl.attributes =
  mei_att.common.anl.attributes, mei_att.melodicfunction.attributes
mei_att.chord.ges.attributes =
  mei_att.articulation.performed.attributes,
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes
mei_att.chord.log.attributes =
  mei_att.event.attributes,
  mei_att.articulation.attributes,
  mei_att.augmentdots.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.syltext.attributes,
  mei_att.slurpresent.attributes,
  mei_att.tiepresent.attributes,
  mei_att.tupletpresent.attributes
mei_att.chord.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.stemmed.attributes,
  mei_att.visibility.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.xy.attributes,
  mei_att.chord.vis.attribute.cluster
mei_att.chord.vis.attribute.cluster =
  
  ## indicates a single alternative note head should be displayed instead of individual note heads. See Read, p. 320-321, re: tone clusters.
  attribute cluster { data.CLUSTER }?
mei_att.clef.anl.attributes = mei_att.common.anl.attributes
mei_att.clef.ges.attributes = empty
mei_att.clef.log.attributes =
  mei_att.clefshape.attributes,
  mei_att.lineloc.attributes,
  mei_att.octave.attributes,
  mei_att.octavedisplacement.attributes,
  mei_att.clef.log.attribute.cautionary
mei_att.clef.log.attribute.cautionary =
  
  ## records the function of the clef. A "cautionary" clef does not change the following pitches.
  attribute cautionary { data.BOOLEAN }?
mei_att.clef.vis.attributes =
  mei_att.altsym.attributes, mei_att.color.attributes
mei_att.clefGrp.anl.attributes = mei_att.common.anl.attributes
mei_att.clefGrp.ges.attributes = empty
mei_att.clefGrp.log.attributes = empty
mei_att.clefGrp.vis.attributes = empty
mei_att.custos.anl.attributes = mei_att.common.anl.attributes
mei_att.custos.ges.attributes = empty
mei_att.custos.log.attributes =
  mei_att.pitched.attributes, mei_att.custos.log.attribute.target
mei_att.custos.log.attribute.target =
  
  ## encodes the target note when its pitch differs from the pitch at which the custos appears.
  attribute target { data.URI }?
mei_att.custos.vis.attributes =
  mei_att.altsym.attributes, mei_att.color.attributes
mei_att.dir.anl.attributes = mei_att.common.anl.attributes
mei_att.dir.ges.attributes = mei_att.duration.performed.attributes
mei_att.dir.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.dir.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.dot.anl.attributes = mei_att.common.anl.attributes
mei_att.dot.ges.attributes = empty
mei_att.dot.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.staffloc.attributes,
  mei_att.dot.log.attribute.form
mei_att.dot.log.attribute.form =
  
  ## records the function of the dot.
  attribute form {
    
    ## augmentation dot.
    "aug"
    | 
      ## dot of division.
      "div"
  }?
mei_att.dot.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.vo.attributes,
  mei_att.xy.attributes
mei_att.dynam.anl.attributes = mei_att.common.anl.attributes
mei_att.dynam.ges.attributes = mei_att.duration.performed.attributes
mei_att.dynam.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.dynam.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.ending.anl.attributes = mei_att.common.anl.attributes
mei_att.ending.ges.attributes = empty
mei_att.ending.log.attributes = empty
mei_att.ending.vis.attributes = empty
mei_att.grpSym.anl.attributes = mei_att.common.anl.attributes
mei_att.grpSym.ges.attributes = empty
mei_att.grpSym.log.attributes = mei_att.staffgroupingsym.attributes
mei_att.grpSym.vis.attributes =
  mei_att.visualoffset.attributes, mei_att.xy.attributes
mei_att.keySig.anl.attributes = mei_att.common.anl.attributes
mei_att.keySig.ges.attributes = empty
mei_att.keySig.log.attributes =
  mei_att.accidental.attributes,
  mei_att.pitch.attributes,
  mei_att.keySig.log.attribute.mode
mei_att.keySig.log.attribute.mode =
  
  ## indicates major, minor, or other tonality.
  attribute mode { data.MODE }?
mei_att.keySig.vis.attributes = empty
mei_att.layer.anl.attributes = mei_att.common.anl.attributes
mei_att.layer.ges.attributes = empty
mei_att.layer.log.attributes =
  mei_att.meterconformance.attributes, mei_att.layer.log.attribute.def
mei_att.layer.log.attribute.def =
  
  ## provides a mechanism for linking the layer to a layerDef element.
  attribute def { data.URI }?
mei_att.layer.vis.attributes = mei_att.visibility.attributes
mei_att.layerDef.anl.attributes = empty
mei_att.layerDef.ges.attributes = mei_att.instrumentident.attributes
mei_att.layerDef.log.attributes =
  mei_att.duration.default.attributes, mei_att.octavedefault.attributes
mei_att.layerDef.vis.attributes =
  mei_att.labels.addl.attributes,
  mei_att.beaming.vis.attributes,
  mei_att.textstyle.attributes,
  mei_att.visibility.attributes
mei_att.meterSig.log.attributes =
  mei_att.meterSig.log.attribute.count,
  mei_att.meterSig.log.attribute.sym,
  mei_att.meterSig.log.attribute.unit
mei_att.meterSig.log.attribute.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter signature.
  attribute count { xsd:decimal }?
mei_att.meterSig.log.attribute.sym =
  
  ## indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute sym { data.METERSIGN }?
mei_att.meterSig.log.attribute.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute unit { xsd:decimal }?
mei_att.note.anl.attributes =
  mei_att.common.anl.attributes,
  mei_att.harmonicfunction.attributes,
  mei_att.intervallicdesc.attributes,
  mei_att.melodicfunction.attributes,
  mei_att.pitchclass.attributes,
  mei_att.solfa.attributes
mei_att.note.ges.attributes =
  mei_att.accidental.performed.attributes,
  mei_att.articulation.performed.attributes,
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes,
  mei_att.note.ges.mensural.attributes,
  mei_att.note.ges.attribute.oct.ges,
  mei_att.note.ges.attribute.pname.ges,
  mei_att.note.ges.attribute.pnum
mei_att.note.ges.attribute.oct.ges =
  
  ## records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
mei_att.note.ges.attribute.pname.ges =
  
  ## contains a performed pitch name that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
mei_att.note.ges.attribute.pnum =
  
  ## holds a pitch-to-number mapping, a base-40 or MIDI note number, for example.
  attribute pnum { data.PITCHNUMBER }?
mei_att.note.log.attributes =
  mei_att.event.attributes,
  mei_att.accidental.attributes,
  mei_att.articulation.attributes,
  mei_att.augmentdots.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.pitched.attributes,
  mei_att.syltext.attributes,
  mei_att.slurpresent.attributes,
  mei_att.tiepresent.attributes,
  mei_att.tupletpresent.attributes,
  mei_att.note.log.mensural.attributes
mei_att.note.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.coloration.attributes,
  mei_att.enclosingchars.attributes,
  mei_att.relativesize.attributes,
  mei_att.stemmed.attributes,
  mei_att.visibility.attributes,
  mei_att.visualoffset.ho.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.xy.attributes,
  mei_att.note.vis.attribute.headshape
mei_att.note.vis.attribute.headshape =
  
  ## used to override the head shape normally used for the given duration.
  attribute headshape { data.HEADSHAPE }?
mei_att.pad.anl.attributes = empty
mei_att.pad.ges.attributes = empty
mei_att.pad.log.attributes =
  mei_att.event.attributes, mei_att.pad.log.attribute.num
mei_att.pad.log.attribute.num =
  
  ## amount of "padding" to be added, in interline units; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute num { xsd:decimal }
mei_att.pad.vis.attributes = empty
mei_att.part.anl.attributes = mei_att.common.anl.attributes
mei_att.part.ges.attributes = empty
mei_att.part.log.attributes = empty
mei_att.part.vis.attributes = empty
mei_att.parts.anl.attributes = mei_att.common.anl.attributes
mei_att.parts.ges.attributes = empty
mei_att.parts.log.attributes = empty
mei_att.parts.vis.attributes = empty
mei_att.pb.anl.attributes = mei_att.common.anl.attributes
mei_att.pb.ges.attributes = empty
mei_att.pb.log.attributes = empty
mei_att.pb.vis.attributes = mei_att.pb.vis.attribute.func
mei_att.pb.vis.attribute.func =
  
  ## states the side of a leaf (as in a manuscript) on which the content following the <pb> element occurs.
  attribute func {
    
    ##
    "verso"
    | 
      ##
      "recto"
  }?
mei_att.phrase.anl.attributes =
  mei_att.common.anl.attributes, mei_att.joined.attributes
mei_att.phrase.ges.attributes = mei_att.duration.performed.attributes
mei_att.phrase.log.attributes =
  mei_att.controlevent.attributes,
  mei_att.startendid.attributes,
  mei_att.duration.timestamp.attributes
mei_att.phrase.vis.attributes =
  mei_att.color.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.attributes,
  mei_att.xy.attributes,
  mei_att.xy2.attributes
mei_att.rest.anl.attributes = mei_att.common.anl.attributes
mei_att.rest.ges.attributes =
  mei_att.duration.performed.attributes,
  mei_att.instrumentident.attributes,
  mei_att.rest.ges.mensural.attributes
mei_att.rest.log.attributes =
  mei_att.augmentdots.attributes,
  mei_att.event.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.tupletpresent.attributes
mei_att.rest.vis.attributes =
  mei_att.altsym.attributes,
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.rest.vis.mensural.attributes
mei_att.sb.anl.attributes = mei_att.common.anl.attributes
mei_att.sb.ges.attributes = empty
mei_att.sb.log.attributes = empty
mei_att.sb.vis.attributes = mei_att.sb.vis.attribute.rend
mei_att.sb.vis.attribute.rend =
  
  ## indicates whether hash marks should be rendered between systems. See Read, p. 436, ex. 26-3.
  attribute rend {
    
    ## display hash marks between systems.
    "hash"
  }?
mei_att.score.anl.attributes = mei_att.common.anl.attributes
mei_att.score.ges.attributes = empty
mei_att.score.log.attributes = empty
mei_att.score.vis.attributes = empty
mei_att.scoreDef.anl.attributes = empty
mei_att.scoreDef.ges.attributes =
  mei_att.mmtempo.attributes,
  mei_att.scoreDef.ges.attribute.tune.pname,
  mei_att.scoreDef.ges.attribute.tune.Hz,
  mei_att.scoreDef.ges.attribute.tune.temper
mei_att.scoreDef.ges.attribute.tune.pname =
  
  ## holds the pitch name of a tuning reference pitch.
  attribute tune.pname { data.PITCHNAME }?
mei_att.scoreDef.ges.attribute.tune.Hz =
  
  ## holds a value for cycles per second, i.e., Hertz, for a tuning reference pitch.
  attribute tune.Hz { xsd:decimal }?
mei_att.scoreDef.ges.attribute.tune.temper =
  
  ## provides an indication of the tuning system, 'just', for example.
  attribute tune.temper { data.TEMPERAMENT }?
mei_att.scoreDef.log.attributes =
  mei_att.cleffing.log.attributes,
  mei_att.duration.default.attributes,
  mei_att.keySigDefault.log.attributes,
  mei_att.meterSigDefault.log.attributes,
  mei_att.octavedefault.attributes,
  mei_att.transposition.attributes,
  mei_att.scoreDef.log.mensural.attributes
mei_att.scoreDef.vis.attributes =
  mei_att.barplacement.attributes,
  mei_att.cleffing.vis.attributes,
  mei_att.distances.attributes,
  mei_att.keySigDefault.vis.attributes,
  mei_att.lyricstyle.attributes,
  mei_att.meterSigDefault.vis.attributes,
  mei_att.multinummeasures.attributes,
  mei_att.onelinestaff.attributes,
  mei_att.textstyle.attributes,
  mei_att.scoreDef.vis.mensural.attributes,
  mei_att.scoreDef.vis.attribute.ending.rend,
  mei_att.scoreDef.vis.attribute.mnum.visible,
  mei_att.scoreDef.vis.attribute.music.name,
  mei_att.scoreDef.vis.attribute.music.size,
  mei_att.scoreDef.vis.attribute.optimize,
  mei_att.scoreDef.vis.attribute.page.height,
  mei_att.scoreDef.vis.attribute.page.width,
  mei_att.scoreDef.vis.attribute.page.units,
  mei_att.scoreDef.vis.attribute.page.topmar,
  mei_att.scoreDef.vis.attribute.page.botmar,
  mei_att.scoreDef.vis.attribute.page.leftmar,
  mei_att.scoreDef.vis.attribute.page.rightmar,
  mei_att.scoreDef.vis.attribute.page.panels,
  mei_att.scoreDef.vis.attribute.page.scale,
  mei_att.scoreDef.vis.attribute.spacing.packexp,
  mei_att.scoreDef.vis.attribute.spacing.packfact,
  mei_att.scoreDef.vis.attribute.spacing.staff,
  mei_att.scoreDef.vis.attribute.spacing.system,
  mei_att.scoreDef.vis.attribute.system.leftmar,
  mei_att.scoreDef.vis.attribute.system.rightmar,
  mei_att.scoreDef.vis.attribute.system.topmar
mei_att.scoreDef.vis.attribute.ending.rend =
  
  ## describes where ending marks should be displayed.
  attribute ending.rend {
    
    ## ending rendered only above top staff.
    "top"
    | 
      ## ending rendered above staves that have bar lines drawn across them.
      "barred"
    | 
      ## endings rendered above staff groups.
      "grouped"
  }?
mei_att.scoreDef.vis.attribute.mnum.visible =
  
  ## indicates whether measure numbers should be displayed.
  attribute mnum.visible { data.BOOLEAN }?
mei_att.scoreDef.vis.attribute.music.name =
  
  ## sets the default music font name.
  attribute music.name { data.MUSICFONT }?
mei_att.scoreDef.vis.attribute.music.size =
  
  ## sets the default music font size.
  attribute music.size { xsd:decimal }?
mei_att.scoreDef.vis.attribute.optimize =
  
  ## indicates whether staves without notes, rests, etc. should be displayed. When the value is 'true', empty staves are displayed.
  attribute optimize { data.BOOLEAN }?
mei_att.scoreDef.vis.attribute.page.height =
  
  ## describes the physical height of the rendered output page.
  attribute page.height { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.width =
  
  ## describes the physical width of the rendered output page.
  attribute page.width { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.units =
  
  ## contains the real-world measurement units (inches, centimeters, millimeters) used to describe the rendered page height, width, and margins.
  attribute page.units { data.PGUNITS }?
mei_att.scoreDef.vis.attribute.page.topmar =
  
  ## indicates the amount of whitespace at the top of a rendered score page.
  attribute page.topmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.botmar =
  
  ## indicates the amount of whitespace at the bottom of a rendered score page.
  attribute page.botmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.leftmar =
  
  ## indicates the amount of whitespace at the left side of a rendered score page.
  attribute page.leftmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.rightmar =
  
  ## indicates the amount of whitespace at the right side of a rendered score page.
  attribute page.rightmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.page.panels =
  
  ## indicates the number of logical pages to be rendered on a single physical page.
  attribute page.panels { data.PAGE.PANELS }?
mei_att.scoreDef.vis.attribute.page.scale =
  
  ## indicates how the page should be scaled when rendered.
  attribute page.scale { data.PGSCALE }?
mei_att.scoreDef.vis.attribute.spacing.packexp =
  
  ## describes a note's spacing relative to its time value.
  attribute spacing.packexp { xsd:decimal }?
mei_att.scoreDef.vis.attribute.spacing.packfact =
  
  ## describes the note spacing of output.
  attribute spacing.packfact { xsd:decimal }?
mei_att.scoreDef.vis.attribute.spacing.staff =
  
  ## sets the minimum amount of space between staves in the same system.
  attribute spacing.staff { xsd:decimal }?
mei_att.scoreDef.vis.attribute.spacing.system =
  
  ## contains a space-separated pair of numbers describing the minimum and maximum amount of space between systems.
  attribute spacing.system { text }?
mei_att.scoreDef.vis.attribute.system.leftmar =
  
  ## describes the amount of whitespace at the left system margin relative to page.leftmar.
  attribute system.leftmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.system.rightmar =
  
  ## describes the amount of whitespace at the right system margin relative to page.rightmar.
  attribute system.rightmar { xsd:decimal }?
mei_att.scoreDef.vis.attribute.system.topmar =
  
  ## describes the distance from page's top edge to the first system; used for first page only.
  attribute system.topmar { xsd:decimal }?
mei_att.section.anl.attributes = mei_att.common.anl.attributes
mei_att.section.ges.attributes = empty
mei_att.section.log.attributes = empty
mei_att.section.vis.attributes = mei_att.section.vis.attribute.restart
mei_att.section.vis.attribute.restart =
  
  ## indicates that staves begin again with this section.
  attribute restart { data.BOOLEAN }?
mei_att.space.anl.attributes = mei_att.common.anl.attributes
mei_att.space.ges.attributes = mei_att.duration.performed.attributes
mei_att.space.log.attributes =
  mei_att.augmentdots.attributes,
  mei_att.event.attributes,
  mei_att.duration.musical.attributes,
  mei_att.fermatapresent.attributes,
  mei_att.tupletpresent.attributes
mei_att.space.vis.attributes = mei_att.space.vis.attribute.compressable
mei_att.space.vis.attribute.compressable =
  
  ## indicates whether a space is 'compressible', i.e., if it may be removed at the discretion of processing software.
  attribute compressable { data.BOOLEAN }?
mei_att.staff.anl.attributes = mei_att.common.anl.attributes
mei_att.staff.ges.attributes = empty
mei_att.staff.log.attributes =
  mei_att.meterconformance.attributes, mei_att.staff.log.attribute.def
mei_att.staff.log.attribute.def =
  
  ## provides a mechanism for linking the staff to a staffDef element.
  attribute def { data.URI }?
mei_att.staff.vis.attributes = mei_att.visibility.attributes
mei_att.staffDef.anl.attributes = empty
mei_att.staffDef.ges.attributes = mei_att.instrumentident.attributes
mei_att.staffDef.log.attributes =
  mei_att.cleffing.log.attributes,
  mei_att.duration.default.attributes,
  mei_att.keySigDefault.log.attributes,
  mei_att.meterSigDefault.log.attributes,
  mei_att.octavedefault.attributes,
  mei_att.transposition.attributes,
  mei_att.staffDef.log.mensural.attributes
mei_att.staffDef.vis.attributes =
  mei_att.cleffing.vis.attributes,
  mei_att.distances.attributes,
  mei_att.keySigDefault.vis.attributes,
  mei_att.labels.addl.attributes,
  mei_att.lyricstyle.attributes,
  mei_att.meterSigDefault.vis.attributes,
  mei_att.multinummeasures.attributes,
  mei_att.onelinestaff.attributes,
  mei_att.scalable.attributes,
  mei_att.textstyle.attributes,
  mei_att.visibility.attributes,
  mei_att.staffDef.vis.mensural.attributes,
  mei_att.staffDef.vis.attribute.grid.show,
  mei_att.staffDef.vis.attribute.layerscheme,
  mei_att.staffDef.vis.attribute.lines,
  mei_att.staffDef.vis.attribute.lines.color,
  mei_att.staffDef.vis.attribute.lines.visible,
  mei_att.staffDef.vis.attribute.spacing
mei_att.staffDef.vis.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
mei_att.staffDef.vis.attribute.layerscheme =
  
  ## indicates the number of layers and their stem directions.
  attribute layerscheme { data.LAYERSCHEME }?
mei_att.staffDef.vis.attribute.lines =
  
  ## indicates the number of staff lines.
  attribute lines { xsd:positiveInteger }?
mei_att.staffDef.vis.attribute.lines.color =
  
  ## captures the colors of the staff lines. The value is structured; that is, it should have the same number of space-separated RGB values as the number of lines indicated by the lines attribute. A line can be made invisible by assigning it the same RGB value as the background, usually white.
  attribute lines.color { data.COLORS }?
mei_att.staffDef.vis.attribute.lines.visible =
  
  ## records whether all staff lines are visible.
  attribute lines.visible { data.BOOLEAN }?
mei_att.staffDef.vis.attribute.spacing =
  
  ## records the absolute distance (as opposed to the relative distances recorded in <scoreDef> elements) between this staff and the preceding one in the same system. This value is meaningless for the first staff in a system since the spacing.system attribute indicates the spacing between systems.
  attribute spacing { xsd:decimal }?
mei_att.staffGrp.anl.attributes = empty
mei_att.staffGrp.ges.attributes = mei_att.instrumentident.attributes
mei_att.staffGrp.log.attributes = empty
mei_att.staffGrp.vis.attributes =
  mei_att.labels.addl.attributes,
  mei_att.staffgroupingsym.attributes,
  mei_att.visibility.attributes,
  mei_att.staffGrp.vis.attribute.barthru
mei_att.staffGrp.vis.attribute.barthru =
  
  ## indicates whether bar lines go across the space between staves (true) or are only drawn across the lines of each staff (false).
  attribute barthru { data.BOOLEAN }?
mei_att.syl.anl.attributes = mei_att.common.anl.attributes
mei_att.syl.ges.attributes = empty
mei_att.syl.log.attributes =
  mei_att.syl.log.attribute.con, mei_att.syl.log.attribute.wordpos
mei_att.syl.log.attribute.con =
  
  ## describes the symbols typically used to indicate breaks between syllables and their functions.
  attribute con {
    
    ## space (word separator).
    "s"
    | 
      ## dash (syllable separator).
      "d"
    | 
      ## underscore (syllable extension).
      "u"
    | 
      ## tilde (syllable elision).
      "t"
  }?
mei_att.syl.log.attribute.wordpos =
  
  ## records the position of a syllable within a word.
  attribute wordpos {
    
    ## (initial) first syllable.
    "i"
    | 
      ## (medial) neither first nor last syllable.
      "m"
    | 
      ## (terminal) last syllable.
      "t"
  }?
mei_att.syl.vis.attributes =
  mei_att.typography.attributes,
  mei_att.visualoffset.attributes,
  mei_att.xy.attributes,
  mei_att.horizontalalign.attributes
mei_att.tempo.anl.attributes = mei_att.common.anl.attributes
mei_att.tempo.ges.attributes = mei_att.mmtempo.attributes
mei_att.tempo.log.attributes =
  mei_att.controlevent.attributes, mei_att.startid.attributes
mei_att.tempo.vis.attributes =
  mei_att.placement.attributes,
  mei_att.visualoffset.attributes,
  mei_att.visualoffset2.ho.attributes,
  mei_att.visualoffset2.to.attributes,
  mei_att.xy.attributes
mei_att.mensur.log.attributes =
  mei_att.duration.ratio.attributes,
  mei_att.slashcount.attributes,
  mei_att.staffloc.attributes,
  mei_att.mensur.log.attribute.dot,
  mei_att.mensur.log.attribute.modusmaior,
  mei_att.mensur.log.attribute.modusminor,
  mei_att.mensur.log.attribute.prolatio,
  mei_att.mensur.log.attribute.sign,
  mei_att.mensur.log.attribute.tempus
mei_att.mensur.log.attribute.dot =
  
  ## specifies whether a dot is to be added to the base symbol.
  attribute dot { data.BOOLEAN }?
mei_att.mensur.log.attribute.modusmaior =
  
  ## describes the maxima-long relationship.
  attribute modusmaior { data.MODUSMAIOR }?
mei_att.mensur.log.attribute.modusminor =
  
  ## describes the long-breve relationship.
  attribute modusminor { data.MODUSMINOR }?
mei_att.mensur.log.attribute.prolatio =
  
  ## describes the semibreve-minim relationship.
  attribute prolatio { data.PROLATIO }?
mei_att.mensur.log.attribute.sign =
  
  ## the base symbol in the mensuration sign/time signature of mensural notation.
  attribute sign { data.MENSURATIONSIGN }?
mei_att.mensur.log.attribute.tempus =
  
  ## describes the breve-semibreve relationship.
  attribute tempus { data.TEMPUS }?
mei_model.addressLike = mei_address
mei_model.addressLike_alternation = mei_address
mei_model.addressLike_sequence = mei_address
mei_model.addressLike_sequenceOptional = mei_address?
mei_model.addressLike_sequenceOptionalRepeatable = mei_address*
mei_model.addressLike_sequenceRepeatable = mei_address+
mei_model.annotLike = annot
mei_model.annotLike_alternation = annot
mei_model.annotLike_sequence = annot
mei_model.annotLike_sequenceOptional = annot?
mei_model.annotLike_sequenceOptionalRepeatable = annot*
mei_model.annotLike_sequenceRepeatable = annot+
mei_model.biblLike = mei_bibl
mei_model.biblLike_alternation = mei_bibl
mei_model.biblLike_sequence = mei_bibl
mei_model.biblLike_sequenceOptional = mei_bibl?
mei_model.biblLike_sequenceOptionalRepeatable = mei_bibl*
mei_model.biblLike_sequenceRepeatable = mei_bibl+
mei_model.biblPart = mei_model.editionLike
mei_model.captionLike = mei_caption
mei_model.controleventLike = dir | dynam | phrase | tempo
mei_model.controleventLike_alternation = dir | dynam | phrase | tempo
mei_model.controleventLike_sequence = dir, dynam, phrase, tempo
mei_model.controleventLike_sequenceOptional =
  dir?, dynam?, phrase?, tempo?
mei_model.controleventLike_sequenceOptionalRepeatable =
  dir*, dynam*, phrase*, tempo*
mei_model.controleventLike_sequenceRepeatable =
  dir+, dynam+, phrase+, tempo+
mei_model.dateLike = mei_date
mei_model.dateLike_alternation = mei_date
mei_model.dateLike_sequence = mei_date
mei_model.dateLike_sequenceOptional = mei_date?
mei_model.dateLike_sequenceOptionalRepeatable = mei_date*
mei_model.dateLike_sequenceRepeatable = mei_date+
mei_model.editionLike = mei_edition
mei_model.editorialLike = mei_abbr | mei_expan
mei_model.editorialLike_alternation = mei_abbr | mei_expan
mei_model.editorialLike_sequence = mei_abbr, mei_expan
mei_model.editorialLike_sequenceOptional = mei_abbr?, mei_expan?
mei_model.editorialLike_sequenceOptionalRepeatable =
  mei_abbr*, mei_expan*
mei_model.editorialLike_sequenceRepeatable = mei_abbr+, mei_expan+
mei_model.endingLike = ending
mei_model.endingLike_alternation = ending
mei_model.endingLike_sequence = ending
mei_model.endingLike_sequenceOptional = ending?
mei_model.endingLike_sequenceOptionalRepeatable = ending*
mei_model.endingLike_sequenceRepeatable = ending+
mei_model.eventLike =
  mei_model.keySigLike
  | mei_model.meterSigLike
  | barLine
  | chord
  | clef
  | clefGrp
  | custos
  | mei_note
  | pad
  | rest
  | mei_space
  | mei_model.eventLike.mensural
mei_model.identifierLike = identifier
mei_model.identifierLike_alternation = identifier
mei_model.identifierLike_sequence = identifier
mei_model.identifierLike_sequenceOptional = identifier?
mei_model.identifierLike_sequenceOptionalRepeatable = identifier*
mei_model.identifierLike_sequenceRepeatable = identifier+
mei_model.incipLike = incip
mei_model.instrDefLike = notAllowed
mei_model.keyAccidLike = keyAccid
mei_model.keySigLike = keySig
mei_model.keySigLike_alternation = keySig
mei_model.keySigLike_sequence = keySig
mei_model.keySigLike_sequenceOptional = keySig?
mei_model.keySigLike_sequenceOptionalRepeatable = keySig*
mei_model.keySigLike_sequenceRepeatable = keySig+
mei_model.labelLike = mei_label
mei_model.layerDefLike = layerDef
mei_model.layerLike = layer
mei_model.lbLike = mei_lb
mei_model.lbLike_alternation = mei_lb
mei_model.lbLike_sequence = mei_lb
mei_model.lbLike_sequenceOptional = mei_lb?
mei_model.lbLike_sequenceOptionalRepeatable = mei_lb*
mei_model.lbLike_sequenceRepeatable = mei_lb+
mei_model.layerPart =
  mei_model.eventLike | mei_model.layerPart.mensuralAndNeumes
mei_model.mdivLike = mdiv
mei_model.metaLike.score_sequenceOptional =
  pgHead?, pgHead2?, pgFoot?, pgFoot2?
mei_model.measurementLike = mei_model.numLike
mei_model.measurementLike_alternation = mei_model.numLike_alternation
mei_model.measurementLike_sequence = mei_model.numLike_sequence
mei_model.measurementLike_sequenceOptional =
  mei_model.numLike_sequenceOptional?
mei_model.measurementLike_sequenceOptionalRepeatable =
  mei_model.numLike_sequenceOptionalRepeatable*
mei_model.measurementLike_sequenceRepeatable =
  mei_model.numLike_sequenceRepeatable+
mei_model.meterSigLike = notAllowed
mei_model.meterSigLike_alternation = notAllowed
mei_model.meterSigLike_sequence = empty
mei_model.meterSigLike_sequenceOptional = empty
mei_model.meterSigLike_sequenceOptionalRepeatable = empty
mei_model.meterSigLike_sequenceRepeatable = notAllowed
mei_model.milestoneLike.music = mei_model.pbLike | sb
mei_model.milestoneLike.text = mei_model.lbLike | mei_model.pbLike
mei_model.milestoneLike.text_alternation =
  mei_model.lbLike_alternation | mei_model.pbLike_alternation
mei_model.milestoneLike.text_sequence =
  mei_model.lbLike_sequence, mei_model.pbLike_sequence
mei_model.milestoneLike.text_sequenceOptional =
  mei_model.lbLike_sequenceOptional?, mei_model.pbLike_sequenceOptional?
mei_model.milestoneLike.text_sequenceOptionalRepeatable =
  mei_model.lbLike_sequenceOptionalRepeatable*,
  mei_model.pbLike_sequenceOptionalRepeatable*
mei_model.milestoneLike.text_sequenceRepeatable =
  mei_model.lbLike_sequenceRepeatable+,
  mei_model.pbLike_sequenceRepeatable+
mei_model.nameLike = mei_name
mei_model.nameLike_alternation = mei_name
mei_model.nameLike_sequence = mei_name
mei_model.nameLike_sequenceOptional = mei_name?
mei_model.nameLike_sequenceOptionalRepeatable = mei_name*
mei_model.nameLike_sequenceRepeatable = mei_name+
mei_model.noteModifierLike = accid | artic | dot
mei_model.noteModifierLike_alternation = accid | artic | dot
mei_model.noteModifierLike_sequence = accid, artic, dot
mei_model.noteModifierLike_sequenceOptional = accid?, artic?, dot?
mei_model.noteModifierLike_sequenceOptionalRepeatable =
  accid*, artic*, dot*
mei_model.noteModifierLike_sequenceRepeatable = accid+, artic+, dot+
mei_model.numLike = mei_num
mei_model.numLike_alternation = mei_num
mei_model.numLike_sequence = mei_num
mei_model.numLike_sequenceOptional = mei_num?
mei_model.numLike_sequenceOptionalRepeatable = mei_num*
mei_model.numLike_sequenceRepeatable = mei_num+
mei_model.paracontentPart =
  mei_model.textphraseLike
  | mei_model.editLike
  | mei_model.transcriptionLike
  | mei_model.tableLike
  | mei_model.listLike
  | mei_model.quoteLike
mei_model.pLike = mei_p
mei_model.pLike_alternation = mei_p
mei_model.pLike_sequence = mei_p
mei_model.pLike_sequenceOptional = mei_p?
mei_model.pLike_sequenceOptionalRepeatable = mei_p*
mei_model.pLike_sequenceRepeatable = mei_p+
mei_model.partLike = part
mei_model.partsLike = parts
mei_model.pbLike = mei_pb
mei_model.pbLike_alternation = mei_pb
mei_model.pbLike_sequence = mei_pb
mei_model.pbLike_sequenceOptional = mei_pb?
mei_model.pbLike_sequenceOptionalRepeatable = mei_pb*
mei_model.pbLike_sequenceRepeatable = mei_pb+
mei_model.rendLike = rend | stack
mei_model.rendLike_alternation = rend | stack
mei_model.rendLike_sequence = rend, stack
mei_model.rendLike_sequenceOptional = rend?, stack?
mei_model.rendLike_sequenceOptionalRepeatable = rend*, stack*
mei_model.rendLike_sequenceRepeatable = rend+, stack+
mei_model.repositoryLike = mei_repository
mei_model.repositoryLike_alternation = mei_repository
mei_model.repositoryLike_sequence = mei_repository
mei_model.repositoryLike_sequenceOptional = mei_repository?
mei_model.repositoryLike_sequenceOptionalRepeatable = mei_repository*
mei_model.repositoryLike_sequenceRepeatable = mei_repository+
mei_model.resourceLike = mei_facsimile
mei_model.scoreDefLike = scoreDef
mei_model.scoreDefLike_alternation = scoreDef
mei_model.scoreDefLike_sequence = scoreDef
mei_model.scoreDefLike_sequenceOptional = scoreDef?
mei_model.scoreDefLike_sequenceOptionalRepeatable = scoreDef*
mei_model.scoreDefLike_sequenceRepeatable = scoreDef+
mei_model.scoreLike = score
mei_model.scorePart =
  mei_model.endingLike
  | mei_model.scoreDefLike
  | mei_model.sectionLike
  | mei_model.staffDefLike
mei_model.sectionLike = section
mei_model.sectionLike_alternation = section
mei_model.sectionLike_sequence = section
mei_model.sectionLike_sequenceOptional = section?
mei_model.sectionLike_sequenceOptionalRepeatable = section*
mei_model.sectionLike_sequenceRepeatable = section+
mei_model.sectionPart =
  mei_model.endingLike
  | mei_model.scoreDefLike
  | mei_model.sectionLike
  | mei_model.sectionPart.mensuralAndNeumes
  | mei_model.staffDefLike
mei_model.sectionPart.mensuralAndNeumes = mei_model.staffLike
mei_model.sectionPart.mensuralAndNeumes_alternation =
  mei_model.staffLike_alternation
mei_model.sectionPart.mensuralAndNeumes_sequence =
  mei_model.staffLike_sequence
mei_model.sectionPart.mensuralAndNeumes_sequenceOptional =
  mei_model.staffLike_sequenceOptional?
mei_model.sectionPart.mensuralAndNeumes_sequenceOptionalRepeatable =
  mei_model.staffLike_sequenceOptionalRepeatable*
mei_model.sectionPart.mensuralAndNeumes_sequenceRepeatable =
  mei_model.staffLike_sequenceRepeatable+
mei_model.staffDefLike = staffDef
mei_model.staffDefLike_alternation = staffDef
mei_model.staffDefLike_sequence = staffDef
mei_model.staffDefLike_sequenceOptional = staffDef?
mei_model.staffDefLike_sequenceOptionalRepeatable = staffDef*
mei_model.staffDefLike_sequenceRepeatable = staffDef+
mei_model.staffDefPart =
  mei_model.keySigLike
  | mei_model.meterSigLike
  | clef
  | clefGrp
  | mei_model.staffDefPart.mensural
mei_model.staffGrpLike = staffGrp
mei_model.staffLike = staff
mei_model.staffLike_alternation = staff
mei_model.staffLike_sequence = staff
mei_model.staffLike_sequenceOptional = staff?
mei_model.staffLike_sequenceOptionalRepeatable = staff*
mei_model.staffLike_sequenceRepeatable = staff+
mei_model.staffPart.mensuralAndNeumes =
  mei_model.scoreDefLike | mei_model.staffDefLike
mei_model.staffPart =
  mei_model.layerLike | mei_model.staffPart.mensuralAndNeumes
mei_model.textcomponentLike =
  mei_model.pLike
  | mei_model.tableLike
  | mei_model.listLike
  | mei_model.quoteLike
  | mei_model.lgLike
mei_model.textphraseLike =
  mei_model.addressLike
  | mei_model.annotLike
  | mei_model.biblLike
  | mei_model.dateLike
  | mei_model.editorialLike
  | mei_model.identifierLike
  | mei_model.measurementLike
  | mei_model.milestoneLike.text
  | mei_model.nameLike
  | mei_model.rendLike
  | mei_model.titleLike
  | mei_model.figureLike
  | mei_model.nameLike.agent
  | mei_model.nameLike.place
  | mei_model.nameLike.label
  | mei_model.locrefLike
mei_model.textphraseLike.limited =
  mei_model.addressLike
  | mei_model.biblLike
  | mei_model.dateLike
  | mei_model.editorialLike
  | mei_model.identifierLike
  | mei_model.lbLike
  | mei_model.measurementLike
  | mei_model.nameLike
  | mei_model.rendLike
  | mei_model.titleLike
  | mei_model.figureLike
  | mei_model.nameLike.agent
  | mei_model.nameLike.place
  | mei_model.nameLike.label
  | mei_model.locrefLike
mei_model.titleLike = mei_title
mei_model.titleLike_alternation = mei_title
mei_model.titleLike_sequence = mei_title
mei_model.titleLike_sequenceOptional = mei_title?
mei_model.titleLike_sequenceOptionalRepeatable = mei_title*
mei_model.titleLike_sequenceRepeatable = mei_title+
mei_model.layerPart.mensuralAndNeumes =
  mei_model.scoreDefLike
  | mei_model.staffDefLike
  | mei_model.layerPart.mensural
accid =
  
  ## (accidental) – Records a temporary alteration to the pitch of a note. 
  element ns2:accid {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typography.attributes,
    mei_att.accid.log.attributes,
    mei_att.accid.vis.attributes,
    mei_att.accid.ges.attributes,
    mei_att.accid.anl.attributes,
    empty
  }
mei_actor =
  
  ## – Name of an actor appearing within a cast list.
  element ns2:actor {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_address =
  
  ## – Contains a postal address, for example of a publisher, an organization, or an individual. 
  element ns2:address {
    mei_addrLine+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_addrLine =
  
  ## (address line) – Single line of a postal address. 
  element ns2:addrLine {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
annot =
  
  ## (annotation) – Provides a short statement explaining the text or indicating the basis for an assertion. 
  element ns2:annot {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    mei_att.annot.log.attributes,
    mei_att.annot.vis.attributes,
    mei_att.annot.ges.attributes,
    mei_att.annot.anl.attributes,
    mei_att.plist.attributes,
    mei_att.responsibility.attributes,
    empty
  }
artic =
  
  ## (articulation) – An indication of how to play a note or chord. 
  element ns2:artic {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typography.attributes,
    mei_att.artic.log.attributes,
    mei_att.artic.vis.attributes,
    mei_att.artic.ges.attributes,
    mei_att.artic.anl.attributes,
    empty
  }
barLine =
  
  ## – Vertical line drawn through one or more staves that divides musical notation into metrical units. 
  element ns2:barLine {
    empty
    >> sch:pattern [
         id = "barLine-constraint-Check_barLinetaktplace"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:barLine[@taktplace]"
           "\x{a}" ~
           "               "
           sch:let [ name = "staff" value = "ancestor::mei:staff/@n" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "staffpos"
             value =
               "count(ancestor::mei:staff/preceding-sibling::mei:staff)               +                 1"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@taktplace) <= number(2 *               preceding::mei:staffDef[@n=$staff and @lines][1]/@lines)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.barLine.log.attributes,
    mei_att.barLine.vis.attributes,
    mei_att.barLine.ges.attributes,
    mei_att.barLine.anl.attributes,
    empty
  }
mei_bibl =
  
  ## (bibliographic reference) – Provides a citation for a published work. 
  element ns2:bibl {
    (text | mei_model.biblPart | mei_model.textphraseLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_body =
  
  ## – Contains the whole of a single musical text, excluding any front or back matter. 
  element ns2:body {
    mei_model.mdivLike+,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
mei_caption =
  
  ## – A label which accompanies an illustration or a table.
  element ns2:caption {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_castList =
  
  ## – Contains a single cast list or dramatis personae.
  element ns2:castList {
    mei_model.headLike?,
    (mei_castItem | castGrp)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_castItem =
  
  ## – Contains a single entry within a cast list, describing either a single role or a list of non-speaking roles.
  element ns2:castItem {
    (text | mei_roleDesc | mei_actor | instrVoice)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
castGrp =
  
  ## (cast group) – Groups one or more individual castItem elements within a cast list.
  element ns2:castGrp {
    (mei_castItem | castGrp | mei_roleDesc)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
chord =
  
  ## – A simultaneous sounding of two or more notes in the same layer *with the same duration*.
  element ns2:chord {
    (mei_note
     | artic
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.chord.log.attributes,
    mei_att.chord.vis.attributes,
    mei_att.chord.ges.attributes,
    mei_att.chord.anl.attributes,
    empty
  }
clef =
  
  ## – Indication of the exact location of a particular note on the staff and, therefore, the other notes as well. 
  element ns2:clef {
    empty
    >> sch:pattern [
         id = "clef-constraint-Check_clef_position_clef"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clef[ancestor::mei:staffDef[@lines]]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staffDef/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <=               number(ancestor::mei:staffDef[@n=$thisstaff and                 @lines][1]/@lines)"
             "The clef position must be less than or equal to the number of lines on the\x{a}" ~
             "              staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "clef-constraint-Check_clef_position_clef"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clef[ancestor::mei:staffDef[not(@lines)]]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staffDef/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <=               number(preceding::mei:staffDef[@n=$thisstaff and                 @lines][1]/@lines)"
             "The clef position must be less than or equal to the number of lines on the\x{a}" ~
             "              staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.clef.anl.attributes,
    mei_att.clef.ges.attributes,
    mei_att.clef.log.attributes,
    mei_att.clef.vis.attributes,
    empty
  }
clefGrp =
  
  ## (clef group) – A set of simultaneously-occurring clefs.
  element ns2:clefGrp {
    clef+,
    mei_att.common.attributes,
    mei_att.event.attributes,
    mei_att.facsimile.attributes,
    mei_att.clefGrp.log.attributes,
    mei_att.clefGrp.vis.attributes,
    mei_att.clefGrp.ges.attributes,
    mei_att.clefGrp.anl.attributes,
    empty
  }
custos =
  
  ## – Symbol placed at the end of a line of music to indicate the first note of the next line. Sometimes called a "direct". 
  element ns2:custos {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.custos.log.attributes,
    mei_att.custos.vis.attributes,
    mei_att.custos.ges.attributes,
    mei_att.custos.anl.attributes,
    empty
  }
mei_date =
  
  ## – A string identifying a point in time or the time period between two such points.
  element ns2:date {
    (text | mei_model.textphraseLike)*,
    mei_att.bibl.attributes,
    mei_att.calendared.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
dir =
  
  ## (directive) – A text expression that is on the score (typically above, below, or between staves, but not on the staff) not encoded elsewhere in more specific elements, such as <tempo> or <dynam>. 
  element ns2:dir {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "dir-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dir"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.typed.attributes,
    mei_att.dir.log.attributes,
    mei_att.dir.vis.attributes,
    mei_att.dir.ges.attributes,
    mei_att.dir.anl.attributes,
    empty
  }
dot =
  
  ## – Dot of augmentation or division. 
  element ns2:dot {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.dot.log.attributes,
    mei_att.dot.vis.attributes,
    mei_att.dot.ges.attributes,
    mei_att.dot.anl.attributes,
    empty
  }
dynam =
  
  ## (dynamic) – Indication of the volume of a note, phrase, or section of music. 
  element ns2:dynam {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.editLike
      | mei_model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "dynam-constraint-Start-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dynam"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.dynam.log.attributes,
    mei_att.dynam.vis.attributes,
    mei_att.dynam.ges.attributes,
    mei_att.dynam.anl.attributes,
    empty
  }
mei_edition =
  
  ## (edition designation) – A word or text phrase that indicates a difference in either content or form between the item being described and a related item previously issued by the same publisher/distributor (e.g. 2nd edition, version 2.0, etc.), or simultaneously issued by either the same publisher/distributor or another publisher/distributor (e.g. large print edition, British edition, etc.). 
  element ns2:edition {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
ending =
  
  ## – Alternative ending for a repeated passage of music; i.e., prima volta, seconda volta, etc. 
  element ns2:ending {
    expansion*,
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.sectionPart)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.ending.anl.attributes,
    mei_att.ending.ges.attributes,
    mei_att.ending.log.attributes,
    mei_att.ending.vis.attributes,
    empty
  }
expansion =
  
  ## – Indicates how a section may be programmatically expanded into its 'through-composed' form. 
  element ns2:expansion {
    empty,
    mei_att.common.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    mei_att.plist.attributes,
    empty
  }
mei_fw =
  
  ## (forme work) – This element is intended for capture of header/footer material that is non-repeating; that is, occuring on isolated pages. For recurring headers and footers use pgHead* and pgFoot* elements. 
  element ns2:fw {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_group =
  
  ## – Contains a composite musical text, grouping together a sequence of distinct musical texts (or groups of such musical texts) which are regarded as a unit for some purpose, for example, the collected works of a composer. 
  element ns2:group {
    (mei_music | mei_group),
    (mei_music | mei_group)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
grpSym =
  
  ## (group symbol) – A brace or bracket used to group two or more staves of a score or part. 
  element ns2:grpSym {
    mei_model.labelLike*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.grpSym.log.attributes,
    mei_att.grpSym.vis.attributes,
    mei_att.grpSym.ges.attributes,
    mei_att.grpSym.anl.attributes,
    empty
  }
identifier =
  
  ## – An alpha-numeric string that establishes the identity of the described material. 
  element ns2:identifier {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.authorized.attributes,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    empty
  }
incip =
  
  ## (incipit) – The opening music and/or words of a composition. 
  element ns2:incip {
    (incipCode
     | incipText
     | mei_model.scoreLike
     | mei_model.graphicLike)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.typed.attributes,
    empty
  }
keyAccid =
  
  ## (key accidental) – Accidental in a key signature. 
  element ns2:keyAccid {
    empty,
    mei_att.accidental.attributes,
    mei_att.common.attributes,
    mei_att.enclosingchars.attributes,
    mei_att.facsimile.attributes,
    mei_att.pitched.attributes,
    mei_att.staffloc.attributes,
    mei_att.xy.attributes,
    
    ## specifies whether enharmonic (written) values or implicit ("perform-able") values are allowed.
    attribute form {
      
      ## only performed values (sharp, flat, natural) allowed.
      "implicit"
      | 
        ## all enharmonic (written) values allowed.
        "explicit"
    }?,
    empty
  }
keySig =
  
  ## (key signature) – Written key signature. 
  element ns2:keySig {
    mei_model.keyAccidLike*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.keySig.anl.attributes,
    mei_att.keySig.ges.attributes,
    mei_att.keySig.log.attributes,
    mei_att.keySig.vis.attributes,
    empty
  }
mei_label =
  
  ## – A text string that identifies a staff, staff group, or contentItem.
  element ns2:label {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    empty
  }
layer =
  
  ## – An independent stream of events on a staff. 
  element ns2:layer {
    ((mei_model.appLike
      | mei_model.divLike
      | mei_model.milestoneLike.music
      | mei_model.staffDefLike
      | mei_model.annotLike
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.layerPart)*)
    >> sch:pattern [
         id = "layer-constraint-Check_layern"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:layer[@n]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "The n attribute must be a single\x{a}" ~
             "              integer."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.layer.log.attributes,
    mei_att.layer.vis.attributes,
    mei_att.layer.ges.attributes,
    mei_att.layer.anl.attributes,
    empty
  }
layerDef =
  
  ## (layer definition) – Container for layer meta-information.
  element ns2:layerDef {
    mei_model.labelLike*,
    (mei_model.instrDefLike*)
    >> sch:pattern [
         id = "layerDef-constraint-Check_layerDefn"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:layerDef"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "An n attribute with a single integer\x{a}" ~
             "              value must be present."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.layerDef.log.attributes,
    mei_att.layerDef.vis.attributes,
    mei_att.layerDef.ges.attributes,
    mei_att.layerDef.anl.attributes,
    empty
  }
mei_lb =
  
  ## (line break) – An empty formatting element that forces text to begin on a new line. 
  element ns2:lb {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.typed.attributes,
    
    ## states whether the line break follows a single line or a line group.
    attribute func {
      
      ##
      "line"
      | 
        ##
        "group"
    }?,
    empty
  }
mdiv =
  
  ## (musical division) – contains a subdivision of the body of a musical text. 
  element ns2:mdiv {
    ((mei_model.scoreLike?, mei_model.partsLike?)
     | mei_model.mdivLike*),
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    empty
  }
mei =
  
  ## – Contains a single MEI-conformant document, consisting of an MEI header and a musical text, either in isolation or as part of an meiCorpus element. 
  element ns2:mei {
    meiHead,
    mei_music
    >> sch:ns [
         prefix = "mei"
         uri = "http://www.music-encoding.org/ns/mei"
       ]
    >> sch:pattern [
         id = "mei-constraint-Check_staff"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:*[@staff]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "every $i in tokenize(@staff, '\s+') satisfies               $i=//mei:staffDef/@n"
             "The values in @staff must correspond to @n attribute of a\x{a}" ~
             "              staffDef element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.meiversion.attributes,
    mei_att.id.attributes,
    empty
  }
mei_music =
  
  ## – Contains a single musical text of any kind, whether unitary or composite, for example, an etude, opera, song cycle, symphony, or anthology of piano solos.
  element ns2:music {
    mei_model.alignLike*,
    mei_model.resourceLike*,
    macro.musicPart,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.meiversion.attributes,
    empty
  }
mei_name =
  
  ## – Proper noun or noun phrase. 
  element ns2:name {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_note =
  
  ## – A single pitched event. 
  element ns2:note {
    (mei_model.noteModifierLike
     | mei_model.verseLike
     | mei_model.sylLike
     | mei_model.appLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.note.log.attributes,
    mei_att.note.vis.attributes,
    mei_att.note.ges.attributes,
    mei_att.note.anl.attributes,
    empty
  }
mei_num =
  
  ## (number) – Numeric information in any form. 
  element ns2:num {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_p =
  
  ## (paragraph) – One or more text phrases that form a logical prose passage. 
  element ns2:p {
    (text | mei_model.paracontentPart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
pad =
  
  ## (padding) – An indication of extra visual space between notational elements.
  element ns2:pad {
    empty,
    mei_att.common.attributes,
    mei_att.pad.log.attributes,
    mei_att.pad.vis.attributes,
    mei_att.pad.ges.attributes,
    mei_att.pad.anl.attributes,
    empty
  }
parts =
  
  ## – Provides a container for performers' parts.
  element ns2:parts {
    mei_model.partLike*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.typed.attributes,
    mei_att.parts.log.attributes,
    mei_att.parts.vis.attributes,
    mei_att.parts.ges.attributes,
    mei_att.parts.anl.attributes,
    empty
  }
part =
  
  ## – An alternative visual rendition of the score from a particular performer's (or group of performers') point of view. 
  element ns2:part {
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.scorePart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.typed.attributes,
    mei_att.part.log.attributes,
    mei_att.part.vis.attributes,
    mei_att.part.ges.attributes,
    mei_att.part.anl.attributes,
    empty
  }
mei_pb =
  
  ## (page break) – An empty formatting element that forces text to begin on a new page. 
  element ns2:pb {
    macro.metaLike.page,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.source.attributes,
    mei_att.pb.anl.attributes,
    mei_att.pb.ges.attributes,
    mei_att.pb.log.attributes,
    mei_att.pb.vis.attributes,
    empty
  }
pgDesc =
  
  ## (page description) – Contains a brief prose description of the appearance or description of the content of a physical page. 
  element ns2:pgDesc {
    (text
     | mei_model.graphicprimitiveLike
     | mei_model.textcomponentLike
     | mei_model.annotLike
     | mei_model.locrefLike)*,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    empty
  }
pgHead =
  
  ## (page header) – A running header on the first page. 
  element ns2:pgHead {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
pgHead2 =
  
  ## (page header 2) – A running header on the pages following the first. 
  element ns2:pgHead2 {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
pgFoot =
  
  ## (page footer) – A running footer on the first page. 
  element ns2:pgFoot {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
pgFoot2 =
  
  ## (page footer 2) – A running footer on the pages following the first. 
  element ns2:pgFoot2 {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.appLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
phrase =
  
  ## – Indication of 1) a "unified melodic idea" or 2) performance technique. 
  element ns2:phrase {
    empty
    >> sch:pattern [
         id =
           "phrase-constraint-Start-_and_end-type_attributes_required_on_some_control_events"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:phrase"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or @dur"
             "Must have one of the attributes: dur or\x{a}" ~
             "              endid"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.phrase.log.attributes,
    mei_att.phrase.vis.attributes,
    mei_att.phrase.ges.attributes,
    mei_att.phrase.anl.attributes,
    empty
  }
rend =
  
  ## (render) – A formatting element indicating special visual rendering, e.g., bold or italicized, of a text word or phrase. 
  element ns2:rend {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    mei_att.typography.attributes,
    mei_att.horizontalalign.attributes,
    
    ## used to extend the values of the rend attribute.
    attribute altrend { text }?,
    
    ## captures the appearance of the element's contents.
    attribute rend { data.TEXTRENDITION }?,
    
    ## A positive value for rotation rotates the text in a counter-clockwise fashion, while negative values produce clockwise rotation.
    attribute rotation { data.DEGREES }?,
    
    ## specifies the vertical position of the element content relative to the surrounding text.
    attribute valign {
      
      ## aligns the top of the content with the top of the surrounding text.
      "top"
      | 
        ## aligns the middle of the content with the middle of the surrounding text.
        "middle"
      | 
        ## aligns the bottom of the content with the bottom of the surrounding text.
        "bottom"
      | 
        ## aligns the baseline of the content with the baseline of the surrounding text.
        "baseline"
    }?,
    empty
  }
mei_repository =
  
  ## – Institution or agency which holds a bibliographic item. 
  element ns2:repository {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
rest =
  
  ## – A non-sounding event found in the source being transcribed. 
  element ns2:rest {
    empty
    >> sch:pattern [
         id = "rest-constraint-Check_restline"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:rest[@line]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staff/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <=               number(preceding::mei:staffDef[@n=$thisstaff and                 @lines][1]/@lines)"
             "The value of @line must be less than or equal to the number of lines on the\x{a}" ~
             "              staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.rest.log.attributes,
    mei_att.rest.vis.attributes,
    mei_att.rest.ges.attributes,
    mei_att.rest.anl.attributes,
    empty
  }
mei_roleDesc =
  
  ## (role description) – Describes a character's role in a drama.
  element ns2:roleDesc {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
sb =
  
  ## (system break) – An empty formatting element that forces musical notation to begin on a new line. 
  element ns2:sb {
    custos?,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.source.attributes,
    mei_att.sb.log.attributes,
    mei_att.sb.vis.attributes,
    mei_att.sb.ges.attributes,
    mei_att.sb.anl.attributes,
    empty
  }
score =
  
  ## – Full score view of the musical content. 
  element ns2:score {
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.scorePart)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.typed.attributes,
    mei_att.score.log.attributes,
    mei_att.score.vis.attributes,
    mei_att.score.ges.attributes,
    mei_att.score.anl.attributes,
    empty
  }
scoreDef =
  
  ## (score definition) – Container for score meta-information.
  element ns2:scoreDef {
    mei_model.alignLike*,
    mei_model.symbolTableLike?,
    mei_model.keySigLike?,
    mei_model.meterSigLike?,
    mei_model.metaLike.score_sequenceOptional,
    mei_model.staffGrpLike?,
    mei_att.common.attributes,
    mei_att.scoreDef.log.attributes,
    mei_att.scoreDef.vis.attributes,
    mei_att.scoreDef.ges.attributes,
    mei_att.scoreDef.anl.attributes,
    empty
  }
section =
  
  ## – Segment of music data. 
  element ns2:section {
    expansion*,
    ((mei_model.appLike
      | mei_model.divLike
      | mei_model.milestoneLike.music
      | mei_model.annotLike
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.sectionPart)*)
    >> sch:pattern [
         id = "section-constraint-Check_sectionexpansion"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:section[mei:expansion]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "descendant::mei:section|descendant::mei:ending|descendant::mei:rdg"
             "Must have descendant section, ending, or rdg elements that can be pointed\x{a}" ~
             "              to."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.section.log.attributes,
    mei_att.section.vis.attributes,
    mei_att.section.ges.attributes,
    mei_att.section.anl.attributes,
    empty
  }
mei_space =
  
  ## – A placeholder used to fill an incomplete measure, layer, etc. most often so that the combined duration of the events equals the number of beats in the measure.
  element ns2:space {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.space.log.attributes,
    mei_att.space.vis.attributes,
    mei_att.space.ges.attributes,
    mei_att.space.anl.attributes,
    empty
  }
stack =
  
  ## (stacked text) – An inline table with a single column.
  element ns2:stack {
    (text | mei_model.textphraseLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    
    ## indicates the delimiter used to mark the portions of text that are to be stacked.
    attribute delim { text }?,
    
    ## specifies how the stacked text components should be aligned.
    attribute align {
      
      ## left justified.
      "left"
      | 
        ## right justified.
        "right"
      | 
        ## centered.
        "center"
      | 
        ## aligned on right-most digit.
        "rightdigit"
    }?,
    empty
  }
staff =
  
  ## – A group of equidistant horizontal lines on which notes are placed in order to represent pitch or a grouping element for individual 'strands' of notes, rests, etc. that may or may not actually be rendered on staff lines; that is, both diastematic and non-diastematic signs. 
  element ns2:staff {
    ((mei_model.appLike
      | mei_model.divLike
      | mei_model.milestoneLike.music
      | mei_model.staffDefLike
      | mei_model.annotLike
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike
      | mei_model.staffPart)*)
    >> sch:pattern [
         id = "staff-constraint-Check_staffn"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staff[@n]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "The n attribute must be a single\x{a}" ~
             "              integer."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.staff.log.attributes,
    mei_att.staff.vis.attributes,
    mei_att.staff.ges.attributes,
    mei_att.staff.anl.attributes,
    empty
  }
staffDef =
  
  ## (staff definition) – Container for staff meta-information.
  element ns2:staffDef {
    mei_model.labelLike*,
    ((mei_model.instrDefLike
      | mei_model.layerDefLike
      | mei_model.staffDefPart)*)
    >> sch:pattern [
         id = "staffDef-constraint-Check_staffDefn"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@n"
             "A staffDef must have an n attribute."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@lines or preceding::mei:staffDef[@n=$thisstaff                 and               @lines]"
             "The first occurrence of a staff must declare the number of staff\x{a}" ~
             "              lines."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:clef) + count(mei:clefGrp) < 2"
             "Only one clef or clefGrp\x{a}" ~
             "              is permitted."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_ancestor_staff"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[ancestor::mei:staff]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:staff/@n eq $thisstaff"
             "If a staffDef appears in a\x{a}" ~
             "              staff, it must bear the same @n than this staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_clef_position_staffDef"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@clef.line and @lines]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@clef.line) <= number(@lines)"
             "The clef position must be\x{a}" ~
             "              less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_clef_position_staffDef_nolines"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@clef.line and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "stafflines"
             value =
               "preceding::mei:staffDef[@n=$thisstaff and               @lines][1]/@lines"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@clef.line) <= number($stafflines)"
             "The clef position must\x{a}" ~
             "              be less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_tab_strings"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@tab.strings and @lines]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The tab.strings attribute\x{a}" ~
             "              must have the same number of values as there are staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "staffDef-constraint-Check_tab_strings"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@tab.strings and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "thisStaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens =               preceding::mei:staffDef[@n=$thisStaff and                 @lines][1]/@lines"
             "The\x{a}" ~
             "              tab.strings attribute must have the same number of values as there are staff\x{a}" ~
             "              lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@lines.color and @lines]"
           "\x{a}" ~
           "              "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color),                 '\s'))"
           ]
           "\x{a}" ~
           "              "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The lines.color attribute\x{a}" ~
             "                must have either 1) a single value or 2) the same number of values as there are\x{a}" ~
             "                staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@lines.color and not(@lines)]"
           "\x{a}" ~
           "              "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color),                 '\s'))"
           ]
           "\x{a}" ~
           "              "
           sch:let [ name = "thisStaff" value = "@n" ]
           "\x{a}" ~
           "              "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens =                 preceding::mei:staffDef[@n=$thisStaff and                     @lines][1]/@lines"
             "The\x{a}" ~
             "                lines.color attribute must have either 1) a single value or 2) the same number of\x{a}" ~
             "                values as there are staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "          "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.staffDef.log.attributes,
    mei_att.staffDef.vis.attributes,
    mei_att.staffDef.ges.attributes,
    mei_att.staffDef.anl.attributes,
    empty
  }
staffGrp =
  
  ## (staff group) – A group of bracketed or braced staves. 
  element ns2:staffGrp {
    grpSym*,
    mei_model.labelLike*,
    mei_model.instrDefLike*,
    (mei_model.staffGrpLike | mei_model.staffDefLike)+,
    (grpSym*)
    >> sch:pattern [
         id = "staffGrp-constraint-Check_staffGrp_unique_staff_n_values"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffGrp"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countstaves"
             value = "count(descendant::mei:staffDef)"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "countuniqstaves"
             value =
               "count(distinct-values(descendant::mei:staffDef/@n))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countstaves eq $countuniqstaves"
             "Each staffDef must have a unique\x{a}" ~
             "              value for the n attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.staffGrp.log.attributes,
    mei_att.staffGrp.vis.attributes,
    mei_att.staffGrp.ges.attributes,
    mei_att.staffGrp.anl.attributes,
    empty
  }
syl =
  
  ## (syllable) – Individual lyric syllable. 
  element ns2:syl {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.syl.log.attributes,
    mei_att.syl.vis.attributes,
    mei_att.syl.ges.attributes,
    mei_att.syl.anl.attributes,
    empty
  }
tempo =
  
  ## – Text and symbols descriptive of tempo, mood, or style, e.g., "allarg.", "a tempo", "cantabile", "Moderato", "♩=60", "Moderato ♩ =60").
  element ns2:tempo {
    ((text
      | mei_model.textphraseLike.limited
      | mei_model.graphicprimitiveLike
      | mei_model.editLike
      | mei_model.transcriptionLike)*)
    >> sch:pattern [
         id = "tempo-constraint-tempo_in_header_disallow_most_attrs"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tempo[ancestor::mei:meiHead]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@*[name() != 'label' and name() != 'n' and name() != 'xml:base'               and name() != 'xml:id' and name() != 'xml:lang'])"
             "Only label, n, xml:base, xml:id,\x{a}" ~
             "              and xml:lang attributes allowed when this element occurs in the header."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.tempo.log.attributes,
    mei_att.tempo.vis.attributes,
    mei_att.tempo.ges.attributes,
    mei_att.tempo.anl.attributes,
    empty
  }
mei_title =
  
  ## – Title of a bibliographic entity. 
  element ns2:title {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    
    ## indicates the bibliographic level for a title.
    attribute level {
      
      ## article.
      "a"
      | 
        ## monograph.
        "m"
      | 
        ## journal.
        "j"
      | 
        ## series.
        "s"
      | 
        ## unpublished (including theses and dissertations unless published by a commercial press).
        "u"
    }?,
    empty
  }
mei_titlePage =
  
  ## – Contains a transcription of the title page of a text. 
  element ns2:titlePage {
    (mei_model.textcomponentLike | mei_model.milestoneLike.text)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_att.regularmethod.attributes =
  mei_att.regularmethod.attribute.method
mei_att.regularmethod.attribute.method =
  
  ## indicates the method employed to mark corrections and normalizations.
  attribute method {
    
    ## corrections and normalizations made silently.
    "silent"
    | 
      ## corrections and normalizations indicated using elements.
      "tags"
  }?
mei_model.editorialDeclPart =
  mei_correction
  | mei_interpretation
  | mei_normalization
  | mei_segmentation
  | mei_stdVals
mei_model.encodingPart_sequenceOptional =
  mei_appInfo?, mei_editorialDecl?, mei_projectDesc?, mei_samplingDecl?
mei_model.frontPart = mei_titlePage
mei_model.headerPart_sequenceOptional = mei_encodingDesc?, workDesc?
mei_model.physDescPart =
  mei_model.repositoryLike
  | mei_model.frontPart
  | mei_condition
  | mei_dimensions
  | exhibHist
  | mei_extent
  | handList
  | inscription
  | physLoc
  | physMedium
  | plateNum
  | mei_provenance
  | treatHist
  | treatSched
  | mei_watermark
mei_model.pubStmtPart =
  mei_model.addressLike
  | mei_model.dateLike
  | mei_model.identifierLike
  | mei_availability
  | mei_respStmt
  | mei_model.nameLike.geogName
key =
  
  ## – Key captures information about tonal center and mode. 
  element ns2:key {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.keySig.log.attributes,
    empty
  }
meiHead =
  
  ## (MEI header) – Supplies the descriptive and declarative metadata prefixed to every MEI-conformant text. 
  element ns2:meiHead {
    altId*,
    mei_fileDesc,
    mei_model.headerPart_sequenceOptional,
    mei_revisionDesc?,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    mei_att.meiversion.attributes,
    
    ## specifies the kind of document to which the header is attached, for example whether it is a corpus or individual text.
    attribute type {
      
      ## header is attached to a music document.
      "music"
      | 
        ## header is attached to a corpus.
        "corpus"
    }?,
    empty
  }
accessRestrict =
  
  ## (access restriction) – Describes the conditions that affect the accessibility of material. 
  element ns2:accessRestrict {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
acqSource =
  
  ## (acquisition source) – Post-publication source, such as a vendor or distributor, from which access to a bibliographic item may be obtained, including electronic access. 
  element ns2:acqSource {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    empty
  }
altId =
  
  ## (alternative identifier) – May contain a bibliographic identifier that does not fit within the meiHead element's id attribute, for example because the id does not fit the definition of an XML id or because multiple identifiers are needed. 
  element ns2:altId {
    (text | mei_model.lbLike | mei_model.rendLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_appInfo =
  
  ## (application information) – Groups information about applications which have acted upon the MEI file. 
  element ns2:appInfo {
    mei_application*, mei_att.common.attributes, empty
  }
mei_application =
  
  ## – Provides information about an application which has acted upon the current document. 
  element ns2:application {
    mei_model.nameLike+,
    (mei_model.locrefLike* | mei_model.pLike*),
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.typed.attributes,
    
    ## supplies a version number for an application, independent of its identifier or display name.
    attribute version { text }?,
    empty
  }
mei_availability =
  
  ## – Groups elements that describe the availability of and access to a bibliographic item, including an MEI-encoded document. 
  element ns2:availability {
    macro.availabilityPart,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_change =
  
  ## – Individual change within the revision description. 
  element ns2:change {
    mei_respStmt,
    changeDesc,
    mei_model.dateLike,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datable.attributes,
    mei_att.responsibility.attributes,
    empty
  }
changeDesc =
  
  ## (change description) – Description of a revision of the MEI file.
  element ns2:changeDesc {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_classCode =
  
  ## (classification code) – Holds a citation to the source of controlled-vocabulary terms used in the <termList> element; for example, Library of Congress Subject Headings (LCSH), Library of Congress Classification (LCC), Library of Congress Name Authority File (LCNAF), or other thesaurus or ontology. 
  element ns2:classCode {
    (text | mei_model.lbLike | mei_model.rendLike)*,
    mei_att.common.attributes,
    mei_att.authorized.attributes,
    mei_att.bibl.attributes,
    empty
  }
classification =
  
  ## – Groups information which describes the nature or topic of an entity. 
  element ns2:classification {
    (mei_classCode | termList)+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_condition =
  
  ## – The physical condition of an item, particularly any variances between the physical makeup of the item and that of other copies of the same item (e.g., missing pages, plates, etc.). 
  element ns2:condition {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_correction =
  
  ## – States how and under what circumstances corrections have been made in the text. 
  element ns2:correction {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    mei_att.regularmethod.attributes,
    
    ## indicates the degree of correction applied to the text.
    attribute corrlevel {
      
      ## the text has been thoroughly checked and proofread.
      "high"
      | 
        ## the text has been checked at least once.
        "medium"
      | 
        ## the text has not been checked.
        "low"
      | 
        ## the correction status of the text is unknown.
        "unknown"
    }?,
    empty
  }
contents =
  
  ## – Description of the material contained within a resource.
  element ns2:contents {
    mei_model.headLike?,
    (mei_model.pLike? | (mei_model.labelLike?, contentItem)+),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.pointing.attributes,
    empty
  }
contentItem =
  
  ## – Contains a single entry within a content description element.
  element ns2:contentItem {
    text*, mei_att.bibl.attributes, mei_att.common.attributes, empty
  }
mei_creation =
  
  ## – Non-bibliographic details of the creation of an intellectual entity, in narrative form, such as the date, place, and circumstances of its composition. 
  element ns2:creation {
    (text | mei_date | mei_geogName)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_dimensions =
  
  ## – Information about the physical size of a bibliographic source; usually includes numerical data. 
  element ns2:dimensions {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_editionStmt =
  
  ## (edition statement) – Container for meta-data pertaining to a particular edition of the material being described. 
  element ns2:editionStmt {
    (mei_model.editionLike, mei_respStmt*)+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_editorialDecl =
  
  ## (editorial declaration) – Used to provide details of editorial principles and practices applied during the encoding of musical text. 
  element ns2:editorialDecl {
    (mei_model.pLike+
     | (mei_model.editorialDeclPart+, mei_model.pLike*)),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_encodingDesc =
  
  ## (encoding description) – Documents the relationship between an electronic file and the source or sources from which it was derived as well as applications used in the encoding/editing process. 
  element ns2:encodingDesc {
    mei_model.encodingPart_sequenceOptional,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
exhibHist =
  
  ## (exhibition history) – A record of public exhibitions, including dates, venues, etc. 
  element ns2:exhibHist {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_extent =
  
  ## – Used to express size in terms other than physical dimensions, such as number of pages, number of records in file, number of bytes, performance duration for music, audio recordings and visual projections, etc. 
  element ns2:extent {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_fileDesc =
  
  ## (file description) – Contains a full bibliographic description of the MEI file. 
  element ns2:fileDesc {
    mei_titleStmt,
    mei_editionStmt?,
    mei_extent?,
    pubStmt,
    mei_seriesStmt?,
    mei_notesStmt?,
    mei_sourceDesc?,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
mei_hand =
  
  ## – Defines a distinct scribe or handwriting style. 
  element ns2:hand {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    mei_att.medium.attributes,
    mei_att.responsibility.attributes,
    
    ## marks this hand as the first one of the document.
    attribute initial { data.BOOLEAN }?,
    empty
  }
handList =
  
  ## – Container for one or more hand elements. 
  element ns2:handList {
    mei_hand+, mei_att.common.attributes, mei_att.bibl.attributes, empty
  }
mei_history =
  
  ## – Provides a container for information about the creation and history of a resource.
  element ns2:history {
    mei_model.headLike?,
    mei_creation?,
    (eventList | mei_p)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
incipCode =
  
  ## – Incipit coded in a non-XML, plain text format, such as Plaine & Easie Code.
  element ns2:incipCode {
    text
    >> sch:pattern [
         id = "incipCode-constraint-Check_incipCode_form_mimetype"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:incipCode"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@form or @mimetype"
             "incipCode must have a form or mimetype\x{a}" ~
             "              attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.internetmedia.attributes,
    mei_att.pointing.attributes,
    
    ## identifies the language of the element's content. The values for this attribute are language 'tags' as defined in BCP 47. All language tags that make use of private use sub-tags must be documented in a corresponding language element in the MEI header whose id attribute is the same as the language tag's value.
    attribute xml:space {
      
      ## allows the application to handle white space as necessary. Not including an xml:space attribute produces the same result as using the default value.
      "default"
      | 
        ## instructs the application to maintain white space as is, suggesting that it might have meaning.
        "preserve"
    }?,
    
    ## describes the notational form of the coded text.
    ## Suggested values include: 1] plaineAndEasie; 2] humdrumKern
    attribute form {
      
      ## Plaine & Easie Code.
      "plaineAndEasie"
      | 
        ## Humdrum Kern format.
        "humdrumKern"
      | xsd:Name
    }?,
    empty
  }
incipText =
  
  ## – Opening words of a musical composition.
  element ns2:incipText {
    (mei_model.pLike | mei_model.lgLike)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    mei_att.pointing.attributes,
    mei_att.internetmedia.attributes,
    empty
  }
inscription =
  
  ## – An inscription added to an item, such as a bookplate, a note designating the item as a gift, and/or the author's signature.
  element ns2:inscription {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_interpretation =
  
  ## – Describes the scope of any analytic or interpretive information added to the transcription of the music. 
  element ns2:interpretation {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mensuration =
  
  ## – Captures information about mensuration within bibliographic descriptions.
  element ns2:mensuration {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.mensur.log.attributes,
    empty
  }
meter =
  
  ## – Captures information about the time signature within bibliographic descriptions. 
  element ns2:meter {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.meterSig.log.attributes,
    empty
  }
termList =
  
  ## – Collection of text phrases which describe a resource.
  element ns2:termList {
    mei_term+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    
    ## contains a reference to the controlled vocabulary from which the terms are drawn. The value must match the value of an ID attribute on a classCode element given elsewhere in the document.
    attribute classcode { data.URI }?,
    empty
  }
mei_language =
  
  ## – Description of a language used in the document. 
  element ns2:language {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    empty
  }
mei_langUsage =
  
  ## (language usage) – Groups elements describing the languages, sub-languages, dialects, etc., represented within the encoded resource. 
  element ns2:langUsage {
    mei_language+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_normalization =
  
  ## – Indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. 
  element ns2:normalization {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    mei_att.regularmethod.attributes,
    empty
  }
mei_notesStmt =
  
  ## (notes statement)– Collects any notes providing information about a text additional to that recorded in other parts of the bibliographic description. 
  element ns2:notesStmt {
    mei_model.annotLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
perfMedium =
  
  ## (performance medium) – Indicates the number and character of the performing forces used in a musical composition. 
  element ns2:perfMedium {
    mei_model.headLike?,
    mei_castList?,
    instrumentation?,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    empty
  }
instrumentation =
  
  ## – Instrumental and non-dramatic vocal resources.
  element ns2:instrumentation {
    mei_head?,
    (ensemble? | (instrVoice | instrVoiceGrp)*),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    empty
  }
ensemble =
  
  ## – The name of a standard instrumental or vocal grouping, such as 'orchestra' or 'marching band'. 
  element ns2:ensemble {
    text,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    
    ## captures one or more coded values for the textual content of this element.
    attribute code { xsd:NMTOKEN }?,
    empty
  }
instrVoice =
  
  ## (instrument or voice) – Name of an instrument on which a performer plays or a performer's voice range.
  element ns2:instrVoice {
    (text | instrVoice)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    
    ## captures one or more coded values for the textual content of this element.
    attribute code { xsd:NMTOKEN }?,
    
    ## indicates the number of performers.
    attribute count { xsd:positiveInteger }?,
    
    ## marks this instrument or vocal part as a soloist. Do not use this attribute for a solo instrument which is not accompanied.
    attribute solo { data.BOOLEAN }?,
    empty
  }
instrVoiceGrp =
  
  ## – Several instrumental or vocal resources treated as a group.
  element ns2:instrVoiceGrp {
    (text | mei_model.headLike | instrVoice | instrVoiceGrp)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_physDesc =
  
  ## (physical description) – Container for information about the location, appearance, construction, or handling of physical materials, such as their dimension, quantity, color, style, and technique of creation. 
  element ns2:physDesc {
    mei_model.physDescPart+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
physLoc =
  
  ## (physical location) – Location of the source within a repository, e.g., shelf mark or other locational information. 
  element ns2:physLoc {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
physMedium =
  
  ## (physical medium) – Records the physical materials used in the source, such as ink and paper. 
  element ns2:physMedium {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.authorized.attributes,
    mei_att.lang.attributes,
    empty
  }
plateNum =
  
  ## (plate number) – Designation assigned to a resource by a music publisher, usually printed at the bottom of each page, and sometimes appearing also on the title page. 
  element ns2:plateNum {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.facsimile.attributes,
    empty
  }
price =
  
  ## – The cost of access to a bibliographic item.
  element ns2:price {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_projectDesc =
  
  ## (project description) – Project-level meta-data describing the aim or purpose for which the electronic file was encoded, funding agencies, etc. together with any other relevant information concerning the process by which it was assembled or collected. 
  element ns2:projectDesc {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_provenance =
  
  ## – The record of ownership or custodianship of an item. 
  element ns2:provenance {
    (eventList? | (text | mei_model.textphraseLike.limited)*),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
pubStmt =
  
  ## (publication statement) – Container for information regarding the publication or distribution of a bibliographic item, including the publisher's name and address, the date of publication, and other relevant details. 
  element ns2:pubStmt {
    (unpub? | mei_model.pubStmtPart*),
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_relatedItem =
  
  ## (related item) – contains or references another bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. 
  element ns2:relatedItem {
    mei_model.identifierLike*,
    mei_titleStmt?,
    macro.bibldescPart,
    mei_notesStmt?,
    macro.workPart,
    classification?,
    mei_model.incipLike?,
    contents?,
    mei_relatedItem*,
    mei_att.datapointing.attributes,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.pointing.attributes,
    
    ## describes the relationship between the <relatedItem> and the resource described in the parent element, i.e. <source> or <relatedItem>. "preceding" indicates a predecessor to the resource; "succeeding" applies to a successor to the resource; "original" indicates the original form of the resource; "host" provides info concerning an intellectual or physical constituent unit of the resource; "otherVersion" indicates a change in the intellectual content of the resource not significant enough to be a different work; "otherFormat" indicates a change in physical format of the resource; "isReferencedBy" applies to a citation or reference to published bibliographic descriptions, reviews, abstracts, or indexes of the content of the resource; "references" applies to a resource cited or referred to in the resource. These values are based on MODS version 3.4.
    attribute rel {
      
      ##
      "preceding"
      | 
        ##
        "succeeding"
      | 
        ##
        "original"
      | 
        ##
        "host"
      | 
        ##
        "constituent"
      | 
        ##
        "otherVersion"
      | 
        ##
        "otherFormat"
      | 
        ##
        "isReferencedBy"
      | 
        ##
        "references"
    },
    empty
  }
mei_resp =
  
  ## (responsibility) – A phrase describing the nature of a person's intellectual responsibility. 
  element ns2:resp { text, mei_att.authorized.attributes, empty }
mei_respStmt =
  
  ## (responsibility statement) – Names one or more individuals, groups, or in rare cases, mechanical processes, responsible for creation or realization of the intellectual or artistic content. 
  element ns2:respStmt {
    (mei_resp | mei_model.nameLike | mei_model.nameLike.agent)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
mei_revisionDesc =
  
  ## (revision description) – Container for information about alterations that have been made to an MEI file. 
  element ns2:revisionDesc {
    mei_change+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_samplingDecl =
  
  ## (sampling declaration) – Contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. 
  element ns2:samplingDecl {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_segmentation =
  
  ## – Describes the principles according to which the musical text has been segmented, for example into movements, sections, etc. 
  element ns2:segmentation {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_seriesStmt =
  
  ## (series statement) – Groups information about the series, if any, to which a publication belongs. 
  element ns2:seriesStmt {
    mei_model.titleLike+,
    mei_respStmt*,
    mei_model.identifierLike*,
    contents?,
    mei_seriesStmt*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_source =
  
  ## – A bibliographic description of a source used in the creation of the electronic file. 
  element ns2:source {
    mei_model.identifierLike*,
    mei_titleStmt?,
    macro.bibldescPart,
    mei_notesStmt?,
    macro.workPart,
    classification?,
    mei_model.incipLike?,
    contents?,
    mei_relatedItem*,
    mei_att.datapointing.attributes,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_sourceDesc =
  
  ## (source description) – A container for the descriptions of the source(s) used in the creation of the electronic file. 
  element ns2:sourceDesc {
    mei_source+, mei_att.common.attributes, empty
  }
mei_stdVals =
  
  ## (standard values) – Specifies the format used when standardized date or number values are supplied. 
  element ns2:stdVals {
    mei_model.pLike+,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.datapointing.attributes,
    mei_att.lang.attributes,
    empty
  }
sysReq =
  
  ## (system requirements) – System requirements for using the electronic item.
  element ns2:sysReq {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_term =
  
  ## – Keyword or phrase which describes a resource. 
  element ns2:term {
    (text | mei_term | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    
    ## contains a reference to the controlled vocabulary from which the term is drawn. The value must match the value of an ID attribute on a classCode element given elsewhere in the document.
    attribute classcode { data.URI }?,
    empty
  }
mei_titleStmt =
  
  ## (title statement) – Container for title and responsibility meta-data. 
  element ns2:titleStmt {
    mei_model.titleLike+,
    mei_respStmt*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    empty
  }
treatHist =
  
  ## (treatment history) – A record of the treatment the item has undergone (e.g., de-acidification, restoration, etc.). 
  element ns2:treatHist {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
treatSched =
  
  ## (treatment scheduled) – Scheduled treatment, e.g. de-acidification, restoration, etc., for an item. 
  element ns2:treatSched {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
unpub =
  
  ## (unpublished) – Used to explicitly indicate that a bibliographic resource is unpublished. 
  element ns2:unpub {
    text, mei_att.common.attributes, mei_att.bibl.attributes, empty
  }
useRestrict =
  
  ## (usage restrictions) – Container for information about the conditions that affect use of a bibliographic item after access has been granted. 
  element ns2:useRestrict {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
mei_watermark =
  
  ## – Contains a description of a watermark or similar device. 
  element ns2:watermark {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    mei_att.facsimile.attributes,
    empty
  }
workDesc =
  
  ## (work description) – Grouping mechanism for information describing non-bibliographic aspects of a text.
  element ns2:workDesc { work+, mei_att.common.attributes, empty }
work =
  
  ## – Provides a detailed description of the non-bibliographic aspects of a text, specifically its history, language use, and high-level musical attributes: key, tempo, meter, and medium of performance.
  element ns2:work {
    mei_model.identifierLike*,
    mei_titleStmt?,
    macro.workPart,
    mei_notesStmt?,
    classification?,
    mei_model.incipLike?,
    contents?,
    mei_relatedItem*,
    mei_att.datapointing.attributes,
    mei_att.common.attributes,
    mei_att.bibl.attributes,
    empty
  }
eventList =
  
  ## – Contains historical information given as a sequence of significant past events. 
  element ns2:eventList {
    mei_model.headLike?,
    mei_event+,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_event =
  
  ## – Contains a description of an event, including the dates and locations of its occurrence and prominent participants. 
  element ns2:event {
    ((text | mei_model.textphraseLike.limited)*
     | (mei_model.tableLike | mei_model.listLike)*),
    mei_att.bibl.attributes,
    mei_att.calendared.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_att.ligature.anl.attributes = mei_att.common.anl.attributes
mei_att.ligature.ges.attributes = empty
mei_att.ligature.log.attributes = mei_att.ligature.log.attribute.form
mei_att.ligature.log.attribute.form =
  
  ## provides an indication of the function of the ligature.
  attribute form { data.LIGATUREFORM }?
mei_att.ligature.vis.attributes = empty
mei_att.mensur.anl.attributes = mei_att.common.anl.attributes
mei_att.mensur.ges.attributes = empty
mei_att.mensur.vis.attributes =
  mei_att.color.attributes,
  mei_att.relativesize.attributes,
  mei_att.mensur.vis.attribute.form,
  mei_att.mensur.vis.attribute.orient
mei_att.mensur.vis.attribute.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
mei_att.mensur.vis.attribute.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute orient { data.ORIENTATION }?
mei_att.mensurDefault.log.attributes =
  mei_att.duration.ratio.attributes,
  mei_att.mensurDefault.log.attribute.mensur.dot,
  mei_att.mensurDefault.log.attribute.mensur.loc,
  mei_att.mensurDefault.log.attribute.mensur.sign,
  mei_att.mensurDefault.log.attribute.mensur.slash
mei_att.mensurDefault.log.attribute.mensur.dot =
  
  ## determines if a dot is to be added to the base symbol.
  attribute mensur.dot { data.BOOLEAN }?
mei_att.mensurDefault.log.attribute.mensur.loc =
  
  ## holds the staff location of the mensuration sign.
  attribute mensur.loc { xsd:positiveInteger }?
mei_att.mensurDefault.log.attribute.mensur.sign =
  
  ## the base symbol in the mensuration sign/time signature of mensural notation.
  attribute mensur.sign { data.MENSURATIONSIGN }?
mei_att.mensurDefault.log.attribute.mensur.slash =
  
  ## indicates the number lines added to the mensuration sign. For example, one slash is added for what we now call 'alla breve'.
  attribute mensur.slash { xsd:positiveInteger }?
mei_att.mensurDefault.vis.attributes =
  mei_att.mensurDefault.vis.attribute.mensur.color,
  mei_att.mensurDefault.vis.attribute.mensur.form,
  mei_att.mensurDefault.vis.attribute.mensur.orient,
  mei_att.mensurDefault.vis.attribute.mensur.size
mei_att.mensurDefault.vis.attribute.mensur.color =
  
  ## records the color of the mensuration sign. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute mensur.color { data.COLOR }?
mei_att.mensurDefault.vis.attribute.mensur.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute mensur.form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
mei_att.mensurDefault.vis.attribute.mensur.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute mensur.orient { data.ORIENTATION }?
mei_att.mensurDefault.vis.attribute.mensur.size =
  
  ## describes the relative size of the mensuration sign.
  attribute mensur.size { data.SIZE }?
mei_att.note.ges.mensural.attributes = mei_att.duration.ratio.attributes
mei_att.note.log.mensural.attributes =
  mei_att.note.log.mensural.attribute.lig
mei_att.note.log.mensural.attribute.lig =
  
  ## indicates this element's participation in a ligature.
  attribute lig {
    
    ##
    "recta"
    | 
      ##
      "obliqua"
  }?
mei_att.proport.anl.attributes = mei_att.common.anl.attributes
mei_att.proport.ges.attributes = empty
mei_att.proport.log.attributes = mei_att.duration.ratio.attributes
mei_att.proport.vis.attributes = empty
mei_att.rest.ges.mensural.attributes = mei_att.duration.ratio.attributes
mei_att.rest.vis.mensural.attributes =
  mei_att.lineloc.attributes, mei_att.rest.vis.mensural.attribute.spaces
mei_att.rest.vis.mensural.attribute.spaces =
  
  ## states how many spaces are covered by the rest.
  attribute spaces { xsd:positiveInteger }?
mei_att.scoreDef.log.mensural.attributes =
  mei_att.mensurDefault.log.attributes
mei_att.scoreDef.vis.mensural.attributes =
  mei_att.mensurDefault.vis.attributes
mei_att.staffDef.log.mensural.attributes =
  mei_att.mensurDefault.log.attributes,
  mei_att.staffDef.log.mensural.attribute.proport.num,
  mei_att.staffDef.log.mensural.attribute.proport.numbase
mei_att.staffDef.log.mensural.attribute.proport.num =
  
  ## Together, proport.num and proport.numbase specify a proportional change as a ratio, e.g., 1:3. Proport.num is for the first value in the ratio.
  attribute proport.num { xsd:positiveInteger }?
mei_att.staffDef.log.mensural.attribute.proport.numbase =
  
  ## Together, proport.num and proport.numbase specify a proportional change as a ratio, e.g., 1:3. Proport.numbase is for the second value in the ratio.
  attribute proport.numbase { xsd:positiveInteger }?
mei_att.staffDef.vis.mensural.attributes =
  mei_att.mensurDefault.vis.attributes
mei_model.eventLike.mensural = mensur | proport | ligature
mei_model.eventLike.mensural_alternation = mensur | proport | ligature
mei_model.eventLike.mensural_sequence = mensur, proport, ligature
mei_model.eventLike.mensural_sequenceOptional =
  mensur?, proport?, ligature?
mei_model.eventLike.mensural_sequenceOptionalRepeatable =
  mensur*, proport*, ligature*
mei_model.eventLike.mensural_sequenceRepeatable =
  mensur+, proport+, ligature+
mei_model.layerPart.mensural =
  mei_model.controleventLike
  | mei_model.noteModifierLike
  | mei_model.lyricsLike
mei_model.layerPart.mensural_alternation =
  mei_model.controleventLike_alternation
  | mei_model.noteModifierLike_alternation
  | mei_model.lyricsLike_alternation
mei_model.layerPart.mensural_sequence =
  mei_model.controleventLike_sequence,
  mei_model.noteModifierLike_sequence,
  mei_model.lyricsLike_sequence
mei_model.layerPart.mensural_sequenceOptional =
  mei_model.controleventLike_sequenceOptional?,
  mei_model.noteModifierLike_sequenceOptional?,
  mei_model.lyricsLike_sequenceOptional?
mei_model.layerPart.mensural_sequenceOptionalRepeatable =
  mei_model.controleventLike_sequenceOptionalRepeatable*,
  mei_model.noteModifierLike_sequenceOptionalRepeatable*,
  mei_model.lyricsLike_sequenceOptionalRepeatable*
mei_model.layerPart.mensural_sequenceRepeatable =
  mei_model.controleventLike_sequenceRepeatable+,
  mei_model.noteModifierLike_sequenceRepeatable+,
  mei_model.lyricsLike_sequenceRepeatable+
mei_model.staffDefPart.mensural = mensur | proport
mensur =
  
  ## (mensuration) – Collects information about the metrical relationship between a note value and the next smaller value; that is, either triple or duple. 
  element ns2:mensur {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.mensur.log.attributes,
    mei_att.mensur.vis.attributes,
    mei_att.mensur.ges.attributes,
    mei_att.mensur.anl.attributes,
    empty
  }
proport =
  
  ## (proportion) – Description of note duration as arithmetic ratio. 
  element ns2:proport {
    empty,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.proport.log.attributes,
    mei_att.proport.vis.attributes,
    mei_att.proport.ges.attributes,
    mei_att.proport.anl.attributes,
    empty
  }
ligature =
  
  ## – A mensural notation symbol that combines two or more notes into a single sign. 
  element ns2:ligature {
    mei_model.layerPart*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.ligature.log.attributes,
    mei_att.ligature.vis.attributes,
    mei_att.ligature.ges.attributes,
    mei_att.ligature.anl.attributes,
    empty
  }
mei_att.common.anl.attributes =
  mei_att.alignment.attributes,
  mei_att.common.anl.attribute.copyof,
  mei_att.common.anl.attribute.corresp,
  mei_att.common.anl.attribute.next,
  mei_att.common.anl.attribute.prev,
  mei_att.common.anl.attribute.sameas,
  mei_att.common.anl.attribute.synch
mei_att.common.anl.attribute.copyof =
  
  ## points to an element of which the current element is a copy.
  attribute copyof { data.URI }?
mei_att.common.anl.attribute.corresp =
  
  ## used to point to other elements that correspond to this one in a generic fashion.
  attribute corresp {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.next =
  
  ## used to point to the next event(s) in a user-defined collection.
  attribute next {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.prev =
  
  ## points to the previous event(s) in a user-defined collection.
  attribute prev {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.sameas =
  
  ## points to an element that is the same as the current element but is not a literal copy of the current element.
  attribute sameas {
    list { data.URI+ }
  }?
mei_att.common.anl.attribute.synch =
  
  ## points to elements that are synchronous with the current element.
  attribute synch {
    list { data.URI+ }
  }?
mei_att.harmonicfunction.attributes =
  mei_att.harmonicfunction.attribute.hfunc
mei_att.harmonicfunction.attribute.hfunc =
  
  ## describes harmonic function in any convenient typology.
  attribute hfunc { xsd:NMTOKEN }?
mei_att.intervalharmonic.attributes =
  mei_att.intervalharmonic.attribute.inth
mei_att.intervalharmonic.attribute.inth =
  
  ## encodes the harmonic interval between this note and other pitches occurring at the same time.
  attribute inth { xsd:NMTOKENS }?
mei_att.intervallicdesc.attributes =
  mei_att.intervalharmonic.attributes,
  mei_att.intervallicdesc.attribute.intm
mei_att.intervallicdesc.attribute.intm =
  
  ## encodes the melodic interval from the previous pitch. The value may be a general directional indication (u, d, s) or a precise numeric value in half steps.
  attribute intm { data.INTERVAL.AMOUNT }?
mei_att.melodicfunction.attributes =
  mei_att.melodicfunction.attribute.mfunc
mei_att.melodicfunction.attribute.mfunc =
  
  ## describes melodic function in any convenient typology.
  attribute mfunc { xsd:NMTOKEN }?
mei_att.pitchclass.attributes = mei_att.pitchclass.attribute.pclass
mei_att.pitchclass.attribute.pclass =
  
  ## holds pitch class information.
  attribute pclass { data.PITCHCLASS }?
mei_att.solfa.attributes = mei_att.solfa.attribute.psolfa
mei_att.solfa.attribute.psolfa =
  
  ## contains sol-fa designation, e.g., do, re, mi, etc., in either a fixed or movable Do system.
  attribute psolfa { text }?
meiCorpus =
  
  ## (MEI corpus) – A group of related MEI documents, consisting of a header for the group, and one or more <mei> elements, each with its own complete header. 
  element ns2:meiCorpus {
    meiHead,
    mei*,
    mei_att.common.attributes,
    mei_att.meiversion.attributes,
    empty
  }
mei_att.crit.attributes =
  mei_att.handident.attributes,
  mei_att.responsibility.attributes,
  mei_att.sequence.attributes,
  mei_att.source.attributes,
  mei_att.crit.attribute.cause
mei_att.crit.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  attribute cause { xsd:NMTOKEN }?
mei_att.source.attributes = mei_att.source.attribute.source
mei_att.source.attribute.source =
  
  ## contains a list of one or more pointers indicating the sources which attest to a given reading. Each value should correspond to the ID of a <source> element located in the document header.
  attribute source {
    list { data.URI+ }
  }?
mei_att.rdg.anl.attributes = mei_att.common.anl.attributes
mei_att.rdg.ges.attributes = empty
mei_att.rdg.log.attributes = empty
mei_att.rdg.vis.attributes = empty
mei_model.appLike = mei_app
mei_model.rdgPart.critapp =
  mei_model.controleventLike
  | mei_model.eventLike
  | mei_model.layerLike
  | mei_model.noteModifierLike
  | mei_model.sectionPart
  | mei_model.lyricsLike
  | mei_model.sylLike
  | mei_model.verseLike
mei_app =
  
  ## (apparatus) – Contains one or more alternative encodings. 
  element ns2:app {
    mei_lem?,
    mei_rdg,
    mei_rdg*,
    mei_att.common.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_lem =
  
  ## (lemma) – Contains the lemma, or base text, of a textual variation. 
  element ns2:lem {
    expansion*,
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.scoreDefLike
     | mei_model.staffDefLike
     | mei_model.staffGrpLike
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.rdgPart.critapp)*,
    mei_att.common.attributes,
    mei_att.crit.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.rdg.anl.attributes,
    mei_att.rdg.ges.attributes,
    mei_att.rdg.log.attributes,
    mei_att.rdg.vis.attributes,
    empty
  }
mei_rdg =
  
  ## (reading) – Contains a single reading within a textual variation. 
  element ns2:rdg {
    expansion*,
    (mei_model.appLike
     | mei_model.divLike
     | mei_model.milestoneLike.music
     | mei_model.scoreDefLike
     | mei_model.staffDefLike
     | mei_model.staffGrpLike
     | mei_model.annotLike
     | mei_model.graphicprimitiveLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.rdgPart.critapp)*,
    mei_att.common.attributes,
    mei_att.crit.attributes,
    mei_att.typed.attributes,
    mei_att.pointing.attributes,
    mei_att.rdg.anl.attributes,
    mei_att.rdg.ges.attributes,
    mei_att.rdg.log.attributes,
    mei_att.rdg.vis.attributes,
    empty
  }
mei_att.edit.attributes =
  mei_att.responsibility.attributes,
  mei_att.source.attributes,
  mei_att.edit.attribute.cert,
  mei_att.edit.attribute.evidence
mei_att.edit.attribute.cert =
  
  ## signifies the degree of certainty or precision associated with a feature.
  attribute cert { data.CERTAINTY }?
mei_att.edit.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. Suggested values include: 'internal', 'external', 'conjecture'.
  attribute evidence { xsd:NMTOKEN }?
mei_att.agentident.attributes = mei_att.agentident.attribute.agent
mei_att.agentident.attribute.agent =
  
  ## signifies the causative agent of damage, illegibility, or other loss of original text.
  attribute agent { text }?
mei_att.extent.attributes = mei_att.extent.attribute.extent
mei_att.extent.attribute.extent =
  
  ## indicates the extent of damage or omission.
  attribute extent { text }?
mei_att.reasonident.attributes = mei_att.reasonident.attribute.reason
mei_att.reasonident.attribute.reason =
  
  ## holds a short phrase describing the reason for missing textual material (gap), why material is supplied (supplied), or why transcription is difficult (unclear).
  attribute reason { text }?
mei_att.trans.attributes =
  mei_att.handident.attributes, mei_att.sequence.attributes
mei_model.choicePart =
  mei_model.editorialLike
  | mei_model.editLike
  | mei_corr
  | mei_orig
  | mei_reg
  | mei_sic
  | mei_unclear
mei_model.editLike = mei_choice | mei_subst
mei_model.transcriptionLike =
  mei_add
  | mei_corr
  | mei_damage
  | mei_del
  | mei_gap
  | mei_handShift
  | mei_orig
  | mei_reg
  | mei_restore
  | mei_sic
  | mei_supplied
  | mei_unclear
mei_abbr =
  
  ## (abbreviation) – A generic element for 1) a shortened form of a word, including an acronym or 2) a shorthand notation.
  element ns2:abbr {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.trans.attributes,
    mei_att.typed.attributes,
    
    ## records the expansion of a text abbreviation.
    attribute expan { text }?,
    empty
  }
mei_expan =
  
  ## (expansion) – Contains the expansion of an abbreviation.
  element ns2:expan {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.trans.attributes,
    mei_att.typed.attributes,
    
    ## captures the unabbreviated form of the text.
    attribute abbr { text }?,
    empty
  }
mei_add =
  
  ## (addition) – Marks an addition to the text. 
  element ns2:add {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.edit.attributes,
    mei_att.trans.attributes,
    empty
  }
mei_choice =
  
  ## – Groups a number of alternative encodings for the same point in a text. 
  element ns2:choice {
    mei_model.choicePart*, mei_att.common.attributes, empty
  }
mei_corr =
  
  ## (correction) – Contains the correct form of an apparent erroneous passage. 
  element ns2:corr {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.trans.attributes,
    empty
  }
mei_damage =
  
  ## – Contains an area of damage to the physical medium.
  element ns2:damage {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.agentident.attributes,
    mei_att.common.attributes,
    mei_att.extent.attributes,
    mei_att.facsimile.attributes,
    mei_att.handident.attributes,
    mei_att.typed.attributes,
    
    ## records the degree of damage.
    attribute degree { text }?,
    empty
  }
mei_del =
  
  ## (deletion) – Contains information deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, annotator, or corrector. 
  element ns2:del {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.trans.attributes,
    
    ## contains an indication of how the deletion should be rendered.
    attribute rend { text }?,
    empty
  }
mei_gap =
  
  ## – Indicates a point where material has been omitted in a transcription, whether as part of sampling practice or for editorial reasons described in the MEI header. 
  element ns2:gap {
    empty,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.extent.attributes,
    mei_att.handident.attributes,
    mei_att.reasonident.attributes,
    mei_att.measurement.attributes,
    empty
  }
mei_handShift =
  
  ## – Marks the beginning of a passage written in a new hand, or of a change in the scribe, writing style, ink or character of the document hand. 
  element ns2:handShift {
    empty,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.medium.attributes,
    
    ## describes the character of the new hand.
    attribute character { text }?,
    
    ## identifies the new hand. The value must contain the ID of a hand element given elsewhere in the document.
    attribute new { data.URI }?,
    
    ## identifies the old hand. The value must contain the ID of a hand element given elsewhere in the document.
    attribute old { data.URI }?,
    empty
  }
mei_orig =
  
  ## (original) – Contains material which is marked as following the original, rather than being normalized or corrected. 
  element ns2:orig {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_reg =
  
  ## (regularization) – Contains material which has been regularized or normalized in some sense. 
  element ns2:reg {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.authorized.attributes,
    mei_att.edit.attributes,
    empty
  }
mei_restore =
  
  ## – Indicates restoration of material to an earlier state by cancellation of an editorial or authorial marking or instruction. 
  element ns2:restore {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.trans.attributes,
    mei_att.typed.attributes,
    
    ## provides a description of the means of restoration.
    attribute desc { text }?,
    empty
  }
mei_sic =
  
  ## – Contains apparently incorrect or inaccurate material. 
  element ns2:sic {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    empty
  }
mei_subst =
  
  ## (substitution) – Groups transcriptional elements when the combination is to be regarded as a single intervention in the text. 
  element ns2:subst {
    mei_model.transcriptionLike,
    mei_model.transcriptionLike+,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.trans.attributes,
    empty
  }
mei_supplied =
  
  ## – Contains material supplied by the transcriber or editor in place of text which cannot be read, either because of physical damage or loss in the original or because it is illegible for any reason. 
  element ns2:supplied {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.agentident.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.reasonident.attributes,
    empty
  }
mei_unclear =
  
  ## – Contains material that cannot be transcribed with certainty because it is illegible or inaudible in the source. 
  element ns2:unclear {
    (text
     | mei_model.textphraseLike
     | mei_model.eventLike
     | mei_model.controleventLike
     | mei_model.lyricsLike
     | mei_model.editLike
     | mei_model.transcriptionLike
     | mei_model.noteModifierLike
     | mei_model.sectionLike
     | mei_model.staffLike
     | mei_model.layerLike
     | mei_model.graphicprimitiveLike)*,
    mei_att.agentident.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.handident.attributes,
    mei_att.reasonident.attributes,
    empty
  }
mei_att.facsimile.attributes = mei_att.facsimile.attribute.facs
mei_att.facsimile.attribute.facs =
  
  ## permits the current element to reference a facsimile image or image zone which corresponds to it.
  attribute facs {
    list { data.URI+ }
  }?
mei_facsimile =
  
  ## – Contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. 
  element ns2:facsimile {
    mei_surface*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    empty
  }
mei_surface =
  
  ## – Defines a writing surface in terms of a rectangular coordinate space, optionally grouping one or more graphic representations of that space, and rectangular zones of interest within it. 
  element ns2:surface {
    mei_model.figDescLike*,
    mei_model.graphicLike*,
    mei_zone*,
    mei_att.common.attributes,
    mei_att.coordinated.attributes,
    mei_att.datapointing.attributes,
    mei_att.declaring.attributes,
    mei_att.startid.attributes,
    empty
  }
mei_zone =
  
  ## – Defines an area of interest within a surface or graphic file. 
  element ns2:zone {
    mei_model.figDescLike*,
    mei_model.graphicLike*,
    mei_att.common.attributes,
    mei_att.coordinated.attributes,
    mei_att.datapointing.attributes,
    empty
  }
mei_att.tabular.attributes =
  mei_att.tabular.attribute.colspan, mei_att.tabular.attribute.rowspan
mei_att.tabular.attribute.colspan =
  
  ## the number of columns spanned by this cell.
  attribute colspan { xsd:positiveInteger }?
mei_att.tabular.attribute.rowspan =
  
  ## the number of rows spanned by this cell.
  attribute rowspan { xsd:positiveInteger }?
mei_model.figureLike = mei_fig
mei_model.figureLike_alternation = mei_fig
mei_model.figureLike_sequence = mei_fig
mei_model.figureLike_sequenceOptional = mei_fig?
mei_model.figureLike_sequenceOptionalRepeatable = mei_fig*
mei_model.figureLike_sequenceRepeatable = mei_fig+
mei_model.graphicLike = mei_graphic
mei_model.figDescLike = mei_figDesc
mei_model.tableLike = mei_table
mei_model.tableLike_alternation = mei_table
mei_model.tableLike_sequence = mei_table
mei_model.tableLike_sequenceOptional = mei_table?
mei_model.tableLike_sequenceOptionalRepeatable = mei_table*
mei_model.tableLike_sequenceRepeatable = mei_table+
mei_graphic =
  
  ## – Indicates the location of an inline graphic, illustration, or figure. 
  element ns2:graphic {
    (mei_zone*)
    >> sch:pattern [
         id = "graphic-constraint-graphic_child_of_zone"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:zone/mei:graphic"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:*) = 0"
             "graphic child of zone cannot have\x{a}" ~
             "              children"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.internetmedia.attributes,
    mei_att.facsimile.attributes,
    mei_att.pointing.attributes,
    mei_att.measurement.attributes,
    mei_att.typed.attributes,
    mei_att.width.attributes,
    
    ## measurement of the vertical dimension of an image.
    attribute height { xsd:positiveInteger }?,
    empty
  }
mei_fig =
  
  ## (figure) – groups elements representing or containing graphic information such as an illustration or figure. 
  element ns2:fig {
    (mei_model.captionLike | mei_figDesc | mei_model.graphicLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_figDesc =
  
  ## (figure description) – Contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. 
  element ns2:figDesc {
    (text
     | mei_model.graphicprimitiveLike
     | mei_model.textcomponentLike
     | mei_model.annotLike)*,
    mei_att.common.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_table =
  
  ## – Contains text displayed in tabular form. 
  element ns2:table {
    mei_model.captionLike?,
    tr+,
    mei_model.captionLike?,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
td =
  
  ## (table data) – Designates a table cell that contains data as opposed to a cell that contains column or row heading information. 
  element ns2:td {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    mei_att.tabular.attributes,
    empty
  }
th =
  
  ## (table header) – Designates a table cell containing column or row heading information as opposed to one containing data. 
  element ns2:th {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    mei_att.tabular.attributes,
    empty
  }
tr =
  
  ## (table row) – A formatting element that contains one or more cells (intersection of a row and a column) in a <table>. 
  element ns2:tr {
    (th | td)+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_att.alignment.attributes = mei_att.alignment.attribute.when
mei_att.alignment.attribute.when =
  
  ## indicates the point of occurrence of this feature along a time line. Its value must be the ID of a <when> element.
  attribute when { data.URI }?
mei_model.alignLike = mei_timeline
mei_timeline =
  
  ## – Provides a set of ordered points in time to which musical elements can be linked in order to create a temporal alignment of those elements. 
  element ns2:timeline {
    mei_when*,
    mei_att.common.attributes,
    
    ## holds the identifier of an <avFile> element that references an external digital media file.
    attribute avref { data.URI }?,
    
    ## designates the origin of the timeline, i.e. the <when> element associated with the beginning of the timeline.
    attribute origin { data.URI },
    empty
  }
mei_when =
  
  ## – Indicates a point in time either absolutely (using the absolute attribute), or relative to other elements in the same timeline element (using the interval and since attributes). 
  element ns2:when {
    empty,
    mei_att.common.attributes,
    mei_att.datapointing.attributes,
    
    ## provides an absolute value for the time associated with a point on a timeline. This attribute is required for the element designated as the origin by the parent timeline.
    attribute absolute { data.ISOTIME }?,
    
    ## specifies the time interval between this time point and the one designated by the since attribute. This attribute can only be interpreted meaningfully in conjunction with the inttype attribute.
    attribute interval { text }?,
    
    ## specifies the kind of values used in the interval attribute.
    attribute inttype {
      
      ## byte value.
      "byte"
      | 
        ## Synchronized Multimedia Integration Language.
        "smil"
      | 
        ## MIDI time code.
        "midi"
      | 
        ## SMPTE 25 EBU.
        "smpte-25"
      | 
        ## SMPTE 24 Film Sync.
        "smpte-24"
      | 
        ## SMPTE 30 Drop.
        "smpte-df30"
      | 
        ## SMPTE 30 Non-Drop.
        "smpte-ndf30"
      | 
        ## SMPTE 29.97 Drop.
        "smpte-df29.97"
      | 
        ## SMPTE 29.97 Non-Drop.
        "smpte-ndf29.97"
      | 
        ## AES Time-code character format.
        "tcf"
      | 
        ## ISO 24-hour time format: HH:MM:SS.ss.
        "time"
    }?,
    
    ## identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point. The value should be the ID of another when element in the same timeline. If the since attribute is omitted and the absolute attribute is not specified, then the reference point is understood to be the immediately preceding when element.
    attribute since { data.URI }?,
    empty
  }
mei_att.lyrics.anl.attributes = mei_att.common.anl.attributes
mei_att.lyrics.ges.attributes = empty
mei_att.lyrics.log.attributes =
  mei_att.staffident.attributes, mei_att.layerident.attributes
mei_att.lyrics.vis.attributes =
  mei_att.placement.attributes, mei_att.typography.attributes
mei_att.verse.anl.attributes = mei_att.common.anl.attributes
mei_att.verse.ges.attributes = empty
mei_att.verse.log.attributes =
  mei_att.verse.log.attribute.refrain,
  mei_att.verse.log.attribute.rhythm
mei_att.verse.log.attribute.refrain =
  
  ## used to indicate a common, usually centered, refrain (Mup User's Guide, p. 44).
  attribute refrain { data.BOOLEAN }?
mei_att.verse.log.attribute.rhythm =
  
  ## used to specify a rhythm for the lyric syllables that differs from that of the notes on the staff, e.g. '4,4,4,4' when the rhythm of the notes is '4.,8,4.,8'.
  attribute rhythm { text }?
mei_att.verse.vis.attributes =
  mei_att.typography.attributes,
  mei_att.visualoffset.to.attributes,
  mei_att.visualoffset.vo.attributes,
  mei_att.xy.attributes
mei_model.lyricsLike = lyrics
mei_model.lyricsLike_alternation = lyrics
mei_model.lyricsLike_sequence = lyrics
mei_model.lyricsLike_sequenceOptional = lyrics?
mei_model.lyricsLike_sequenceOptionalRepeatable = lyrics*
mei_model.lyricsLike_sequenceRepeatable = lyrics+
mei_model.sylLike = syl
mei_model.verseLike = verse
lyrics =
  
  ## – Vocally performed 'text' of a musical composition, such as a song or opera. 
  element ns2:lyrics {
    mei_model.verseLike+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.lyrics.log.attributes,
    mei_att.lyrics.vis.attributes,
    mei_att.lyrics.ges.attributes,
    mei_att.lyrics.anl.attributes,
    empty
  }
verse =
  
  ## – Lyric verse. 
  element ns2:verse {
    (dir | dynam | tempo | mei_space)*,
    mei_model.sylLike+,
    mei_model.lbLike*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.verse.log.attributes,
    mei_att.verse.vis.attributes,
    mei_att.verse.ges.attributes,
    mei_att.verse.anl.attributes,
    empty
  }
mei_model.nameLike.agent = corpName | mei_persName
mei_model.nameLike.agent_alternation = corpName | mei_persName
mei_model.nameLike.agent_sequence = corpName, mei_persName
mei_model.nameLike.agent_sequenceOptional = corpName?, mei_persName?
mei_model.nameLike.agent_sequenceOptionalRepeatable =
  corpName*, mei_persName*
mei_model.nameLike.agent_sequenceRepeatable = corpName+, mei_persName+
mei_model.nameLike.geogName = mei_geogName
mei_model.nameLike.geogName_alternation = mei_geogName
mei_model.nameLike.geogName_sequence = mei_geogName
mei_model.nameLike.geogName_sequenceOptional = mei_geogName?
mei_model.nameLike.geogName_sequenceOptionalRepeatable = mei_geogName*
mei_model.nameLike.geogName_sequenceRepeatable = mei_geogName+
mei_model.nameLike.place =
  mei_model.repositoryLike | mei_model.nameLike.geogName
mei_model.nameLike.place_alternation =
  mei_model.repositoryLike_alternation
  | mei_model.nameLike.geogName_alternation
mei_model.nameLike.place_sequence =
  mei_model.repositoryLike_sequence,
  mei_model.nameLike.geogName_sequence
mei_model.nameLike.place_sequenceOptional =
  mei_model.repositoryLike_sequenceOptional?,
  mei_model.nameLike.geogName_sequenceOptional?
mei_model.nameLike.place_sequenceOptionalRepeatable =
  mei_model.repositoryLike_sequenceOptionalRepeatable*,
  mei_model.nameLike.geogName_sequenceOptionalRepeatable*
mei_model.nameLike.place_sequenceRepeatable =
  mei_model.repositoryLike_sequenceRepeatable+,
  mei_model.nameLike.geogName_sequenceRepeatable+
mei_model.nameLike.label = periodName | styleName
mei_model.nameLike.label_alternation = periodName | styleName
mei_model.nameLike.label_sequence = periodName, styleName
mei_model.nameLike.label_sequenceOptional = periodName?, styleName?
mei_model.nameLike.label_sequenceOptionalRepeatable =
  periodName*, styleName*
mei_model.nameLike.label_sequenceRepeatable = periodName+, styleName+
corpName =
  
  ## (corporate name) – Identifies an organization or group of people that acts as a single entity. 
  element ns2:corpName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_geogName =
  
  ## (geographic name) – The proper noun designation for a place, natural feature, or political jurisdiction. 
  element ns2:geogName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
periodName =
  
  ## (period name) – A label that describes a period of time, such as 'Baroque' or '3rd Style period'. 
  element ns2:periodName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_persName =
  
  ## (personal name) – Designation for an individual, including any or all of that individual's forenames, surnames, honorific titles, and added names 
  element ns2:persName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.datable.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
styleName =
  
  ## (style name) – A label for a characteristic style of writing or performance, such as 'bebop' or 'rock-n-roll'. 
  element ns2:styleName {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.bibl.attributes,
    mei_att.common.attributes,
    mei_att.edit.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.name.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_model.locrefLike = mei_ptr | mei_ref
mei_model.locrefLike_alternation = mei_ptr | mei_ref
mei_model.locrefLike_sequence = mei_ptr, mei_ref
mei_model.locrefLike_sequenceOptional = mei_ptr?, mei_ref?
mei_model.locrefLike_sequenceOptionalRepeatable = mei_ptr*, mei_ref*
mei_model.locrefLike_sequenceRepeatable = mei_ptr+, mei_ref+
mei_ptr =
  
  ## (pointer) – Defines a pointer to another location, using only attributes to describe the destination. 
  element ns2:ptr {
    empty,
    mei_att.common.attributes,
    mei_att.internetmedia.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_ref =
  
  ## (reference) – Defines a reference to another location that may contain text and sub-elements to describe the destination. 
  element ns2:ref {
    (text | mei_model.textphraseLike)*,
    mei_att.common.attributes,
    mei_att.internetmedia.attributes,
    mei_att.lang.attributes,
    mei_att.pointing.attributes,
    empty
  }
mei_model.backLike = mei_back
mei_model.divLike = mei_div
mei_model.frontLike = mei_front
mei_model.headLike = mei_head
mei_model.lLike = mei_l
mei_model.listLike = mei_list
mei_model.listLike_alternation = mei_list
mei_model.listLike_sequence = mei_list
mei_model.listLike_sequenceOptional = mei_list?
mei_model.listLike_sequenceOptionalRepeatable = mei_list*
mei_model.listLike_sequenceRepeatable = mei_list+
mei_model.quoteLike = mei_quote
mei_model.quoteLike_alternation = mei_quote
mei_model.quoteLike_sequence = mei_quote
mei_model.quoteLike_sequenceOptional = mei_quote?
mei_model.quoteLike_sequenceOptionalRepeatable = mei_quote*
mei_model.quoteLike_sequenceRepeatable = mei_quote+
mei_model.lgLike = mei_lg
mei_model.lgLike_alternation = mei_lg
mei_model.lgLike_sequence = mei_lg
mei_model.lgLike_sequenceOptional = mei_lg?
mei_model.lgLike_sequenceOptionalRepeatable = mei_lg*
mei_model.lgLike_sequenceRepeatable = mei_lg+
mei_back =
  
  ## (back matter) – Contains any appendixes, advertisements, indexes, etc. following the main body of a musical text. 
  element ns2:back {
    mei_model.milestoneLike.text*,
    (mei_model.divLike | mei_model.frontPart)+,
    mei_model.milestoneLike.text*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_quote =
  
  ## (block quote) – A formatting element that designates an extended quotation; that is, a passage attributed to a source external to the text and normally set off from the text by spacing or other typographic distinction. 
  element ns2:quote {
    mei_model.textcomponentLike+,
    mei_model.biblLike?,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_div =
  
  ## (division) – Major structural division of text, such as a preface, chapter or section. 
  element ns2:div {
    mei_model.milestoneLike.text*,
    mei_model.headLike?,
    (mei_model.divLike | mei_model.textcomponentLike)+,
    mei_model.milestoneLike.text*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.typed.attributes,
    empty
  }
mei_front =
  
  ## (front matter) – Bundles prefatory text found before the start of the musical text. 
  element ns2:front {
    mei_model.milestoneLike.text*,
    (mei_model.divLike | mei_model.frontPart)+,
    mei_model.milestoneLike.text*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_head =
  
  ## (heading) – Contains any heading, for example, the title of a section of text, or the heading of a list. 
  element ns2:head {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_item =
  
  ## – Single item in a <list>. 
  element ns2:item {
    (text
     | mei_model.textcomponentLike
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    empty
  }
mei_l =
  
  ## (line of text) – Contains a single line of text within a line group. 
  element ns2:l {
    (text
     | mei_model.textphraseLike
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    empty
  }
mei_lg =
  
  ## (line group) – May be used for any section of text that is organized as a group of lines; however, it is most often used for a group of verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. 
  element ns2:lg {
    mei_model.headLike?,
    (mei_model.lLike | mei_model.lgLike),
    (mei_model.lLike | mei_model.lgLike)*,
    mei_att.common.attributes,
    mei_att.declaring.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    empty
  }
mei_list =
  
  ## – A formatting element that contains a series of items separated from one another and arranged in a linear, often vertical, sequence. 
  element ns2:list {
    mei_model.headLike?,
    mei_item+,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.xy.attributes,
    
    ## used to identify and format a list. In a "simple" list, <item>s are not numbered or bulleted. In a "marked" list, the sequence of the list items is not critical, and a bullet, box, dash, or other character is displayed at the start of each <item>. In an "ordered" list, the sequence of the items is important, and each <item> is lettered or numbered. Style sheet functions should be used to specify the mark or numeration system for each <item>.
    attribute form {
      
      ## items are not numbered or bulleted.
      "simple"
      | 
        ## bullet, box, dash, or other character is displayed before each item.
        "marked"
      | 
        ## each item is numbered or lettered.
        "ordered"
    }?,
    empty
  }
mei_model.graphicprimitiveLike =
  anchoredText | curve | mei_line | mei_symbol
mei_model.symbolTableLike = symbolTable
anchoredText =
  
  ## – Container for text that is fixed to a particular location, regardless of changes made to the layout of the measures around it. 
  element ns2:anchoredText {
    (text
     | mei_model.textphraseLike.limited
     | mei_model.editLike
     | mei_model.transcriptionLike)*,
    mei_att.common.anl.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.lang.attributes,
    mei_att.startid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.xy.attributes,
    empty
  }
curve =
  
  ## – A curved line that cannot be represented by a more specific element, such as a <slur>. 
  element ns2:curve {
    empty,
    mei_att.common.anl.attributes,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.startendid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.visualoffset2.attributes,
    mei_att.xy.attributes,
    mei_att.xy2.attributes,
    mei_att.curvature.attributes,
    mei_att.curverend.attributes,
    empty
  }
mei_line =
  
  ## – A line that cannot be represented by a more specific element. 
  element ns2:line {
    (text | mei_model.textphraseLike.limited)*,
    mei_att.common.anl.attributes,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.startendid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.visualoffset2.attributes,
    mei_att.xy.attributes,
    mei_att.xy2.attributes,
    mei_att.linerend.attributes,
    empty
  }
mei_symbol =
  
  ## – A reference to a previously defined symbol. 
  element ns2:symbol {
    empty,
    mei_att.common.anl.attributes,
    mei_att.color.attributes,
    mei_att.common.attributes,
    mei_att.facsimile.attributes,
    mei_att.scalable.attributes,
    mei_att.startid.attributes,
    mei_att.typed.attributes,
    mei_att.visualoffset.attributes,
    mei_att.xy.attributes,
    
    ## contains a reference to a previously-declared user-defined symbol.
    attribute ref { data.URI },
    empty
  }
symbolDef =
  
  ## (symbol definition) – Declaration of an individual symbol in a symbolTable.
  element ns2:symbolDef {
    mei_model.graphicprimitiveLike+,
    mei_att.common.attributes,
    mei_att.coordinated.attributes,
    empty
  }
symbolTable =
  
  ## – Contains individual, user-defined symbols. 
  element ns2:symbolTable {
    symbolDef+, mei_att.common.attributes, empty
  }
start = TEI | teiCorpus
